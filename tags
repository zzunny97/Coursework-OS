!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
-exclude	Makefile	/^	tar --exclude='docs' --exclude='.git' -cvzf ..\/xv6-project-$(PROJECTNUM)-$(STUDENTID).tar.gz .$/;"	m
ALT	kbd.h	11;"	d
AS	Makefile	/^AS = $(TOOLPREFIX)gas$/;"	m
ASFLAGS	Makefile	/^ASFLAGS = -m32 -gdwarf-2 -Wa,-divide$/;"	m
ASSERT	lapic.c	25;"	d	file:
Align	umalloc.c	/^typedef long Align;$/;"	t	file:
BACK	sh.c	12;"	d	file:
BACKSPACE	console.c	127;"	d	file:
BBLOCK	fs.h	48;"	d
BCAST	lapic.c	28;"	d	file:
BIG	usertests.asm	/^#define BIG (100*1024*1024)$/;"	d
BIG	usertests.c	1452;"	d	file:
BPB	fs.h	45;"	d
BSIZE	fs.h	6;"	d
BUSY	lapic.c	29;"	d	file:
B_DIRTY	buf.h	13;"	d
B_VALID	buf.h	12;"	d
C	console.c	189;"	d	file:
C	kbd.h	32;"	d
C	kernel.asm	/^#define C(x)  ((x)-'@')  \/\/ Control-x$/;"	d
CAPSLOCK	kbd.h	13;"	d
CC	Makefile	/^CC = $(TOOLPREFIX)gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -Wall -MD -ggdb -m32 -fno-omit-frame-pointer$/;"	m
CMOS_PORT	lapic.c	123;"	d	file:
CMOS_RETURN	lapic.c	124;"	d	file:
CMOS_STATA	lapic.c	163;"	d	file:
CMOS_STATB	lapic.c	164;"	d	file:
CMOS_UIP	lapic.c	165;"	d	file:
COM1	uart.c	15;"	d	file:
CONSOLE	file.h	37;"	d
CONV	kernel.asm	/^#define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))$/;"	d
CONV	lapic.c	217;"	d	file:
CONV	lapic.c	224;"	d	file:
CPUS	Makefile	/^CPUS := 1$/;"	m
CR0_PE	mmu.h	8;"	d
CR0_PG	mmu.h	10;"	d
CR0_WP	mmu.h	9;"	d
CR4_PSE	mmu.h	12;"	d
CRTPORT	console.c	128;"	d	file:
CTL	kbd.h	10;"	d
DAY	lapic.c	170;"	d	file:
DEASSERT	lapic.c	26;"	d	file:
DELIVS	lapic.c	24;"	d	file:
DEVSPACE	memlayout.h	5;"	d
DIRSIZ	fs.h	51;"	d
DPL_USER	mmu.h	53;"	d
Disassembly	bootblock.asm	/^Disassembly of section .text:$/;"	l
Disassembly	cat.asm	/^Disassembly of section .text:$/;"	l
Disassembly	echo.asm	/^Disassembly of section .text:$/;"	l
Disassembly	entryother.asm	/^Disassembly of section .text:$/;"	l
Disassembly	forktest.asm	/^Disassembly of section .text:$/;"	l
Disassembly	getnice.asm	/^Disassembly of section .text:$/;"	l
Disassembly	gettid.asm	/^Disassembly of section .text:$/;"	l
Disassembly	grep.asm	/^Disassembly of section .text:$/;"	l
Disassembly	halt.asm	/^Disassembly of section .text:$/;"	l
Disassembly	init.asm	/^Disassembly of section .text:$/;"	l
Disassembly	initcode.asm	/^Disassembly of section .text:$/;"	l
Disassembly	kernel.asm	/^Disassembly of section .text:$/;"	l
Disassembly	kill.asm	/^Disassembly of section .text:$/;"	l
Disassembly	ln.asm	/^Disassembly of section .text:$/;"	l
Disassembly	ls.asm	/^Disassembly of section .text:$/;"	l
Disassembly	mkdir.asm	/^Disassembly of section .text:$/;"	l
Disassembly	ps.asm	/^Disassembly of section .text:$/;"	l
Disassembly	rm.asm	/^Disassembly of section .text:$/;"	l
Disassembly	setnice.asm	/^Disassembly of section .text:$/;"	l
Disassembly	sh.asm	/^Disassembly of section .text:$/;"	l
Disassembly	stressfs.asm	/^Disassembly of section .text:$/;"	l
Disassembly	test.asm	/^Disassembly of section .text:$/;"	l
Disassembly	thread_create.asm	/^Disassembly of section .text:$/;"	l
Disassembly	thread_exit.asm	/^Disassembly of section .text:$/;"	l
Disassembly	thread_join.asm	/^Disassembly of section .text:$/;"	l
Disassembly	usertests.asm	/^Disassembly of section .text:$/;"	l
Disassembly	wc.asm	/^Disassembly of section .text:$/;"	l
Disassembly	zombie.asm	/^Disassembly of section .text:$/;"	l
E0ESC	kbd.h	17;"	d
ELF_MAGIC	elf.h	3;"	d
ELF_PROG_FLAG_EXEC	elf.h	40;"	d
ELF_PROG_FLAG_READ	elf.h	42;"	d
ELF_PROG_FLAG_WRITE	elf.h	41;"	d
ELF_PROG_LOAD	elf.h	37;"	d
EMBRYO	fmt/proc.h	/^2334 enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
EMBRYO	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
ENABLE	lapic.c	19;"	d	file:
EOI	lapic.c	17;"	d	file:
ERROR	lapic.c	38;"	d	file:
ESR	lapic.c	20;"	d	file:
EXEC	sh.c	8;"	d	file:
EXTMEM	memlayout.h	3;"	d
FD_INODE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon10
FD_INODE	fmt/file.h	/^4701   enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon2
FD_NONE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon10
FD_NONE	fmt/file.h	/^4701   enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon2
FD_PIPE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon10
FD_PIPE	fmt/file.h	/^4701   enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon2
FILES	Makefile	/^FILES = $(shell grep -v '^\\#' runoff.list)$/;"	m
FIXED	lapic.c	30;"	d	file:
FL_IF	mmu.h	5;"	d
FSSIZE	param.h	13;"	d
GDBPORT	Makefile	/^GDBPORT = $(shell expr `id -u` % 5000 + 25000)$/;"	m
HOURS	lapic.c	169;"	d	file:
Header	umalloc.c	/^typedef union header Header;$/;"	t	typeref:union:header	file:
IBLOCK	fs.h	42;"	d
ICRHI	lapic.c	31;"	d	file:
ICRLO	lapic.c	21;"	d	file:
ID	lapic.c	14;"	d	file:
IDE_BSY	ide.c	17;"	d	file:
IDE_CMD_RDMUL	ide.c	24;"	d	file:
IDE_CMD_READ	ide.c	22;"	d	file:
IDE_CMD_WRITE	ide.c	23;"	d	file:
IDE_CMD_WRMUL	ide.c	25;"	d	file:
IDE_DF	ide.c	19;"	d	file:
IDE_DRDY	ide.c	18;"	d	file:
IDE_ERR	ide.c	20;"	d	file:
INIT	lapic.c	22;"	d	file:
INPUT_BUF	console.c	181;"	d	file:
INT_ACTIVELOW	ioapic.c	22;"	d	file:
INT_DISABLED	ioapic.c	20;"	d	file:
INT_LEVEL	ioapic.c	21;"	d	file:
INT_LOGICAL	ioapic.c	23;"	d	file:
IOAPIC	ioapic.c	9;"	d	file:
IO_PIC1	picirq.c	6;"	d	file:
IO_PIC2	kernel.asm	/^#define IO_PIC2         0xA0    \/\/ Slave (IRQs 8-15)$/;"	d
IO_PIC2	picirq.c	7;"	d	file:
IPB	fs.h	39;"	d
IRQ_COM1	traps.h	34;"	d
IRQ_ERROR	traps.h	36;"	d
IRQ_IDE	traps.h	35;"	d
IRQ_KBD	traps.h	33;"	d
IRQ_SPURIOUS	traps.h	37;"	d
IRQ_TIMER	traps.h	32;"	d
KBDATAP	kbd.h	5;"	d
KBSTATP	kbd.h	3;"	d
KBS_DIB	kbd.h	4;"	d
KERNBASE	memlayout.h	8;"	d
KERNLINK	memlayout.h	9;"	d
KEY_DEL	kbd.h	29;"	d
KEY_DN	kbd.h	23;"	d
KEY_END	kbd.h	21;"	d
KEY_HOME	kbd.h	20;"	d
KEY_INS	kbd.h	28;"	d
KEY_LF	kbd.h	24;"	d
KEY_PGDN	kbd.h	27;"	d
KEY_PGUP	kbd.h	26;"	d
KEY_RT	kbd.h	25;"	d
KEY_UP	kbd.h	22;"	d
KSTACKSIZE	param.h	2;"	d
LD	Makefile	/^LD = $(TOOLPREFIX)ld$/;"	m
LEVEL	lapic.c	27;"	d	file:
LINT0	lapic.c	36;"	d	file:
LINT1	lapic.c	37;"	d	file:
LIST	sh.c	11;"	d	file:
LOGSIZE	param.h	11;"	d
MASKED	lapic.c	39;"	d	file:
MAXARG	param.h	9;"	d
MAXARGS	sh.c	14;"	d	file:
MAXFILE	fs.h	26;"	d
MAXOPBLOCKS	param.h	10;"	d
MEMFSOBJS	Makefile	/^MEMFSOBJS = $(filter-out ide.o,$(OBJS)) memide.o$/;"	m
MINS	lapic.c	168;"	d	file:
MONTH	lapic.c	171;"	d	file:
MPBOOT	mp.h	34;"	d
MPBUS	mp.h	50;"	d
MPIOAPIC	mp.h	51;"	d
MPIOINTR	mp.h	52;"	d
MPLINTR	mp.h	53;"	d
MPPROC	mp.h	49;"	d
N	forktest.asm	/^#define N  1000$/;"	d
N	forktest.c	8;"	d	file:
NBUF	param.h	12;"	d
NCPU	param.h	3;"	d
NDEV	param.h	7;"	d
NDIRECT	fs.h	24;"	d
NELEM	defs.h	196;"	d
NFILE	param.h	5;"	d
NINDIRECT	fs.h	25;"	d
NINODE	param.h	6;"	d
NINODES	mkfs.c	18;"	d	file:
NO	kbd.h	7;"	d
NOFILE	param.h	4;"	d
NPDENTRIES	mmu.h	83;"	d
NPROC	param.h	1;"	d
NPTENTRIES	mmu.h	84;"	d
NSEGS	mmu.h	22;"	d
NTHREAD	synch.h	1;"	d
NTHREAD	test.c	12;"	d	file:
NULL	kernel.asm	/^#define NULL 0$/;"	d
NULL	proc.c	13;"	d	file:
NULL	synch.c	14;"	d	file:
NUMLOCK	kbd.h	14;"	d
OBJCOPY	Makefile	/^OBJCOPY = $(TOOLPREFIX)objcopy$/;"	m
OBJDUMP	Makefile	/^OBJDUMP = $(TOOLPREFIX)objdump$/;"	m
OBJS	Makefile	/^OBJS = \\$/;"	m
O_CREATE	fcntl.h	4;"	d
O_RDONLY	fcntl.h	1;"	d
O_RDWR	fcntl.h	3;"	d
O_WRONLY	fcntl.h	2;"	d
P2V	memlayout.h	12;"	d
P2V_WO	memlayout.h	15;"	d
PCINT	lapic.c	35;"	d	file:
PDX	mmu.h	74;"	d
PDXSHIFT	mmu.h	88;"	d
PERIODIC	lapic.c	34;"	d	file:
PGADDR	mmu.h	80;"	d
PGROUNDDOWN	mmu.h	91;"	d
PGROUNDUP	mmu.h	90;"	d
PGSIZE	mmu.h	85;"	d
PHYSTOP	memlayout.h	4;"	d
PIPE	sh.c	10;"	d	file:
PIPESIZE	pipe.c	11;"	d	file:
PRINT	Makefile	/^PRINT = runoff.list runoff.spec README toc.hdr toc.ftr $(FILES)$/;"	m
PROJECTNUM	Makefile	/^PROJECTNUM=3$/;"	m
PTE_ADDR	mmu.h	100;"	d
PTE_FLAGS	mmu.h	101;"	d
PTE_P	mmu.h	94;"	d
PTE_PS	mmu.h	97;"	d
PTE_U	mmu.h	96;"	d
PTE_W	mmu.h	95;"	d
PTX	mmu.h	77;"	d
PTXSHIFT	mmu.h	87;"	d
QEMU	Makefile	/^QEMU = $(shell if which qemu > \/dev\/null; \\$/;"	m
QEMUGDB	Makefile	/^QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \\$/;"	m
QEMUOPTS	Makefile	/^QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)$/;"	m
REDIR	sh.c	9;"	d	file:
REG_ID	ioapic.c	11;"	d	file:
REG_TABLE	ioapic.c	13;"	d	file:
REG_VER	ioapic.c	12;"	d	file:
ROOTDEV	param.h	8;"	d
ROOTINO	fs.h	5;"	d
RTC_ADDR	usertests.c	1701;"	d	file:
RTC_DATA	usertests.c	1702;"	d	file:
RUNNABLE	fmt/proc.h	/^2334 enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
RUNNABLE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
RUNNING	fmt/proc.h	/^2334 enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
RUNNING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
SCROLLLOCK	kbd.h	15;"	d
SECS	lapic.c	167;"	d	file:
SECTOR_SIZE	ide.c	16;"	d	file:
SECTSIZE	bootmain.c	13;"	d	file:
SEG	fmt/mmu.h	/^0751 #define SEG(type, base, lim, dpl) (struct segdesc)    \\$/;"	f
SEG	mmu.h	43;"	d
SEG16	fmt/mmu.h	/^0755 #define SEG16(type, base, lim, dpl) (struct segdesc)  \\$/;"	f
SEG16	mmu.h	47;"	d
SEG_ASM	asm.h	11;"	d
SEG_KCODE	mmu.h	15;"	d
SEG_KDATA	mmu.h	16;"	d
SEG_NULLASM	asm.h	5;"	d
SEG_TSS	mmu.h	19;"	d
SEG_UCODE	mmu.h	17;"	d
SEG_UDATA	mmu.h	18;"	d
SETGATE	fmt/mmu.h	/^0875 #define SETGATE(gate, istrap, sel, off, d)                \\$/;"	f
SETGATE	mmu.h	168;"	d
SHIFT	kbd.h	9;"	d
SLEEPING	fmt/proc.h	/^2334 enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
SLEEPING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
STARTUP	lapic.c	23;"	d	file:
STA_R	asm.h	18;"	d
STA_R	mmu.h	58;"	d
STA_W	asm.h	17;"	d
STA_W	mmu.h	57;"	d
STA_X	asm.h	16;"	d
STA_X	mmu.h	56;"	d
STS_IG32	mmu.h	62;"	d
STS_T32A	mmu.h	61;"	d
STS_TG32	mmu.h	63;"	d
STUDENTID	Makefile	/^STUDENTID=2016312029$/;"	m
SVR	lapic.c	18;"	d	file:
SYSCALL	usys.S	/^#define SYSCALL(name) \\$/;"	d
SYS_chdir	syscall.h	10;"	d
SYS_close	syscall.h	22;"	d
SYS_cond_init	syscall.h	34;"	d
SYS_cond_signal	syscall.h	36;"	d
SYS_cond_wait	syscall.h	35;"	d
SYS_dup	syscall.h	11;"	d
SYS_exec	syscall.h	8;"	d
SYS_exit	syscall.h	3;"	d
SYS_fork	syscall.h	2;"	d
SYS_fstat	syscall.h	9;"	d
SYS_getnice	syscall.h	24;"	d
SYS_getpid	syscall.h	12;"	d
SYS_gettid	syscall.h	30;"	d
SYS_halt	syscall.h	23;"	d
SYS_kill	syscall.h	7;"	d
SYS_link	syscall.h	20;"	d
SYS_mkdir	syscall.h	21;"	d
SYS_mknod	syscall.h	18;"	d
SYS_mutex_init	syscall.h	31;"	d
SYS_mutex_lock	syscall.h	32;"	d
SYS_mutex_unlock	syscall.h	33;"	d
SYS_open	syscall.h	16;"	d
SYS_pipe	syscall.h	5;"	d
SYS_ps	syscall.h	26;"	d
SYS_read	syscall.h	6;"	d
SYS_sbrk	syscall.h	13;"	d
SYS_setnice	syscall.h	25;"	d
SYS_sleep	syscall.h	14;"	d
SYS_thread_create	syscall.h	27;"	d
SYS_thread_exit	syscall.h	28;"	d
SYS_thread_join	syscall.h	29;"	d
SYS_unlink	syscall.h	19;"	d
SYS_uptime	syscall.h	15;"	d
SYS_wait	syscall.h	4;"	d
SYS_write	syscall.h	17;"	d
TCCR	lapic.c	41;"	d	file:
TDCR	lapic.c	42;"	d	file:
TICR	lapic.c	40;"	d	file:
TIMER	lapic.c	32;"	d	file:
TOOLPREFIX	Makefile	/^TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >\/dev\/null 2>&1; \\$/;"	m
TPR	lapic.c	16;"	d	file:
T_ALIGN	traps.h	21;"	d
T_BOUND	traps.h	9;"	d
T_BRKPT	traps.h	7;"	d
T_DBLFLT	traps.h	12;"	d
T_DEBUG	traps.h	5;"	d
T_DEFAULT	traps.h	28;"	d
T_DEV	stat.h	3;"	d
T_DEVICE	traps.h	11;"	d
T_DIR	stat.h	1;"	d
T_DIVIDE	traps.h	4;"	d
T_FILE	stat.h	2;"	d
T_FPERR	traps.h	20;"	d
T_GPFLT	traps.h	17;"	d
T_ILLOP	traps.h	10;"	d
T_IRQ0	traps.h	30;"	d
T_MCHK	traps.h	22;"	d
T_NMI	traps.h	6;"	d
T_OFLOW	traps.h	8;"	d
T_PGFLT	traps.h	18;"	d
T_SEGNP	traps.h	15;"	d
T_SIMDERR	traps.h	23;"	d
T_STACK	traps.h	16;"	d
T_SYSCALL	traps.h	27;"	d
T_TSS	traps.h	14;"	d
ULIB	Makefile	/^ULIB = ulib.o usys.o printf.o umalloc.o $/;"	m
UNUSED	fmt/proc.h	/^2334 enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
UNUSED	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
UPROGS	Makefile	/^UPROGS=\\$/;"	m
V2P	memlayout.h	11;"	d
V2P_WO	memlayout.h	14;"	d
VER	lapic.c	15;"	d	file:
X1	lapic.c	33;"	d	file:
YEAR	lapic.c	172;"	d	file:
ZOMBIE	fmt/proc.h	/^2334 enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
ZOMBIE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
_cat	cat.asm	/^_cat:     file format elf32-i386$/;"	l
_echo	echo.asm	/^_echo:     file format elf32-i386$/;"	l
_forktest	forktest.asm	/^_forktest:     file format elf32-i386$/;"	l
_getnice	getnice.asm	/^_getnice:     file format elf32-i386$/;"	l
_gettid	gettid.asm	/^_gettid:     file format elf32-i386$/;"	l
_grep	grep.asm	/^_grep:     file format elf32-i386$/;"	l
_halt	halt.asm	/^_halt:     file format elf32-i386$/;"	l
_init	init.asm	/^_init:     file format elf32-i386$/;"	l
_kill	kill.asm	/^_kill:     file format elf32-i386$/;"	l
_ln	ln.asm	/^_ln:     file format elf32-i386$/;"	l
_ls	ls.asm	/^_ls:     file format elf32-i386$/;"	l
_mkdir	mkdir.asm	/^_mkdir:     file format elf32-i386$/;"	l
_ps	ps.asm	/^_ps:     file format elf32-i386$/;"	l
_rm	rm.asm	/^_rm:     file format elf32-i386$/;"	l
_setnice	setnice.asm	/^_setnice:     file format elf32-i386$/;"	l
_sh	sh.asm	/^_sh:     file format elf32-i386$/;"	l
_start	entry.S	/^_start = V2P_WO(entry)$/;"	d
_stressfs	stressfs.asm	/^_stressfs:     file format elf32-i386$/;"	l
_test	test.asm	/^_test:     file format elf32-i386$/;"	l
_thread_create	thread_create.asm	/^_thread_create:     file format elf32-i386$/;"	l
_thread_exit	thread_exit.asm	/^_thread_exit:     file format elf32-i386$/;"	l
_thread_join	thread_join.asm	/^_thread_join:     file format elf32-i386$/;"	l
_usertests	usertests.asm	/^_usertests:     file format elf32-i386$/;"	l
_wc	wc.asm	/^_wc:     file format elf32-i386$/;"	l
_zombie	zombie.asm	/^_zombie:     file format elf32-i386$/;"	l
a	cat.asm	/^   a:	55                   	push   %ebp$/;"	l
a	echo.asm	/^   a:	55                   	push   %ebp$/;"	l
a	forktest.asm	/^   a:	55                   	push   %ebp$/;"	l
a	getnice.asm	/^   a:	55                   	push   %ebp$/;"	l
a	gettid.asm	/^   a:	55                   	push   %ebp$/;"	l
a	grep.asm	/^   a:	55                   	push   %ebp$/;"	l
a	halt.asm	/^   a:	55                   	push   %ebp$/;"	l
a	init.asm	/^   a:	55                   	push   %ebp$/;"	l
a	initcode.asm	/^   a:	6a 00                	push   $0x0$/;"	l
a	kernel.asm	/^      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;$/;"	d
a	kernel.asm	/^    a = (uint*)bp->data;$/;"	d
a	kernel.asm	/^  a = (char*)PGROUNDDOWN((uint)va);$/;"	d
a	kernel.asm	/^  a = PGROUNDUP(newsz);$/;"	d
a	kernel.asm	/^  a = PGROUNDUP(oldsz);$/;"	d
a	kill.asm	/^   a:	55                   	push   %ebp$/;"	l
a	ln.asm	/^   a:	ff 71 fc             	pushl  -0x4(%ecx)$/;"	l
a	ls.asm	/^   a:	55                   	push   %ebp$/;"	l
a	mkdir.asm	/^   a:	55                   	push   %ebp$/;"	l
a	ps.asm	/^   a:	55                   	push   %ebp$/;"	l
a	rm.asm	/^   a:	55                   	push   %ebp$/;"	l
a	setnice.asm	/^   a:	55                   	push   %ebp$/;"	l
a	sh.asm	/^       a:	55                   	push   %ebp$/;"	l
a	test.asm	/^   a:	55                   	push   %ebp$/;"	l
a	thread_create.asm	/^   a:	55                   	push   %ebp$/;"	l
a	thread_exit.asm	/^   a:	55                   	push   %ebp$/;"	l
a	thread_join.asm	/^   a:	55                   	push   %ebp$/;"	l
a	usertests.asm	/^       a:	55                   	push   %ebp$/;"	l
a	usertests.asm	/^    a = b + 1;$/;"	d
a	usertests.asm	/^  a = sbrk(0);$/;"	d
a	wc.asm	/^   a:	55                   	push   %ebp$/;"	l
a	zombie.asm	/^   a:	55                   	push   %ebp$/;"	l
a0	cat.asm	/^  a0:	83 ec 04             	sub    $0x4,%esp$/;"	l
a0	echo.asm	/^  a0:	55                   	push   %ebp$/;"	l
a0	forktest.asm	/^  a0:	e8 f5 02 00 00       	call   39a <wait>$/;"	l
a0	getnice.asm	/^  a0:	31 c0                	xor    %eax,%eax$/;"	l
a0	gettid.asm	/^  a0:	55                   	push   %ebp$/;"	l
a0	grep.asm	/^  a0:	e8 7b 06 00 00       	call   720 <printf>$/;"	l
a0	halt.asm	/^  a0:	55                   	push   %ebp$/;"	l
a0	ls.asm	/^  a0:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a0	ps.asm	/^  a0:	31 c0                	xor    %eax,%eax$/;"	l
a0	thread_create.asm	/^  a0:	31 c0                	xor    %eax,%eax$/;"	l
a0	thread_exit.asm	/^  a0:	55                   	push   %ebp$/;"	l
a0	thread_join.asm	/^  a0:	31 c0                	xor    %eax,%eax$/;"	l
a0	usertests.asm	/^      a0:	e8 db 03 00 00       	call   480 <writetest>$/;"	l
a0	wc.asm	/^  a0:	55                   	push   %ebp$/;"	l
a0	zombie.asm	/^  a0:	31 c0                	xor    %eax,%eax$/;"	l
a00	sh.asm	/^     a00:	8b 4b 04             	mov    0x4(%ebx),%ecx$/;"	l
a01	ls.asm	/^ a01:	83 c4 10             	add    $0x10,%esp$/;"	l
a02	usertests.asm	/^     a02:	e8 9b 2e 00 00       	call   38a2 <exit>$/;"	l
a03	sh.asm	/^     a03:	8d 43 2c             	lea    0x2c(%ebx),%eax$/;"	l
a04	ls.asm	/^ a04:	85 d2                	test   %edx,%edx$/;"	l
a05	grep.asm	/^ a05:	83 c0 08             	add    $0x8,%eax$/;"	l
a06	ls.asm	/^ a06:	75 c0                	jne    9c8 <malloc+0x58>$/;"	l
a06	sh.asm	/^     a06:	85 c9                	test   %ecx,%ecx$/;"	l
a07	usertests.asm	/^     a07:	89 f6                	mov    %esi,%esi$/;"	l
a08	grep.asm	/^ a08:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
a08	ls.asm	/^ a08:	31 c0                	xor    %eax,%eax$/;"	l
a08	sh.asm	/^     a08:	74 15                	je     a1f <nulterminate+0x5f>$/;"	l
a09	usertests.asm	/^     a09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
a0a	ls.asm	/^ a0a:	eb 1c                	jmp    a28 <malloc+0xb8>$/;"	l
a0a	sh.asm	/^     a0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
a0b	grep.asm	/^ a0b:	5b                   	pop    %ebx$/;"	l
a0c	grep.asm	/^ a0c:	5e                   	pop    %esi$/;"	l
a0c	ls.asm	/^ a0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
a0d	grep.asm	/^ a0d:	5f                   	pop    %edi$/;"	l
a0e	grep.asm	/^ a0e:	5d                   	pop    %ebp$/;"	l
a0f	grep.asm	/^ a0f:	c3                   	ret    $/;"	l
a1	echo.asm	/^  a1:	89 e5                	mov    %esp,%ebp$/;"	l
a1	gettid.asm	/^  a1:	89 e5                	mov    %esp,%ebp$/;"	l
a1	halt.asm	/^  a1:	89 e5                	mov    %esp,%ebp$/;"	l
a1	kill.asm	/^  a1:	84 c0                	test   %al,%al$/;"	l
a1	ln.asm	/^  a1:	84 c0                	test   %al,%al$/;"	l
a1	mkdir.asm	/^  a1:	5b                   	pop    %ebx$/;"	l
a1	rm.asm	/^  a1:	5b                   	pop    %ebx$/;"	l
a1	setnice.asm	/^  a1:	89 f1                	mov    %esi,%ecx$/;"	l
a1	sh.asm	/^      a1:	e8 ba 00 00 00       	call   160 <panic>$/;"	l
a1	thread_exit.asm	/^  a1:	89 e5                	mov    %esp,%ebp$/;"	l
a1	wc.asm	/^  a1:	89 e5                	mov    %esp,%ebp$/;"	l
a10	grep.asm	/^ a10:	8b 08                	mov    (%eax),%ecx$/;"	l
a10	ls.asm	/^ a10:	39 cf                	cmp    %ecx,%edi$/;"	l
a10	sh.asm	/^     a10:	8b 10                	mov    (%eax),%edx$/;"	l
a10	usertests.asm	/^     a10:	55                   	push   %ebp$/;"	l
a11	usertests.asm	/^     a11:	89 e5                	mov    %esp,%ebp$/;"	l
a12	grep.asm	/^ a12:	89 0a                	mov    %ecx,(%edx)$/;"	l
a12	ls.asm	/^ a12:	74 1c                	je     a30 <malloc+0xc0>$/;"	l
a12	sh.asm	/^     a12:	83 c0 04             	add    $0x4,%eax$/;"	l
a13	usertests.asm	/^     a13:	57                   	push   %edi$/;"	l
a14	grep.asm	/^ a14:	eb e9                	jmp    9ff <malloc+0xaf>$/;"	l
a14	ls.asm	/^ a14:	29 f9                	sub    %edi,%ecx$/;"	l
a14	usertests.asm	/^     a14:	56                   	push   %esi$/;"	l
a15	sh.asm	/^     a15:	c6 02 00             	movb   $0x0,(%edx)$/;"	l
a15	usertests.asm	/^     a15:	53                   	push   %ebx$/;"	l
a16	grep.asm	/^ a16:	c7 05 20 0e 00 00 24 	movl   $0xe24,0xe20$/;"	l
a16	ls.asm	/^ a16:	89 48 04             	mov    %ecx,0x4(%eax)$/;"	l
a16	usertests.asm	/^     a16:	8d 45 e0             	lea    -0x20(%ebp),%eax$/;"	l
a18	sh.asm	/^     a18:	8b 50 d8             	mov    -0x28(%eax),%edx$/;"	l
a19	ls.asm	/^ a19:	8d 04 c8             	lea    (%eax,%ecx,8),%eax$/;"	l
a19	usertests.asm	/^     a19:	83 ec 38             	sub    $0x38,%esp$/;"	l
a1b	sh.asm	/^     a1b:	85 d2                	test   %edx,%edx$/;"	l
a1c	ls.asm	/^ a1c:	89 78 04             	mov    %edi,0x4(%eax)$/;"	l
a1c	usertests.asm	/^     a1c:	50                   	push   %eax$/;"	l
a1d	grep.asm	/^ a1d:	0e 00 00 $/;"	l
a1d	sh.asm	/^     a1d:	75 f1                	jne    a10 <nulterminate+0x50>$/;"	l
a1d	usertests.asm	/^     a1d:	e8 90 2e 00 00       	call   38b2 <pipe>$/;"	l
a1f	ls.asm	/^ a1f:	89 15 d0 0d 00 00    	mov    %edx,0xdd0$/;"	l
a1f	sh.asm	/^     a1f:	89 d8                	mov    %ebx,%eax$/;"	l
a2	getnice.asm	/^  a2:	29 d8                	sub    %ebx,%eax$/;"	l
a2	mkdir.asm	/^  a2:	5d                   	pop    %ebp$/;"	l
a2	ps.asm	/^  a2:	29 d8                	sub    %ebx,%eax$/;"	l
a2	rm.asm	/^  a2:	5d                   	pop    %ebp$/;"	l
a2	stressfs.asm	/^  a2:	50                   	push   %eax$/;"	l
a2	test.asm	/^  a2:	0f 84 e7 00 00 00    	je     18f <main+0x18f>$/;"	l
a2	thread_create.asm	/^  a2:	29 d8                	sub    %ebx,%eax$/;"	l
a2	thread_join.asm	/^  a2:	29 d8                	sub    %ebx,%eax$/;"	l
a2	zombie.asm	/^  a2:	29 d8                	sub    %ebx,%eax$/;"	l
a20	grep.asm	/^ a20:	c7 05 24 0e 00 00 24 	movl   $0xe24,0xe24$/;"	l
a21	sh.asm	/^     a21:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
a22	usertests.asm	/^     a22:	83 c4 10             	add    $0x10,%esp$/;"	l
a24	sh.asm	/^     a24:	c9                   	leave  $/;"	l
a25	ls.asm	/^ a25:	83 c0 08             	add    $0x8,%eax$/;"	l
a25	sh.asm	/^     a25:	c3                   	ret    $/;"	l
a25	usertests.asm	/^     a25:	85 c0                	test   %eax,%eax$/;"	l
a26	sh.asm	/^     a26:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
a27	grep.asm	/^ a27:	0e 00 00 $/;"	l
a27	usertests.asm	/^     a27:	0f 85 35 01 00 00    	jne    b62 <pipe1+0x152>$/;"	l
a28	ls.asm	/^ a28:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
a29	sh.asm	/^     a29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
a2a	grep.asm	/^ a2a:	b8 24 0e 00 00       	mov    $0xe24,%eax$/;"	l
a2b	ls.asm	/^ a2b:	5b                   	pop    %ebx$/;"	l
a2c	ls.asm	/^ a2c:	5e                   	pop    %esi$/;"	l
a2d	ls.asm	/^ a2d:	5f                   	pop    %edi$/;"	l
a2d	usertests.asm	/^     a2d:	e8 68 2e 00 00       	call   389a <fork>$/;"	l
a2e	ls.asm	/^ a2e:	5d                   	pop    %ebp$/;"	l
a2f	grep.asm	/^ a2f:	c7 05 28 0e 00 00 00 	movl   $0x0,0xe28$/;"	l
a2f	ls.asm	/^ a2f:	c3                   	ret    $/;"	l
a3	cat.asm	/^  a3:	53                   	push   %ebx$/;"	l
a3	echo.asm	/^  a3:	56                   	push   %esi$/;"	l
a3	gettid.asm	/^  a3:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
a3	halt.asm	/^  a3:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
a3	kill.asm	/^  a3:	75 1e                	jne    c3 <strcmp+0x33>$/;"	l
a3	ln.asm	/^  a3:	75 1e                	jne    c3 <strcmp+0x33>$/;"	l
a3	ls.asm	/^  a3:	53                   	push   %ebx$/;"	l
a3	mkdir.asm	/^  a3:	c3                   	ret    $/;"	l
a3	rm.asm	/^  a3:	c3                   	ret    $/;"	l
a3	setnice.asm	/^  a3:	38 d8                	cmp    %bl,%al$/;"	l
a3	stressfs.asm	/^  a3:	e8 1a 03 00 00       	call   3c2 <open>$/;"	l
a3	thread_exit.asm	/^  a3:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
a3	wc.asm	/^  a3:	57                   	push   %edi$/;"	l
a30	ls.asm	/^ a30:	8b 08                	mov    (%eax),%ecx$/;"	l
a30	sh.asm	/^     a30:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a32	ls.asm	/^ a32:	89 0a                	mov    %ecx,(%edx)$/;"	l
a32	usertests.asm	/^     a32:	83 f8 00             	cmp    $0x0,%eax$/;"	l
a33	sh.asm	/^     a33:	ff 73 04             	pushl  0x4(%ebx)$/;"	l
a34	ls.asm	/^ a34:	eb e9                	jmp    a1f <malloc+0xaf>$/;"	l
a35	usertests.asm	/^     a35:	0f 84 86 00 00 00    	je     ac1 <pipe1+0xb1>$/;"	l
a36	grep.asm	/^ a36:	00 00 00 $/;"	l
a36	ls.asm	/^ a36:	c7 05 d0 0d 00 00 d4 	movl   $0xdd4,0xdd0$/;"	l
a36	sh.asm	/^     a36:	e8 85 ff ff ff       	call   9c0 <nulterminate>$/;"	l
a39	grep.asm	/^ a39:	e9 3e ff ff ff       	jmp    97c <malloc+0x2c>$/;"	l
a3b	sh.asm	/^     a3b:	89 d8                	mov    %ebx,%eax$/;"	l
a3b	usertests.asm	/^     a3b:	0f 8e 35 01 00 00    	jle    b76 <pipe1+0x166>$/;"	l
a3d	ls.asm	/^ a3d:	0d 00 00 $/;"	l
a3d	sh.asm	/^     a3d:	83 c4 10             	add    $0x10,%esp$/;"	l
a4	cat.asm	/^  a4:	68 60 0b 00 00       	push   $0xb60$/;"	l
a4	echo.asm	/^  a4:	53                   	push   %ebx$/;"	l
a4	getnice.asm	/^  a4:	5b                   	pop    %ebx$/;"	l
a4	init.asm	/^  a4:	83 c4 10             	add    $0x10,%esp$/;"	l
a4	ls.asm	/^  a4:	e8 17 03 00 00       	call   3c0 <strlen>$/;"	l
a4	mkdir.asm	/^  a4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
a4	ps.asm	/^  a4:	5b                   	pop    %ebx$/;"	l
a4	rm.asm	/^  a4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
a4	thread_create.asm	/^  a4:	5b                   	pop    %ebx$/;"	l
a4	thread_join.asm	/^  a4:	5b                   	pop    %ebx$/;"	l
a4	wc.asm	/^  a4:	56                   	push   %esi$/;"	l
a4	zombie.asm	/^  a4:	5b                   	pop    %ebx$/;"	l
a40	ls.asm	/^ a40:	c7 05 d4 0d 00 00 d4 	movl   $0xdd4,0xdd4$/;"	l
a40	sh.asm	/^     a40:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
a41	usertests.asm	/^     a41:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a43	sh.asm	/^     a43:	c9                   	leave  $/;"	l
a44	sh.asm	/^     a44:	c3                   	ret    $/;"	l
a44	usertests.asm	/^     a44:	ff 75 e4             	pushl  -0x1c(%ebp)$/;"	l
a45	sh.asm	/^     a45:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
a47	ls.asm	/^ a47:	0d 00 00 $/;"	l
a47	usertests.asm	/^     a47:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
a48	sh.asm	/^     a48:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a4a	ls.asm	/^ a4a:	b8 d4 0d 00 00       	mov    $0xdd4,%eax$/;"	l
a4b	sh.asm	/^     a4b:	ff 73 04             	pushl  0x4(%ebx)$/;"	l
a4c	usertests.asm	/^     a4c:	31 db                	xor    %ebx,%ebx$/;"	l
a4e	sh.asm	/^     a4e:	e8 6d ff ff ff       	call   9c0 <nulterminate>$/;"	l
a4e	usertests.asm	/^     a4e:	e8 77 2e 00 00       	call   38ca <close>$/;"	l
a4f	ls.asm	/^ a4f:	c7 05 d8 0d 00 00 00 	movl   $0x0,0xdd8$/;"	l
a5	echo.asm	/^  a5:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
a5	forktest.asm	/^  a5:	85 c0                	test   %eax,%eax$/;"	l
a5	getnice.asm	/^  a5:	5e                   	pop    %esi$/;"	l
a5	grep.asm	/^  a5:	e8 b8 04 00 00       	call   562 <exit>$/;"	l
a5	kill.asm	/^  a5:	eb 29                	jmp    d0 <strcmp+0x40>$/;"	l
a5	ln.asm	/^  a5:	eb 29                	jmp    d0 <strcmp+0x40>$/;"	l
a5	ps.asm	/^  a5:	5e                   	pop    %esi$/;"	l
a5	setnice.asm	/^  a5:	74 e9                	je     90 <strcmp+0x20>$/;"	l
a5	thread_create.asm	/^  a5:	5e                   	pop    %esi$/;"	l
a5	thread_join.asm	/^  a5:	5e                   	pop    %esi$/;"	l
a5	usertests.asm	/^      a5:	e8 b6 05 00 00       	call   660 <writetest1>$/;"	l
a5	wc.asm	/^  a5:	53                   	push   %ebx$/;"	l
a5	zombie.asm	/^  a5:	5e                   	pop    %esi$/;"	l
a53	sh.asm	/^     a53:	8b 43 0c             	mov    0xc(%ebx),%eax$/;"	l
a53	usertests.asm	/^     a53:	83 c4 10             	add    $0x10,%esp$/;"	l
a56	ls.asm	/^ a56:	00 00 00 $/;"	l
a56	sh.asm	/^     a56:	83 c4 10             	add    $0x10,%esp$/;"	l
a56	usertests.asm	/^     a56:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)$/;"	l
a59	ls.asm	/^ a59:	e9 3e ff ff ff       	jmp    99c <malloc+0x2c>$/;"	l
a59	sh.asm	/^     a59:	c6 00 00             	movb   $0x0,(%eax)$/;"	l
a5c	sh.asm	/^     a5c:	89 d8                	mov    %ebx,%eax$/;"	l
a5d	usertests.asm	/^     a5d:	83 ec 04             	sub    $0x4,%esp$/;"	l
a5e	sh.asm	/^     a5e:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
a6	getnice.asm	/^  a6:	5d                   	pop    %ebp$/;"	l
a6	gettid.asm	/^  a6:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
a6	halt.asm	/^  a6:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
a6	ps.asm	/^  a6:	5d                   	pop    %ebp$/;"	l
a6	sh.asm	/^      a6:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a6	thread_create.asm	/^  a6:	5d                   	pop    %ebp$/;"	l
a6	thread_exit.asm	/^  a6:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
a6	thread_join.asm	/^  a6:	5d                   	pop    %ebp$/;"	l
a6	wc.asm	/^  a6:	31 f6                	xor    %esi,%esi$/;"	l
a6	zombie.asm	/^  a6:	5d                   	pop    %ebp$/;"	l
a60	usertests.asm	/^     a60:	57                   	push   %edi$/;"	l
a61	sh.asm	/^     a61:	c9                   	leave  $/;"	l
a61	usertests.asm	/^     a61:	68 00 86 00 00       	push   $0x8600$/;"	l
a62	sh.asm	/^     a62:	c3                   	ret    $/;"	l
a63	sh.asm	/^     a63:	90                   	nop$/;"	l
a64	sh.asm	/^     a64:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
a66	usertests.asm	/^     a66:	ff 75 e0             	pushl  -0x20(%ebp)$/;"	l
a68	sh.asm	/^     a68:	31 c0                	xor    %eax,%eax$/;"	l
a69	usertests.asm	/^     a69:	e8 4c 2e 00 00       	call   38ba <read>$/;"	l
a6a	sh.asm	/^     a6a:	eb 8d                	jmp    9f9 <nulterminate+0x39>$/;"	l
a6c	sh.asm	/^     a6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
a6e	usertests.asm	/^     a6e:	83 c4 10             	add    $0x10,%esp$/;"	l
a7	forktest.asm	/^  a7:	78 5e                	js     107 <forktest+0xb7>$/;"	l
a7	getnice.asm	/^  a7:	c3                   	ret    $/;"	l
a7	init.asm	/^  a7:	eb df                	jmp    88 <main+0x88>$/;"	l
a7	kill.asm	/^  a7:	89 f6                	mov    %esi,%esi$/;"	l
a7	ln.asm	/^  a7:	89 f6                	mov    %esi,%esi$/;"	l
a7	ps.asm	/^  a7:	c3                   	ret    $/;"	l
a7	setnice.asm	/^  a7:	29 d8                	sub    %ebx,%eax$/;"	l
a7	thread_create.asm	/^  a7:	c3                   	ret    $/;"	l
a7	thread_join.asm	/^  a7:	c3                   	ret    $/;"	l
a7	zombie.asm	/^  a7:	c3                   	ret    $/;"	l
a70	sh.asm	/^     a70:	55                   	push   %ebp$/;"	l
a71	sh.asm	/^     a71:	89 e5                	mov    %esp,%ebp$/;"	l
a71	usertests.asm	/^     a71:	85 c0                	test   %eax,%eax$/;"	l
a73	sh.asm	/^     a73:	56                   	push   %esi$/;"	l
a73	usertests.asm	/^     a73:	0f 8e a3 00 00 00    	jle    b1c <pipe1+0x10c>$/;"	l
a74	sh.asm	/^     a74:	53                   	push   %ebx$/;"	l
a75	sh.asm	/^     a75:	8b 5d 08             	mov    0x8(%ebp),%ebx$/;"	l
a78	sh.asm	/^     a78:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a79	usertests.asm	/^     a79:	89 d9                	mov    %ebx,%ecx$/;"	l
a7b	sh.asm	/^     a7b:	53                   	push   %ebx$/;"	l
a7b	usertests.asm	/^     a7b:	8d 34 18             	lea    (%eax,%ebx,1),%esi$/;"	l
a7c	sh.asm	/^     a7c:	e8 df 00 00 00       	call   b60 <strlen>$/;"	l
a7e	usertests.asm	/^     a7e:	f7 d9                	neg    %ecx$/;"	l
a8	echo.asm	/^  a8:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
a8	getnice.asm	/^  a8:	90                   	nop$/;"	l
a8	ps.asm	/^  a8:	90                   	nop$/;"	l
a8	stressfs.asm	/^  a8:	83 c4 10             	add    $0x10,%esp$/;"	l
a8	test.asm	/^  a8:	83 c3 01             	add    $0x1,%ebx$/;"	l
a8	thread_create.asm	/^  a8:	90                   	nop$/;"	l
a8	thread_join.asm	/^  a8:	90                   	nop$/;"	l
a8	wc.asm	/^  a8:	31 db                	xor    %ebx,%ebx$/;"	l
a8	zombie.asm	/^  a8:	90                   	nop$/;"	l
a80	usertests.asm	/^     a80:	38 9c 0b 00 86 00 00 	cmp    %bl,0x8600(%ebx,%ecx,1)$/;"	l
a81	sh.asm	/^     a81:	59                   	pop    %ecx$/;"	l
a82	sh.asm	/^     a82:	01 c3                	add    %eax,%ebx$/;"	l
a84	sh.asm	/^     a84:	8d 45 08             	lea    0x8(%ebp),%eax$/;"	l
a87	sh.asm	/^     a87:	5e                   	pop    %esi$/;"	l
a87	usertests.asm	/^     a87:	8d 53 01             	lea    0x1(%ebx),%edx$/;"	l
a88	sh.asm	/^     a88:	53                   	push   %ebx$/;"	l
a89	sh.asm	/^     a89:	50                   	push   %eax$/;"	l
a8a	sh.asm	/^     a8a:	e8 01 fe ff ff       	call   890 <parseline>$/;"	l
a8a	usertests.asm	/^     a8a:	75 1b                	jne    aa7 <pipe1+0x97>$/;"	l
a8c	usertests.asm	/^     a8c:	39 f2                	cmp    %esi,%edx$/;"	l
a8e	usertests.asm	/^     a8e:	89 d3                	mov    %edx,%ebx$/;"	l
a8f	sh.asm	/^     a8f:	89 c6                	mov    %eax,%esi$/;"	l
a9	cat.asm	/^  a9:	6a 01                	push   $0x1$/;"	l
a9	forktest.asm	/^  a9:	83 eb 01             	sub    $0x1,%ebx$/;"	l
a9	getnice.asm	/^  a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
a9	gettid.asm	/^  a9:	74 12                	je     bd <strlen+0x1d>$/;"	l
a9	halt.asm	/^  a9:	74 12                	je     bd <strlen+0x1d>$/;"	l
a9	init.asm	/^  a9:	53                   	push   %ebx$/;"	l
a9	kill.asm	/^  a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
a9	ln.asm	/^  a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
a9	ls.asm	/^  a9:	83 c4 0c             	add    $0xc,%esp$/;"	l
a9	ps.asm	/^  a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
a9	setnice.asm	/^  a9:	5b                   	pop    %ebx$/;"	l
a9	sh.asm	/^      a9:	68 c0 18 00 00       	push   $0x18c0$/;"	l
a9	thread_create.asm	/^  a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
a9	thread_exit.asm	/^  a9:	74 12                	je     bd <strlen+0x1d>$/;"	l
a9	thread_join.asm	/^  a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
a9	zombie.asm	/^  a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
a90	usertests.asm	/^     a90:	75 ee                	jne    a80 <pipe1+0x70>$/;"	l
a91	sh.asm	/^     a91:	8d 45 08             	lea    0x8(%ebp),%eax$/;"	l
a92	usertests.asm	/^     a92:	01 ff                	add    %edi,%edi$/;"	l
a94	sh.asm	/^     a94:	83 c4 0c             	add    $0xc,%esp$/;"	l
a94	usertests.asm	/^     a94:	01 45 d4             	add    %eax,-0x2c(%ebp)$/;"	l
a97	sh.asm	/^     a97:	68 19 12 00 00       	push   $0x1219$/;"	l
a97	usertests.asm	/^     a97:	b8 00 20 00 00       	mov    $0x2000,%eax$/;"	l
a9c	sh.asm	/^     a9c:	53                   	push   %ebx$/;"	l
a9c	usertests.asm	/^     a9c:	81 ff 00 20 00 00    	cmp    $0x2000,%edi$/;"	l
a9d	sh.asm	/^     a9d:	50                   	push   %eax$/;"	l
a9e	sh.asm	/^     a9e:	e8 4d fb ff ff       	call   5f0 <peek>$/;"	l
aa	grep.asm	/^  aa:	66 90                	xchg   %ax,%ax$/;"	l
aa	init.asm	/^  aa:	53                   	push   %ebx$/;"	l
aa	mkdir.asm	/^  aa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi$/;"	l
aa	rm.asm	/^  aa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi$/;"	l
aa	setnice.asm	/^  aa:	5e                   	pop    %esi$/;"	l
aa	usertests.asm	/^      aa:	e8 81 07 00 00       	call   830 <createtest>$/;"	l
aa	wc.asm	/^  aa:	83 ec 1c             	sub    $0x1c,%esp$/;"	l
aa2	usertests.asm	/^     aa2:	0f 4f f8             	cmovg  %eax,%edi$/;"	l
aa3	sh.asm	/^     aa3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
aa5	usertests.asm	/^     aa5:	eb b6                	jmp    a5d <pipe1+0x4d>$/;"	l
aa6	sh.asm	/^     aa6:	83 c4 10             	add    $0x10,%esp$/;"	l
aa7	usertests.asm	/^     aa7:	83 ec 08             	sub    $0x8,%esp$/;"	l
aa9	sh.asm	/^     aa9:	39 c3                	cmp    %eax,%ebx$/;"	l
aaa	usertests.asm	/^     aaa:	68 d6 40 00 00       	push   $0x40d6$/;"	l
aab	sh.asm	/^     aab:	75 12                	jne    abf <parsecmd+0x4f>$/;"	l
aad	sh.asm	/^     aad:	83 ec 0c             	sub    $0xc,%esp$/;"	l
aaf	usertests.asm	/^     aaf:	6a 01                	push   $0x1$/;"	l
ab	cat.asm	/^  ab:	e8 c2 02 00 00       	call   372 <write>$/;"	l
ab	echo.asm	/^  ab:	0f b6 02             	movzbl (%edx),%eax$/;"	l
ab	gettid.asm	/^  ab:	31 d2                	xor    %edx,%edx$/;"	l
ab	halt.asm	/^  ab:	31 d2                	xor    %edx,%edx$/;"	l
ab	init.asm	/^  ab:	68 79 08 00 00       	push   $0x879$/;"	l
ab	setnice.asm	/^  ab:	5d                   	pop    %ebp$/;"	l
ab	stressfs.asm	/^  ab:	89 c7                	mov    %eax,%edi$/;"	l
ab	test.asm	/^  ab:	83 fb 07             	cmp    $0x7,%ebx$/;"	l
ab	thread_exit.asm	/^  ab:	31 d2                	xor    %edx,%edx$/;"	l
ab0	sh.asm	/^     ab0:	56                   	push   %esi$/;"	l
ab1	sh.asm	/^     ab1:	e8 0a ff ff ff       	call   9c0 <nulterminate>$/;"	l
ab1	usertests.asm	/^     ab1:	e8 aa 2f 00 00       	call   3a60 <printf>$/;"	l
ab6	sh.asm	/^     ab6:	8d 65 f8             	lea    -0x8(%ebp),%esp$/;"	l
ab6	usertests.asm	/^     ab6:	83 c4 10             	add    $0x10,%esp$/;"	l
ab9	sh.asm	/^     ab9:	89 f0                	mov    %esi,%eax$/;"	l
ab9	usertests.asm	/^     ab9:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
abb	sh.asm	/^     abb:	5b                   	pop    %ebx$/;"	l
abc	sh.asm	/^     abc:	5e                   	pop    %esi$/;"	l
abc	usertests.asm	/^     abc:	5b                   	pop    %ebx$/;"	l
abd	sh.asm	/^     abd:	5d                   	pop    %ebp$/;"	l
abd	usertests.asm	/^     abd:	5e                   	pop    %esi$/;"	l
abe	sh.asm	/^     abe:	c3                   	ret    $/;"	l
abe	usertests.asm	/^     abe:	5f                   	pop    %edi$/;"	l
abf	sh.asm	/^     abf:	52                   	push   %edx$/;"	l
abf	usertests.asm	/^     abf:	5d                   	pop    %ebp$/;"	l
ac	forktest.asm	/^  ac:	75 f2                	jne    a0 <forktest+0x50>$/;"	l
ac	grep.asm	/^  ac:	66 90                	xchg   %ax,%ax$/;"	l
ac	ls.asm	/^  ac:	50                   	push   %eax$/;"	l
ac	setnice.asm	/^  ac:	c3                   	ret    $/;"	l
ac0	sh.asm	/^     ac0:	50                   	push   %eax$/;"	l
ac0	usertests.asm	/^     ac0:	c3                   	ret    $/;"	l
ac1	sh.asm	/^     ac1:	68 92 12 00 00       	push   $0x1292$/;"	l
ac1	usertests.asm	/^     ac1:	83 ec 0c             	sub    $0xc,%esp$/;"	l
ac4	usertests.asm	/^     ac4:	ff 75 e0             	pushl  -0x20(%ebp)$/;"	l
ac6	sh.asm	/^     ac6:	6a 02                	push   $0x2$/;"	l
ac7	usertests.asm	/^     ac7:	31 f6                	xor    %esi,%esi$/;"	l
ac8	sh.asm	/^     ac8:	e8 13 04 00 00       	call   ee0 <printf>$/;"	l
ac9	usertests.asm	/^     ac9:	e8 fc 2d 00 00       	call   38ca <close>$/;"	l
acd	sh.asm	/^     acd:	c7 04 24 56 12 00 00 	movl   $0x1256,(%esp)$/;"	l
ace	usertests.asm	/^     ace:	83 c4 10             	add    $0x10,%esp$/;"	l
acquire	fmt/spinlock.c	/^1574 acquire(struct spinlock *lk)$/;"	f
acquire	spinlock.c	/^acquire(struct spinlock *lk)$/;"	f
acquiresleep	fmt/sleeplock.c	/^5172 acquiresleep(struct sleeplock *lk)$/;"	f
acquiresleep	sleeplock.c	/^acquiresleep(struct sleeplock *lk)$/;"	f
active	synch.h	/^  int active;$/;"	m	struct:cond_t
ad	gettid.asm	/^  ad:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
ad	halt.asm	/^  ad:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
ad	ls.asm	/^  ad:	53                   	push   %ebx$/;"	l
ad	setnice.asm	/^  ad:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
ad	stressfs.asm	/^  ad:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
ad	thread_exit.asm	/^  ad:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
ad	wc.asm	/^  ad:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)$/;"	l
ad1	usertests.asm	/^     ad1:	89 f0                	mov    %esi,%eax$/;"	l
ad3	usertests.asm	/^     ad3:	8d 96 09 04 00 00    	lea    0x409(%esi),%edx$/;"	l
ad4	sh.asm	/^     ad4:	e8 87 f6 ff ff       	call   160 <panic>$/;"	l
ad9	sh.asm	/^     ad9:	66 90                	xchg   %ax,%ax$/;"	l
ad9	usertests.asm	/^     ad9:	89 f3                	mov    %esi,%ebx$/;"	l
adb	sh.asm	/^     adb:	66 90                	xchg   %ax,%ax$/;"	l
adb	usertests.asm	/^     adb:	f7 d8                	neg    %eax$/;"	l
add	sh.asm	/^     add:	66 90                	xchg   %ax,%ax$/;"	l
add	usertests.asm	/^     add:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
addr	fmt/mp.h	/^7644   uint *addr;                  \/\/ I\/O APIC address$/;"	m	struct:mpioapic
addr	kernel.asm	/^  addr = P2V(a);$/;"	d
addr	kernel.asm	/^  addr = myproc()->sz;$/;"	d
addr	mp.h	/^  uint *addr;                  \/\/ I\/O APIC address$/;"	m	struct:mpioapic
addrs	file.h	/^  uint addrs[NDIRECT+1];$/;"	m	struct:inode
addrs	fmt/file.h	/^4724   uint addrs[NDIRECT+1];$/;"	m	struct:inode
addrs	fmt/fs.h	/^4634   uint addrs[NDIRECT+1];   \/\/ Data block addresses$/;"	m	struct:dinode
addrs	fs.h	/^  uint addrs[NDIRECT+1];   \/\/ Data block addresses$/;"	m	struct:dinode
adf	sh.asm	/^     adf:	90                   	nop$/;"	l
ae	echo.asm	/^  ae:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
ae	forktest.asm	/^  ae:	e8 e7 02 00 00       	call   39a <wait>$/;"	l
ae	grep.asm	/^  ae:	66 90                	xchg   %ax,%ax$/;"	l
ae	ls.asm	/^  ae:	68 c0 0d 00 00       	push   $0xdc0$/;"	l
ae	sh.asm	/^      ae:	e8 ad 0a 00 00       	call   b60 <strlen>$/;"	l
ae	test.asm	/^  ae:	75 d0                	jne    80 <main+0x80>$/;"	l
ae0	sh.asm	/^     ae0:	55                   	push   %ebp$/;"	l
ae0	usertests.asm	/^     ae0:	88 9c 18 00 86 00 00 	mov    %bl,0x8600(%eax,%ebx,1)$/;"	l
ae1	sh.asm	/^     ae1:	89 e5                	mov    %esp,%ebp$/;"	l
ae3	sh.asm	/^     ae3:	53                   	push   %ebx$/;"	l
ae4	sh.asm	/^     ae4:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ae7	sh.asm	/^     ae7:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
ae7	usertests.asm	/^     ae7:	83 c3 01             	add    $0x1,%ebx$/;"	l
aea	sh.asm	/^     aea:	89 c2                	mov    %eax,%edx$/;"	l
aea	usertests.asm	/^     aea:	39 d3                	cmp    %edx,%ebx$/;"	l
aec	sh.asm	/^     aec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
aec	usertests.asm	/^     aec:	75 f2                	jne    ae0 <pipe1+0xd0>$/;"	l
aee	usertests.asm	/^     aee:	83 ec 04             	sub    $0x4,%esp$/;"	l
af	usertests.asm	/^      af:	e8 3c 02 00 00       	call   2f0 <openiputtest>$/;"	l
af0	sh.asm	/^     af0:	83 c1 01             	add    $0x1,%ecx$/;"	l
af1	usertests.asm	/^     af1:	89 de                	mov    %ebx,%esi$/;"	l
af3	sh.asm	/^     af3:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx$/;"	l
af3	usertests.asm	/^     af3:	68 09 04 00 00       	push   $0x409$/;"	l
af7	sh.asm	/^     af7:	83 c2 01             	add    $0x1,%edx$/;"	l
af8	usertests.asm	/^     af8:	68 00 86 00 00       	push   $0x8600$/;"	l
afa	sh.asm	/^     afa:	84 db                	test   %bl,%bl$/;"	l
afc	sh.asm	/^     afc:	88 5a ff             	mov    %bl,-0x1(%edx)$/;"	l
afd	usertests.asm	/^     afd:	ff 75 e4             	pushl  -0x1c(%ebp)$/;"	l
aff	sh.asm	/^     aff:	75 ef                	jne    af0 <strcpy+0x10>$/;"	l
align	elf.h	/^  uint align;$/;"	m	struct:proghdr
align	fmt/elf.h	/^0932   uint align;$/;"	m	struct:proghdr
allocproc	fmt/proc.c	/^2505 allocproc(void)$/;"	f	file:
allocproc	proc.c	/^allocproc(void)$/;"	f	file:
allocuvm	fmt/vm.c	/^1927 allocuvm(pde_t *pgdir, uint oldsz, uint newsz)$/;"	f
allocuvm	vm.c	/^allocuvm(pde_t *pgdir, uint oldsz, uint newsz)$/;"	f
alltraps	kernel.asm	/^alltraps:$/;"	l
alltraps	trapasm.S	/^alltraps:$/;"	l
amt	usertests.asm	/^  amt = (BIG) - (uint)a;$/;"	d
ap	cat.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	echo.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	getnice.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	gettid.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	grep.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	halt.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	init.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	kill.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	ln.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	ls.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	mkdir.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	ps.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	rm.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	setnice.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	sh.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	stressfs.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	test.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	thread_create.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	thread_exit.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	thread_join.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	usertests.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	wc.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	zombie.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
apicid	fmt/mp.h	/^7630   uchar apicid;                 \/\/ local APIC id$/;"	m	struct:mpproc
apicid	fmt/proc.h	/^2302   uchar apicid;                \/\/ Local APIC ID$/;"	m	struct:cpu
apicid	kernel.asm	/^  apicid = lapicid();$/;"	d
apicid	mp.h	/^  uchar apicid;                 \/\/ local APIC id$/;"	m	struct:mpproc
apicid	proc.h	/^  uchar apicid;                \/\/ Local APIC ID$/;"	m	struct:cpu
apicno	fmt/mp.h	/^7641   uchar apicno;                 \/\/ I\/O APIC id$/;"	m	struct:mpioapic
apicno	mp.h	/^  uchar apicno;                 \/\/ I\/O APIC id$/;"	m	struct:mpioapic
argc	sh.asm	/^  argc = 0;$/;"	d
argfd	fmt/sysfile.c	/^6621 argfd(int n, int *pfd, struct file **pf)$/;"	f	file:
argfd	sysfile.c	/^argfd(int n, int *pfd, struct file **pf)$/;"	f	file:
argint	fmt/syscall.c	/^3952 argint(int n, int *ip)$/;"	f
argint	syscall.c	/^argint(int n, int *ip)$/;"	f
argp	kernel.asm	/^  argp = (uint*)(void*)(&fmt + 1);$/;"	d
argptest	usertests.c	/^void argptest()$/;"	f
argptr	fmt/syscall.c	/^3961 argptr(int n, char **pp, int size)$/;"	f
argptr	syscall.c	/^argptr(int n, char **pp, int size)$/;"	f
args	fmt/mmu.h	/^0858   uint args : 5;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:gatedesc
args	mmu.h	/^  uint args : 5;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:gatedesc
argstr	fmt/syscall.c	/^3983 argstr(int n, char **pp)$/;"	f
argstr	syscall.c	/^argstr(int n, char **pp)$/;"	f
argv	fmt/init.c	/^9057 char *argv[] = { "sh", 0 };$/;"	v
argv	fmt/sh.c	/^9121   char *argv[MAXARGS];$/;"	m	struct:execcmd	file:
argv	init.c	/^char *argv[] = { "sh", 0 };$/;"	v
argv	initcode.S	/^argv:$/;"	l
argv	sh.c	/^  char *argv[MAXARGS];$/;"	m	struct:execcmd	file:
atoi	ulib.c	/^atoi(const char *s)$/;"	f
avl	fmt/mmu.h	/^0734   uint avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:segdesc
avl	mmu.h	/^  uint avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:segdesc
b	cat.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	echo.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	forktest.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	getnice.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	gettid.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	grep.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	halt.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	init.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	kernel.asm	/^  b = bget(dev, blockno);$/;"	d
b	kill.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	ls.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	mkdir.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	ps.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	rm.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	setnice.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	sh.asm	/^       b:	89 e5                	mov    %esp,%ebp$/;"	l
b	test.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	thread_create.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	thread_exit.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	thread_join.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	usertests.asm	/^       b:	89 e5                	mov    %esp,%ebp$/;"	l
b	usertests.asm	/^    b = sbrk(1);$/;"	d
b	wc.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	zombie.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b0	cat.asm	/^  b0:	83 c4 10             	add    $0x10,%esp$/;"	l
b0	getnice.asm	/^  b0:	55                   	push   %ebp$/;"	l
b0	gettid.asm	/^  b0:	83 c2 01             	add    $0x1,%edx$/;"	l
b0	grep.asm	/^  b0:	55                   	push   %ebp$/;"	l
b0	halt.asm	/^  b0:	83 c2 01             	add    $0x1,%edx$/;"	l
b0	init.asm	/^  b0:	6a 01                	push   $0x1$/;"	l
b0	kill.asm	/^  b0:	83 c2 01             	add    $0x1,%edx$/;"	l
b0	ln.asm	/^  b0:	83 c2 01             	add    $0x1,%edx$/;"	l
b0	mkdir.asm	/^  b0:	55                   	push   %ebp$/;"	l
b0	ps.asm	/^  b0:	55                   	push   %ebp$/;"	l
b0	rm.asm	/^  b0:	55                   	push   %ebp$/;"	l
b0	setnice.asm	/^  b0:	31 c0                	xor    %eax,%eax$/;"	l
b0	stressfs.asm	/^  b0:	83 ec 04             	sub    $0x4,%esp$/;"	l
b0	test.asm	/^  b0:	83 ec 08             	sub    $0x8,%esp$/;"	l
b0	thread_create.asm	/^  b0:	55                   	push   %ebp$/;"	l
b0	thread_exit.asm	/^  b0:	83 c2 01             	add    $0x1,%edx$/;"	l
b0	thread_join.asm	/^  b0:	55                   	push   %ebp$/;"	l
b0	zombie.asm	/^  b0:	55                   	push   %ebp$/;"	l
b00	usertests.asm	/^     b00:	e8 bd 2d 00 00       	call   38c2 <write>$/;"	l
b01	sh.asm	/^     b01:	5b                   	pop    %ebx$/;"	l
b02	sh.asm	/^     b02:	5d                   	pop    %ebp$/;"	l
b03	sh.asm	/^     b03:	c3                   	ret    $/;"	l
b04	sh.asm	/^     b04:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
b05	usertests.asm	/^     b05:	83 c4 10             	add    $0x10,%esp$/;"	l
b08	usertests.asm	/^     b08:	3d 09 04 00 00       	cmp    $0x409,%eax$/;"	l
b0a	sh.asm	/^     b0a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi$/;"	l
b0d	usertests.asm	/^     b0d:	75 7b                	jne    b8a <pipe1+0x17a>$/;"	l
b0f	usertests.asm	/^     b0f:	81 fb 2d 14 00 00    	cmp    $0x142d,%ebx$/;"	l
b1	echo.asm	/^  b1:	84 c0                	test   %al,%al$/;"	l
b1	getnice.asm	/^  b1:	89 e5                	mov    %esp,%ebp$/;"	l
b1	grep.asm	/^  b1:	89 e5                	mov    %esp,%ebp$/;"	l
b1	mkdir.asm	/^  b1:	89 e5                	mov    %esp,%ebp$/;"	l
b1	ps.asm	/^  b1:	89 e5                	mov    %esp,%ebp$/;"	l
b1	rm.asm	/^  b1:	89 e5                	mov    %esp,%ebp$/;"	l
b1	thread_create.asm	/^  b1:	89 e5                	mov    %esp,%ebp$/;"	l
b1	thread_join.asm	/^  b1:	89 e5                	mov    %esp,%ebp$/;"	l
b1	zombie.asm	/^  b1:	89 e5                	mov    %esp,%ebp$/;"	l
b10	sh.asm	/^     b10:	55                   	push   %ebp$/;"	l
b11	sh.asm	/^     b11:	89 e5                	mov    %esp,%ebp$/;"	l
b13	sh.asm	/^     b13:	56                   	push   %esi$/;"	l
b14	sh.asm	/^     b14:	53                   	push   %ebx$/;"	l
b15	sh.asm	/^     b15:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
b15	usertests.asm	/^     b15:	75 ba                	jne    ad1 <pipe1+0xc1>$/;"	l
b17	usertests.asm	/^     b17:	e8 86 2d 00 00       	call   38a2 <exit>$/;"	l
b18	sh.asm	/^     b18:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
b1b	sh.asm	/^     b1b:	0f b6 02             	movzbl (%edx),%eax$/;"	l
b1c	usertests.asm	/^     b1c:	81 7d d4 2d 14 00 00 	cmpl   $0x142d,-0x2c(%ebp)$/;"	l
b1e	sh.asm	/^     b1e:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
b2	init.asm	/^  b2:	e8 59 04 00 00       	call   510 <printf>$/;"	l
b2	setnice.asm	/^  b2:	29 d8                	sub    %ebx,%eax$/;"	l
b21	sh.asm	/^     b21:	84 c0                	test   %al,%al$/;"	l
b23	sh.asm	/^     b23:	75 1e                	jne    b43 <strcmp+0x33>$/;"	l
b23	usertests.asm	/^     b23:	75 26                	jne    b4b <pipe1+0x13b>$/;"	l
b25	sh.asm	/^     b25:	eb 29                	jmp    b50 <strcmp+0x40>$/;"	l
b25	usertests.asm	/^     b25:	83 ec 0c             	sub    $0xc,%esp$/;"	l
b27	sh.asm	/^     b27:	89 f6                	mov    %esi,%esi$/;"	l
b28	usertests.asm	/^     b28:	ff 75 e0             	pushl  -0x20(%ebp)$/;"	l
b29	sh.asm	/^     b29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
b2b	usertests.asm	/^     b2b:	e8 9a 2d 00 00       	call   38ca <close>$/;"	l
b3	cat.asm	/^  b3:	39 c3                	cmp    %eax,%ebx$/;"	l
b3	echo.asm	/^  b3:	75 1e                	jne    d3 <strcmp+0x33>$/;"	l
b3	forktest.asm	/^  b3:	83 f8 ff             	cmp    $0xffffffff,%eax$/;"	l
b3	getnice.asm	/^  b3:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
b3	gettid.asm	/^  b3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)$/;"	l
b3	grep.asm	/^  b3:	57                   	push   %edi$/;"	l
b3	halt.asm	/^  b3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)$/;"	l
b3	kill.asm	/^  b3:	0f b6 02             	movzbl (%edx),%eax$/;"	l
b3	ln.asm	/^  b3:	0f b6 02             	movzbl (%edx),%eax$/;"	l
b3	ls.asm	/^  b3:	e8 98 04 00 00       	call   550 <memmove>$/;"	l
b3	mkdir.asm	/^  b3:	56                   	push   %esi$/;"	l
b3	ps.asm	/^  b3:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
b3	rm.asm	/^  b3:	56                   	push   %esi$/;"	l
b3	sh.asm	/^      b3:	c7 04 24 c3 18 00 00 	movl   $0x18c3,(%esp)$/;"	l
b3	stressfs.asm	/^  b3:	68 00 02 00 00       	push   $0x200$/;"	l
b3	test.asm	/^  b3:	68 12 0a 00 00       	push   $0xa12$/;"	l
b3	thread_create.asm	/^  b3:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
b3	thread_exit.asm	/^  b3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)$/;"	l
b3	thread_join.asm	/^  b3:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
b3	zombie.asm	/^  b3:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
b30	sh.asm	/^     b30:	83 c2 01             	add    $0x1,%edx$/;"	l
b30	usertests.asm	/^     b30:	e8 75 2d 00 00       	call   38aa <wait>$/;"	l
b33	sh.asm	/^     b33:	0f b6 02             	movzbl (%edx),%eax$/;"	l
b35	usertests.asm	/^     b35:	58                   	pop    %eax$/;"	l
b36	sh.asm	/^     b36:	8d 71 01             	lea    0x1(%ecx),%esi$/;"	l
b36	usertests.asm	/^     b36:	5a                   	pop    %edx$/;"	l
b37	usertests.asm	/^     b37:	68 fb 40 00 00       	push   $0x40fb$/;"	l
b39	sh.asm	/^     b39:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx$/;"	l
b3c	usertests.asm	/^     b3c:	6a 01                	push   $0x1$/;"	l
b3d	sh.asm	/^     b3d:	84 c0                	test   %al,%al$/;"	l
b3e	usertests.asm	/^     b3e:	e8 1d 2f 00 00       	call   3a60 <printf>$/;"	l
b3f	sh.asm	/^     b3f:	74 0f                	je     b50 <strcmp+0x40>$/;"	l
b4	grep.asm	/^  b4:	56                   	push   %esi$/;"	l
b4	mkdir.asm	/^  b4:	53                   	push   %ebx$/;"	l
b4	rm.asm	/^  b4:	53                   	push   %ebx$/;"	l
b4	setnice.asm	/^  b4:	5b                   	pop    %ebx$/;"	l
b4	usertests.asm	/^      b4:	e8 47 01 00 00       	call   200 <exitiputtest>$/;"	l
b4	wc.asm	/^  b4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)$/;"	l
b41	sh.asm	/^     b41:	89 f1                	mov    %esi,%ecx$/;"	l
b43	sh.asm	/^     b43:	38 d8                	cmp    %bl,%al$/;"	l
b43	usertests.asm	/^     b43:	83 c4 10             	add    $0x10,%esp$/;"	l
b45	sh.asm	/^     b45:	74 e9                	je     b30 <strcmp+0x20>$/;"	l
b46	usertests.asm	/^     b46:	e9 6e ff ff ff       	jmp    ab9 <pipe1+0xa9>$/;"	l
b47	sh.asm	/^     b47:	29 d8                	sub    %ebx,%eax$/;"	l
b49	sh.asm	/^     b49:	5b                   	pop    %ebx$/;"	l
b4a	sh.asm	/^     b4a:	5e                   	pop    %esi$/;"	l
b4b	sh.asm	/^     b4b:	5d                   	pop    %ebp$/;"	l
b4b	usertests.asm	/^     b4b:	83 ec 04             	sub    $0x4,%esp$/;"	l
b4c	sh.asm	/^     b4c:	c3                   	ret    $/;"	l
b4d	sh.asm	/^     b4d:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
b4e	usertests.asm	/^     b4e:	ff 75 d4             	pushl  -0x2c(%ebp)$/;"	l
b5	cat.asm	/^  b5:	75 26                	jne    dd <cat+0x4d>$/;"	l
b5	echo.asm	/^  b5:	eb 29                	jmp    e0 <strcmp+0x40>$/;"	l
b5	grep.asm	/^  b5:	53                   	push   %ebx$/;"	l
b5	mkdir.asm	/^  b5:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
b5	rm.asm	/^  b5:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
b5	setnice.asm	/^  b5:	5e                   	pop    %esi$/;"	l
b50	sh.asm	/^     b50:	31 c0                	xor    %eax,%eax$/;"	l
b51	usertests.asm	/^     b51:	68 e4 40 00 00       	push   $0x40e4$/;"	l
b52	sh.asm	/^     b52:	29 d8                	sub    %ebx,%eax$/;"	l
b54	sh.asm	/^     b54:	5b                   	pop    %ebx$/;"	l
b55	sh.asm	/^     b55:	5e                   	pop    %esi$/;"	l
b56	sh.asm	/^     b56:	5d                   	pop    %ebp$/;"	l
b56	usertests.asm	/^     b56:	6a 01                	push   $0x1$/;"	l
b57	sh.asm	/^     b57:	c3                   	ret    $/;"	l
b58	sh.asm	/^     b58:	90                   	nop$/;"	l
b58	usertests.asm	/^     b58:	e8 03 2f 00 00       	call   3a60 <printf>$/;"	l
b59	sh.asm	/^     b59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
b5d	usertests.asm	/^     b5d:	e8 40 2d 00 00       	call   38a2 <exit>$/;"	l
b6	forktest.asm	/^  b6:	75 71                	jne    129 <forktest+0xd9>$/;"	l
b6	getnice.asm	/^  b6:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
b6	grep.asm	/^  b6:	83 ec 0c             	sub    $0xc,%esp$/;"	l
b6	kill.asm	/^  b6:	8d 71 01             	lea    0x1(%ecx),%esi$/;"	l
b6	ln.asm	/^  b6:	8d 71 01             	lea    0x1(%ecx),%esi$/;"	l
b6	ps.asm	/^  b6:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
b6	setnice.asm	/^  b6:	5d                   	pop    %ebp$/;"	l
b6	thread_create.asm	/^  b6:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
b6	thread_join.asm	/^  b6:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
b6	zombie.asm	/^  b6:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
b60	sh.asm	/^     b60:	55                   	push   %ebp$/;"	l
b61	sh.asm	/^     b61:	89 e5                	mov    %esp,%ebp$/;"	l
b62	usertests.asm	/^     b62:	83 ec 08             	sub    $0x8,%esp$/;"	l
b63	sh.asm	/^     b63:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
b65	usertests.asm	/^     b65:	68 b9 40 00 00       	push   $0x40b9$/;"	l
b66	sh.asm	/^     b66:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
b69	sh.asm	/^     b69:	74 12                	je     b7d <strlen+0x1d>$/;"	l
b6a	usertests.asm	/^     b6a:	6a 01                	push   $0x1$/;"	l
b6b	sh.asm	/^     b6b:	31 d2                	xor    %edx,%edx$/;"	l
b6c	usertests.asm	/^     b6c:	e8 ef 2e 00 00       	call   3a60 <printf>$/;"	l
b6d	sh.asm	/^     b6d:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
b7	cat.asm	/^  b7:	83 ec 04             	sub    $0x4,%esp$/;"	l
b7	echo.asm	/^  b7:	89 f6                	mov    %esi,%esi$/;"	l
b7	gettid.asm	/^  b7:	89 d0                	mov    %edx,%eax$/;"	l
b7	halt.asm	/^  b7:	89 d0                	mov    %edx,%eax$/;"	l
b7	init.asm	/^  b7:	e8 96 02 00 00       	call   352 <exit>$/;"	l
b7	setnice.asm	/^  b7:	c3                   	ret    $/;"	l
b7	thread_exit.asm	/^  b7:	89 d0                	mov    %edx,%eax$/;"	l
b70	sh.asm	/^     b70:	83 c2 01             	add    $0x1,%edx$/;"	l
b71	usertests.asm	/^     b71:	e8 2c 2d 00 00       	call   38a2 <exit>$/;"	l
b73	sh.asm	/^     b73:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)$/;"	l
b76	usertests.asm	/^     b76:	83 ec 08             	sub    $0x8,%esp$/;"	l
b77	sh.asm	/^     b77:	89 d0                	mov    %edx,%eax$/;"	l
b79	sh.asm	/^     b79:	75 f5                	jne    b70 <strlen+0x10>$/;"	l
b79	usertests.asm	/^     b79:	68 05 41 00 00       	push   $0x4105$/;"	l
b7b	sh.asm	/^     b7b:	5d                   	pop    %ebp$/;"	l
b7c	sh.asm	/^     b7c:	c3                   	ret    $/;"	l
b7d	sh.asm	/^     b7d:	31 c0                	xor    %eax,%eax$/;"	l
b7e	usertests.asm	/^     b7e:	6a 01                	push   $0x1$/;"	l
b7f	sh.asm	/^     b7f:	5d                   	pop    %ebp$/;"	l
b8	forktest.asm	/^  b8:	83 ec 0c             	sub    $0xc,%esp$/;"	l
b8	ls.asm	/^  b8:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
b8	mkdir.asm	/^  b8:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
b8	rm.asm	/^  b8:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
b8	setnice.asm	/^  b8:	90                   	nop$/;"	l
b8	stressfs.asm	/^  b8:	56                   	push   %esi$/;"	l
b8	test.asm	/^  b8:	6a 01                	push   $0x1$/;"	l
b80	sh.asm	/^     b80:	c3                   	ret    $/;"	l
b80	usertests.asm	/^     b80:	e8 db 2e 00 00       	call   3a60 <printf>$/;"	l
b81	sh.asm	/^     b81:	eb 0d                	jmp    b90 <memset>$/;"	l
b83	sh.asm	/^     b83:	90                   	nop$/;"	l
b84	sh.asm	/^     b84:	90                   	nop$/;"	l
b85	sh.asm	/^     b85:	90                   	nop$/;"	l
b85	usertests.asm	/^     b85:	e8 18 2d 00 00       	call   38a2 <exit>$/;"	l
b86	sh.asm	/^     b86:	90                   	nop$/;"	l
b87	sh.asm	/^     b87:	90                   	nop$/;"	l
b88	sh.asm	/^     b88:	90                   	nop$/;"	l
b89	sh.asm	/^     b89:	90                   	nop$/;"	l
b8a	sh.asm	/^     b8a:	90                   	nop$/;"	l
b8a	usertests.asm	/^     b8a:	83 ec 08             	sub    $0x8,%esp$/;"	l
b8b	sh.asm	/^     b8b:	90                   	nop$/;"	l
b8c	sh.asm	/^     b8c:	90                   	nop$/;"	l
b8d	sh.asm	/^     b8d:	90                   	nop$/;"	l
b8d	usertests.asm	/^     b8d:	68 c8 40 00 00       	push   $0x40c8$/;"	l
b8e	sh.asm	/^     b8e:	90                   	nop$/;"	l
b8f	sh.asm	/^     b8f:	90                   	nop$/;"	l
b9	echo.asm	/^  b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
b9	getnice.asm	/^  b9:	74 12                	je     cd <strlen+0x1d>$/;"	l
b9	gettid.asm	/^  b9:	75 f5                	jne    b0 <strlen+0x10>$/;"	l
b9	grep.asm	/^  b9:	8b 75 08             	mov    0x8(%ebp),%esi$/;"	l
b9	halt.asm	/^  b9:	75 f5                	jne    b0 <strlen+0x10>$/;"	l
b9	kill.asm	/^  b9:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx$/;"	l
b9	ln.asm	/^  b9:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx$/;"	l
b9	ps.asm	/^  b9:	74 12                	je     cd <strlen+0x1d>$/;"	l
b9	setnice.asm	/^  b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
b9	stressfs.asm	/^  b9:	57                   	push   %edi$/;"	l
b9	thread_create.asm	/^  b9:	74 12                	je     cd <strlen+0x1d>$/;"	l
b9	thread_exit.asm	/^  b9:	75 f5                	jne    b0 <strlen+0x10>$/;"	l
b9	thread_join.asm	/^  b9:	74 12                	je     cd <strlen+0x1d>$/;"	l
b9	usertests.asm	/^      b9:	e8 62 00 00 00       	call   120 <iputtest>$/;"	l
b9	zombie.asm	/^  b9:	74 12                	je     cd <strlen+0x1d>$/;"	l
b90	sh.asm	/^     b90:	55                   	push   %ebp$/;"	l
b91	sh.asm	/^     b91:	89 e5                	mov    %esp,%ebp$/;"	l
b92	usertests.asm	/^     b92:	6a 01                	push   $0x1$/;"	l
b93	sh.asm	/^     b93:	57                   	push   %edi$/;"	l
b94	sh.asm	/^     b94:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
b94	usertests.asm	/^     b94:	e8 c7 2e 00 00       	call   3a60 <printf>$/;"	l
b97	sh.asm	/^     b97:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
b99	usertests.asm	/^     b99:	e8 04 2d 00 00       	call   38a2 <exit>$/;"	l
b9a	sh.asm	/^     b9a:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
b9d	sh.asm	/^     b9d:	89 d7                	mov    %edx,%edi$/;"	l
b9e	usertests.asm	/^     b9e:	66 90                	xchg   %ax,%ax$/;"	l
b9f	sh.asm	/^     b9f:	fc                   	cld    $/;"	l
ba	cat.asm	/^  ba:	68 00 02 00 00       	push   $0x200$/;"	l
ba	sh.asm	/^      ba:	c6 80 bf 18 00 00 00 	movb   $0x0,0x18bf(%eax)$/;"	l
ba	stressfs.asm	/^  ba:	e8 e3 02 00 00       	call   3a2 <write>$/;"	l
ba	test.asm	/^  ba:	e8 c1 05 00 00       	call   680 <printf>$/;"	l
ba0	sh.asm	/^     ba0:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
ba0	usertests.asm	/^     ba0:	55                   	push   %ebp$/;"	l
ba1	usertests.asm	/^     ba1:	89 e5                	mov    %esp,%ebp$/;"	l
ba2	sh.asm	/^     ba2:	89 d0                	mov    %edx,%eax$/;"	l
ba3	usertests.asm	/^     ba3:	57                   	push   %edi$/;"	l
ba4	sh.asm	/^     ba4:	5f                   	pop    %edi$/;"	l
ba4	usertests.asm	/^     ba4:	56                   	push   %esi$/;"	l
ba5	sh.asm	/^     ba5:	5d                   	pop    %ebp$/;"	l
ba5	usertests.asm	/^     ba5:	53                   	push   %ebx$/;"	l
ba6	sh.asm	/^     ba6:	c3                   	ret    $/;"	l
ba6	usertests.asm	/^     ba6:	83 ec 24             	sub    $0x24,%esp$/;"	l
ba7	sh.asm	/^     ba7:	89 f6                	mov    %esi,%esi$/;"	l
ba9	sh.asm	/^     ba9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
ba9	usertests.asm	/^     ba9:	68 14 41 00 00       	push   $0x4114$/;"	l
backcmd	fmt/sh.c	/^9146 struct backcmd {$/;"	s	file:
backcmd	fmt/sh.c	/^9364 backcmd(struct cmd *subcmd)$/;"	f
backcmd	sh.c	/^backcmd(struct cmd *subcmd)$/;"	f
backcmd	sh.c	/^struct backcmd {$/;"	s	file:
bad	kernel.asm	/^ bad:$/;"	l
bad	kernel.asm	/^bad:$/;"	l
bae	usertests.asm	/^     bae:	6a 01                	push   $0x1$/;"	l
balloc	fmt/fs.c	/^5566 balloc(uint dev)$/;"	f	file:
balloc	fs.c	/^balloc(uint dev)$/;"	f	file:
balloc	mkfs.c	/^balloc(int used)$/;"	f
base	umalloc.c	/^static Header base;$/;"	v	file:
base_15_0	fmt/mmu.h	/^0727   uint base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:segdesc
base_15_0	mmu.h	/^  uint base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:segdesc
base_23_16	fmt/mmu.h	/^0728   uint base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:segdesc
base_23_16	mmu.h	/^  uint base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:segdesc
base_31_24	fmt/mmu.h	/^0738   uint base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:segdesc
base_31_24	mmu.h	/^  uint base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:segdesc
bb	forktest.asm	/^  bb:	68 d6 04 00 00       	push   $0x4d6$/;"	l
bb	getnice.asm	/^  bb:	31 d2                	xor    %edx,%edx$/;"	l
bb	gettid.asm	/^  bb:	5d                   	pop    %ebp$/;"	l
bb	halt.asm	/^  bb:	5d                   	pop    %ebp$/;"	l
bb	ls.asm	/^  bb:	e8 00 03 00 00       	call   3c0 <strlen>$/;"	l
bb	mkdir.asm	/^  bb:	0f b6 02             	movzbl (%edx),%eax$/;"	l
bb	ps.asm	/^  bb:	31 d2                	xor    %edx,%edx$/;"	l
bb	rm.asm	/^  bb:	0f b6 02             	movzbl (%edx),%eax$/;"	l
bb	thread_create.asm	/^  bb:	31 d2                	xor    %edx,%edx$/;"	l
bb	thread_exit.asm	/^  bb:	5d                   	pop    %ebp$/;"	l
bb	thread_join.asm	/^  bb:	31 d2                	xor    %edx,%edx$/;"	l
bb	wc.asm	/^  bb:	90                   	nop$/;"	l
bb	zombie.asm	/^  bb:	31 d2                	xor    %edx,%edx$/;"	l
bb0	sh.asm	/^     bb0:	55                   	push   %ebp$/;"	l
bb0	usertests.asm	/^     bb0:	e8 ab 2e 00 00       	call   3a60 <printf>$/;"	l
bb1	sh.asm	/^     bb1:	89 e5                	mov    %esp,%ebp$/;"	l
bb3	sh.asm	/^     bb3:	53                   	push   %ebx$/;"	l
bb4	sh.asm	/^     bb4:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
bb5	usertests.asm	/^     bb5:	e8 e0 2c 00 00       	call   389a <fork>$/;"	l
bb7	sh.asm	/^     bb7:	8b 5d 0c             	mov    0xc(%ebp),%ebx$/;"	l
bba	sh.asm	/^     bba:	0f b6 10             	movzbl (%eax),%edx$/;"	l
bba	usertests.asm	/^     bba:	83 c4 10             	add    $0x10,%esp$/;"	l
bbd	sh.asm	/^     bbd:	84 d2                	test   %dl,%dl$/;"	l
bbd	usertests.asm	/^     bbd:	85 c0                	test   %eax,%eax$/;"	l
bbf	sh.asm	/^     bbf:	74 1d                	je     bde <strchr+0x2e>$/;"	l
bbf	usertests.asm	/^     bbf:	75 02                	jne    bc3 <preempt+0x23>$/;"	l
bc	gettid.asm	/^  bc:	c3                   	ret    $/;"	l
bc	grep.asm	/^  bc:	8b 7d 0c             	mov    0xc(%ebp),%edi$/;"	l
bc	halt.asm	/^  bc:	c3                   	ret    $/;"	l
bc	init.asm	/^  bc:	50                   	push   %eax$/;"	l
bc	thread_exit.asm	/^  bc:	c3                   	ret    $/;"	l
bc	wc.asm	/^  bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
bc1	sh.asm	/^     bc1:	38 d3                	cmp    %dl,%bl$/;"	l
bc1	usertests.asm	/^     bc1:	eb fe                	jmp    bc1 <preempt+0x21>$/;"	l
bc3	sh.asm	/^     bc3:	89 d9                	mov    %ebx,%ecx$/;"	l
bc3	usertests.asm	/^     bc3:	89 c7                	mov    %eax,%edi$/;"	l
bc5	sh.asm	/^     bc5:	75 0d                	jne    bd4 <strchr+0x24>$/;"	l
bc5	usertests.asm	/^     bc5:	e8 d0 2c 00 00       	call   389a <fork>$/;"	l
bc7	sh.asm	/^     bc7:	eb 17                	jmp    be0 <strchr+0x30>$/;"	l
bc9	sh.asm	/^     bc9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
bca	usertests.asm	/^     bca:	85 c0                	test   %eax,%eax$/;"	l
bcache	bio.c	/^} bcache;$/;"	v	typeref:struct:__anon12
bcache	fmt/bio.c	/^4985 } bcache;$/;"	v	typeref:struct:__anon4
bcc	usertests.asm	/^     bcc:	89 c6                	mov    %eax,%esi$/;"	l
bcd	kernel.asm	/^  bcd = (sb & (1 << 2)) == 0;$/;"	d
bce	usertests.asm	/^     bce:	75 02                	jne    bd2 <preempt+0x32>$/;"	l
bcmd	sh.asm	/^    bcmd = (struct backcmd*)cmd;$/;"	d
bd	getnice.asm	/^  bd:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
bd	gettid.asm	/^  bd:	31 c0                	xor    %eax,%eax$/;"	l
bd	halt.asm	/^  bd:	31 c0                	xor    %eax,%eax$/;"	l
bd	init.asm	/^  bd:	50                   	push   %eax$/;"	l
bd	kill.asm	/^  bd:	84 c0                	test   %al,%al$/;"	l
bd	ln.asm	/^  bd:	84 c0                	test   %al,%al$/;"	l
bd	ps.asm	/^  bd:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
bd	thread_create.asm	/^  bd:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
bd	thread_exit.asm	/^  bd:	31 c0                	xor    %eax,%eax$/;"	l
bd	thread_join.asm	/^  bd:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
bd	zombie.asm	/^  bd:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
bd0	sh.asm	/^     bd0:	38 ca                	cmp    %cl,%dl$/;"	l
bd0	usertests.asm	/^     bd0:	eb fe                	jmp    bd0 <preempt+0x30>$/;"	l
bd2	sh.asm	/^     bd2:	74 0c                	je     be0 <strchr+0x30>$/;"	l
bd2	usertests.asm	/^     bd2:	8d 45 e0             	lea    -0x20(%ebp),%eax$/;"	l
bd4	sh.asm	/^     bd4:	83 c0 01             	add    $0x1,%eax$/;"	l
bd5	usertests.asm	/^     bd5:	83 ec 0c             	sub    $0xc,%esp$/;"	l
bd7	sh.asm	/^     bd7:	0f b6 10             	movzbl (%eax),%edx$/;"	l
bd8	usertests.asm	/^     bd8:	50                   	push   %eax$/;"	l
bd9	usertests.asm	/^     bd9:	e8 d4 2c 00 00       	call   38b2 <pipe>$/;"	l
bda	kernel.asm	/^  bda = (uchar *) P2V(0x400);$/;"	d
bda	sh.asm	/^     bda:	84 d2                	test   %dl,%dl$/;"	l
bdc	sh.asm	/^     bdc:	75 f2                	jne    bd0 <strchr+0x20>$/;"	l
bde	sh.asm	/^     bde:	31 c0                	xor    %eax,%eax$/;"	l
bde	usertests.asm	/^     bde:	e8 b7 2c 00 00       	call   389a <fork>$/;"	l
be	init.asm	/^  be:	68 54 0b 00 00       	push   $0xb54$/;"	l
be	mkdir.asm	/^  be:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
be	rm.asm	/^  be:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
be	usertests.asm	/^      be:	e8 ad 0c 00 00       	call   d70 <mem>$/;"	l
be0	sh.asm	/^     be0:	5b                   	pop    %ebx$/;"	l
be1	sh.asm	/^     be1:	5d                   	pop    %ebp$/;"	l
be2	sh.asm	/^     be2:	c3                   	ret    $/;"	l
be3	sh.asm	/^     be3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
be3	usertests.asm	/^     be3:	83 c4 10             	add    $0x10,%esp$/;"	l
be6	usertests.asm	/^     be6:	85 c0                	test   %eax,%eax$/;"	l
be8	usertests.asm	/^     be8:	89 c3                	mov    %eax,%ebx$/;"	l
be9	sh.asm	/^     be9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
bea	usertests.asm	/^     bea:	75 47                	jne    c33 <preempt+0x93>$/;"	l
bec	usertests.asm	/^     bec:	83 ec 0c             	sub    $0xc,%esp$/;"	l
bef	usertests.asm	/^     bef:	ff 75 e0             	pushl  -0x20(%ebp)$/;"	l
begin_op	fmt/log.c	/^5378 begin_op(void)$/;"	f
begin_op	log.c	/^begin_op(void)$/;"	f
bf	cat.asm	/^  bf:	68 60 0b 00 00       	push   $0xb60$/;"	l
bf	gettid.asm	/^  bf:	5d                   	pop    %ebp$/;"	l
bf	grep.asm	/^  bf:	8b 5d 10             	mov    0x10(%ebp),%ebx$/;"	l
bf	halt.asm	/^  bf:	5d                   	pop    %ebp$/;"	l
bf	kill.asm	/^  bf:	74 0f                	je     d0 <strcmp+0x40>$/;"	l
bf	ln.asm	/^  bf:	74 0f                	je     d0 <strcmp+0x40>$/;"	l
bf	stressfs.asm	/^  bf:	83 c4 10             	add    $0x10,%esp$/;"	l
bf	test.asm	/^  bf:	83 c4 10             	add    $0x10,%esp$/;"	l
bf	thread_exit.asm	/^  bf:	5d                   	pop    %ebp$/;"	l
bf0	sh.asm	/^     bf0:	55                   	push   %ebp$/;"	l
bf1	sh.asm	/^     bf1:	89 e5                	mov    %esp,%ebp$/;"	l
bf2	usertests.asm	/^     bf2:	e8 d3 2c 00 00       	call   38ca <close>$/;"	l
bf3	sh.asm	/^     bf3:	57                   	push   %edi$/;"	l
bf4	sh.asm	/^     bf4:	56                   	push   %esi$/;"	l
bf5	sh.asm	/^     bf5:	53                   	push   %ebx$/;"	l
bf6	sh.asm	/^     bf6:	31 f6                	xor    %esi,%esi$/;"	l
bf7	usertests.asm	/^     bf7:	83 c4 0c             	add    $0xc,%esp$/;"	l
bf8	sh.asm	/^     bf8:	8d 7d e7             	lea    -0x19(%ebp),%edi$/;"	l
bfa	usertests.asm	/^     bfa:	6a 01                	push   $0x1$/;"	l
bfb	sh.asm	/^     bfb:	83 ec 1c             	sub    $0x1c,%esp$/;"	l
bfc	usertests.asm	/^     bfc:	68 d9 46 00 00       	push   $0x46d9$/;"	l
bfe	sh.asm	/^     bfe:	eb 29                	jmp    c29 <gets+0x39>$/;"	l
bfree	fmt/fs.c	/^5602 bfree(int dev, uint b)$/;"	f	file:
bfree	fs.c	/^bfree(int dev, uint b)$/;"	f	file:
bget	bio.c	/^bget(uint dev, uint blockno)$/;"	f	file:
bget	fmt/bio.c	/^5016 bget(uint dev, uint blockno)$/;"	f	file:
bi	kernel.asm	/^  bi = b % BPB;$/;"	d
bigargtest	usertests.c	/^bigargtest(void)$/;"	f
bigdir	usertests.c	/^bigdir(void)$/;"	f
bigfile	usertests.c	/^bigfile(void)$/;"	f
bigwrite	usertests.c	/^bigwrite(void)$/;"	f
binit	bio.c	/^binit(void)$/;"	f
binit	fmt/bio.c	/^4988 binit(void)$/;"	f
block	fmt/log.c	/^5285   int block[LOGSIZE];$/;"	m	struct:logheader	file:
block	log.c	/^  int block[LOGSIZE];$/;"	m	struct:logheader	file:
blockno	buf.h	/^  uint blockno;$/;"	m	struct:buf
blockno	fmt/buf.h	/^4403   uint blockno;$/;"	m	struct:buf
bmap	fmt/fs.c	/^5960 bmap(struct inode *ip, uint bn)$/;"	f	file:
bmap	fs.c	/^bmap(struct inode *ip, uint bn)$/;"	f	file:
bmapstart	fmt/fs.h	/^4620   uint bmapstart;    \/\/ Block number of first free map block$/;"	m	struct:superblock
bmapstart	fs.h	/^  uint bmapstart;    \/\/ Block number of first free map block$/;"	m	struct:superblock
bootmain	bootmain.c	/^bootmain(void)$/;"	f
bootmain	fmt/bootmain.c	/^9767 bootmain(void)$/;"	f
bp	cat.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	echo.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	getnice.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	gettid.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	grep.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	halt.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	init.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	kernel.asm	/^    bp = bread(dev, BBLOCK(b, sb));$/;"	d
bp	kernel.asm	/^    bp = bread(dev, IBLOCK(inum, sb));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, IBLOCK(ip->inum, sb));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, addr);$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, bmap(ip, off\/BSIZE));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, ip->addrs[NDIRECT]);$/;"	d
bp	kernel.asm	/^  bp = 0;$/;"	d
bp	kernel.asm	/^  bp = bread(dev, 1);$/;"	d
bp	kernel.asm	/^  bp = bread(dev, BBLOCK(b, sb));$/;"	d
bp	kernel.asm	/^  bp = bread(dev, bno);$/;"	d
bp	kernel.asm	/^  bp = bread(ip->dev, IBLOCK(ip->inum, sb));$/;"	d
bp	kill.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	ln.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	ls.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	mkdir.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	ps.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	rm.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	setnice.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	sh.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	stressfs.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	test.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	thread_create.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	thread_exit.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	thread_join.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	usertests.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	wc.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	zombie.asm	/^  bp = (Header*)ap - 1;$/;"	d
bread	bio.c	/^bread(uint dev, uint blockno)$/;"	f
bread	fmt/bio.c	/^5052 bread(uint dev, uint blockno)$/;"	f
brelse	bio.c	/^brelse(struct buf *b)$/;"	f
brelse	fmt/bio.c	/^5076 brelse(struct buf *b)$/;"	f
bsstest	usertests.c	/^bsstest(void)$/;"	f
buf	bio.c	/^  struct buf buf[NBUF];$/;"	m	struct:__anon12	typeref:struct:__anon12::buf	file:
buf	buf.h	/^struct buf {$/;"	s
buf	cat.c	/^char buf[512];$/;"	v
buf	console.c	/^  char buf[INPUT_BUF];$/;"	m	struct:__anon14	file:
buf	fmt/bio.c	/^4980   struct buf buf[NBUF];$/;"	m	struct:__anon4	typeref:struct:__anon4::buf	file:
buf	fmt/buf.h	/^4400 struct buf {$/;"	s
buf	fmt/console.c	/^8718   char buf[INPUT_BUF];$/;"	m	struct:__anon6	file:
buf	grep.c	/^char buf[1024];$/;"	v
buf	kernel.asm	/^  buf = (char*)p;$/;"	d
buf	usertests.c	/^char buf[8192];$/;"	v
buf	wc.c	/^char buf[512];$/;"	v
buffer	test.c	/^int buffer[10];$/;"	v
bwrite	bio.c	/^bwrite(struct buf *b)$/;"	f
bwrite	fmt/bio.c	/^5065 bwrite(struct buf *b)$/;"	f
bzero	fmt/fs.c	/^5552 bzero(int dev, int bno)$/;"	f	file:
bzero	fs.c	/^bzero(int dev, int bno)$/;"	f	file:
c	cat.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	echo.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	getnice.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	gettid.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	grep.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	halt.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	init.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	initcode.asm	/^   c:	b8 07 00 00 00       	mov    $0x7,%eax$/;"	l
c	kernel.asm	/^        c = (c == '\\r') ? '\\n' : c;$/;"	d
c	kernel.asm	/^    c = fmt[++i] & 0xff;$/;"	d
c	kernel.asm	/^    c = input.buf[input.r++ % INPUT_BUF];$/;"	d
c	kernel.asm	/^  c = &cpus[cpuid()];$/;"	d
c	kernel.asm	/^  c = charcode[shift & (CTL | SHIFT)][data];$/;"	d
c	kernel.asm	/^  c = mycpu();$/;"	d
c	kill.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	ln.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	ls.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	mkdir.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	ps.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	rm.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	setnice.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	sh.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	stressfs.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	stressfs.asm	/^   c:	ff 71 fc             	pushl  -0x4(%ecx)$/;"	l
c	test.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	test.c	/^struct cond_t c;$/;"	v	typeref:struct:cond_t
c	thread_create.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	thread_exit.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	thread_join.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	usertests.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	usertests.asm	/^  c = sbrk(-(sbrk(0) - oldbrk));$/;"	d
c	usertests.asm	/^  c = sbrk(-4096);$/;"	d
c	usertests.asm	/^  c = sbrk(0);$/;"	d
c	usertests.asm	/^  c = sbrk(1);$/;"	d
c	usertests.asm	/^  c = sbrk(4096);$/;"	d
c	wc.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	zombie.asm	/^    c = fmt[i] & 0xff;$/;"	d
c0	echo.asm	/^  c0:	83 c2 01             	add    $0x1,%edx$/;"	l
c0	forktest.asm	/^  c0:	e8 0b 01 00 00       	call   1d0 <strlen>$/;"	l
c0	getnice.asm	/^  c0:	83 c2 01             	add    $0x1,%edx$/;"	l
c0	gettid.asm	/^  c0:	c3                   	ret    $/;"	l
c0	halt.asm	/^  c0:	c3                   	ret    $/;"	l
c0	ls.asm	/^  c0:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
c0	ps.asm	/^  c0:	83 c2 01             	add    $0x1,%edx$/;"	l
c0	setnice.asm	/^  c0:	55                   	push   %ebp$/;"	l
c0	thread_create.asm	/^  c0:	83 c2 01             	add    $0x1,%edx$/;"	l
c0	thread_exit.asm	/^  c0:	c3                   	ret    $/;"	l
c0	thread_join.asm	/^  c0:	83 c2 01             	add    $0x1,%edx$/;"	l
c0	wc.asm	/^  c0:	83 ec 04             	sub    $0x4,%esp$/;"	l
c0	zombie.asm	/^  c0:	83 c2 01             	add    $0x1,%edx$/;"	l
c00	sh.asm	/^     c00:	83 ec 04             	sub    $0x4,%esp$/;"	l
c01	usertests.asm	/^     c01:	ff 75 e4             	pushl  -0x1c(%ebp)$/;"	l
c03	sh.asm	/^     c03:	6a 01                	push   $0x1$/;"	l
c04	usertests.asm	/^     c04:	e8 b9 2c 00 00       	call   38c2 <write>$/;"	l
c05	sh.asm	/^     c05:	57                   	push   %edi$/;"	l
c06	sh.asm	/^     c06:	6a 00                	push   $0x0$/;"	l
c08	sh.asm	/^     c08:	e8 2d 01 00 00       	call   d3a <read>$/;"	l
c09	usertests.asm	/^     c09:	83 c4 10             	add    $0x10,%esp$/;"	l
c0c	usertests.asm	/^     c0c:	83 f8 01             	cmp    $0x1,%eax$/;"	l
c0d	sh.asm	/^     c0d:	83 c4 10             	add    $0x10,%esp$/;"	l
c0f	usertests.asm	/^     c0f:	74 12                	je     c23 <preempt+0x83>$/;"	l
c1	gettid.asm	/^  c1:	eb 0d                	jmp    d0 <memset>$/;"	l
c1	halt.asm	/^  c1:	eb 0d                	jmp    d0 <memset>$/;"	l
c1	kill.asm	/^  c1:	89 f1                	mov    %esi,%ecx$/;"	l
c1	ln.asm	/^  c1:	89 f1                	mov    %esi,%ecx$/;"	l
c1	mkdir.asm	/^  c1:	84 c0                	test   %al,%al$/;"	l
c1	rm.asm	/^  c1:	84 c0                	test   %al,%al$/;"	l
c1	setnice.asm	/^  c1:	89 e5                	mov    %esp,%ebp$/;"	l
c1	sh.asm	/^      c1:	e8 cc 0c 00 00       	call   d92 <chdir>$/;"	l
c1	thread_exit.asm	/^  c1:	eb 0d                	jmp    d0 <memset>$/;"	l
c10	sh.asm	/^     c10:	85 c0                	test   %eax,%eax$/;"	l
c11	usertests.asm	/^     c11:	83 ec 08             	sub    $0x8,%esp$/;"	l
c12	sh.asm	/^     c12:	7e 1d                	jle    c31 <gets+0x41>$/;"	l
c14	sh.asm	/^     c14:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax$/;"	l
c14	usertests.asm	/^     c14:	68 1e 41 00 00       	push   $0x411e$/;"	l
c18	sh.asm	/^     c18:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
c19	usertests.asm	/^     c19:	6a 01                	push   $0x1$/;"	l
c1b	sh.asm	/^     c1b:	89 de                	mov    %ebx,%esi$/;"	l
c1b	usertests.asm	/^     c1b:	e8 40 2e 00 00       	call   3a60 <printf>$/;"	l
c1d	sh.asm	/^     c1d:	3c 0a                	cmp    $0xa,%al$/;"	l
c1f	sh.asm	/^     c1f:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)$/;"	l
c2	grep.asm	/^  c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
c2	stressfs.asm	/^  c2:	83 eb 01             	sub    $0x1,%ebx$/;"	l
c2	test.asm	/^  c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
c20	usertests.asm	/^     c20:	83 c4 10             	add    $0x10,%esp$/;"	l
c23	sh.asm	/^     c23:	74 1b                	je     c40 <gets+0x50>$/;"	l
c23	usertests.asm	/^     c23:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c25	sh.asm	/^     c25:	3c 0d                	cmp    $0xd,%al$/;"	l
c26	usertests.asm	/^     c26:	ff 75 e4             	pushl  -0x1c(%ebp)$/;"	l
c27	sh.asm	/^     c27:	74 17                	je     c40 <gets+0x50>$/;"	l
c29	sh.asm	/^     c29:	8d 5e 01             	lea    0x1(%esi),%ebx$/;"	l
c29	usertests.asm	/^     c29:	e8 9c 2c 00 00       	call   38ca <close>$/;"	l
c2c	sh.asm	/^     c2c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx$/;"	l
c2e	usertests.asm	/^     c2e:	83 c4 10             	add    $0x10,%esp$/;"	l
c2f	sh.asm	/^     c2f:	7c cf                	jl     c00 <gets+0x10>$/;"	l
c3	echo.asm	/^  c3:	0f b6 02             	movzbl (%edx),%eax$/;"	l
c3	getnice.asm	/^  c3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)$/;"	l
c3	gettid.asm	/^  c3:	90                   	nop$/;"	l
c3	halt.asm	/^  c3:	90                   	nop$/;"	l
c3	init.asm	/^  c3:	68 8c 08 00 00       	push   $0x88c$/;"	l
c3	kill.asm	/^  c3:	38 d8                	cmp    %bl,%al$/;"	l
c3	ln.asm	/^  c3:	38 d8                	cmp    %bl,%al$/;"	l
c3	ls.asm	/^  c3:	89 c6                	mov    %eax,%esi$/;"	l
c3	mkdir.asm	/^  c3:	75 1e                	jne    e3 <strcmp+0x33>$/;"	l
c3	ps.asm	/^  c3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)$/;"	l
c3	rm.asm	/^  c3:	75 1e                	jne    e3 <strcmp+0x33>$/;"	l
c3	setnice.asm	/^  c3:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
c3	thread_create.asm	/^  c3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)$/;"	l
c3	thread_exit.asm	/^  c3:	90                   	nop$/;"	l
c3	thread_join.asm	/^  c3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)$/;"	l
c3	usertests.asm	/^      c3:	e8 48 09 00 00       	call   a10 <pipe1>$/;"	l
c3	wc.asm	/^  c3:	68 00 02 00 00       	push   $0x200$/;"	l
c3	zombie.asm	/^  c3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)$/;"	l
c31	sh.asm	/^     c31:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c31	usertests.asm	/^     c31:	eb fe                	jmp    c31 <preempt+0x91>$/;"	l
c33	usertests.asm	/^     c33:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c34	sh.asm	/^     c34:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)$/;"	l
c36	usertests.asm	/^     c36:	ff 75 e4             	pushl  -0x1c(%ebp)$/;"	l
c38	sh.asm	/^     c38:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
c39	usertests.asm	/^     c39:	e8 8c 2c 00 00       	call   38ca <close>$/;"	l
c3b	sh.asm	/^     c3b:	5b                   	pop    %ebx$/;"	l
c3c	sh.asm	/^     c3c:	5e                   	pop    %esi$/;"	l
c3d	sh.asm	/^     c3d:	5f                   	pop    %edi$/;"	l
c3e	sh.asm	/^     c3e:	5d                   	pop    %ebp$/;"	l
c3e	usertests.asm	/^     c3e:	83 c4 0c             	add    $0xc,%esp$/;"	l
c3f	sh.asm	/^     c3f:	c3                   	ret    $/;"	l
c4	cat.asm	/^  c4:	56                   	push   %esi$/;"	l
c4	gettid.asm	/^  c4:	90                   	nop$/;"	l
c4	halt.asm	/^  c4:	90                   	nop$/;"	l
c4	thread_exit.asm	/^  c4:	90                   	nop$/;"	l
c40	sh.asm	/^     c40:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c41	usertests.asm	/^     c41:	68 00 20 00 00       	push   $0x2000$/;"	l
c43	sh.asm	/^     c43:	89 de                	mov    %ebx,%esi$/;"	l
c45	sh.asm	/^     c45:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)$/;"	l
c46	usertests.asm	/^     c46:	68 00 86 00 00       	push   $0x8600$/;"	l
c49	sh.asm	/^     c49:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
c4b	usertests.asm	/^     c4b:	ff 75 e0             	pushl  -0x20(%ebp)$/;"	l
c4c	sh.asm	/^     c4c:	5b                   	pop    %ebx$/;"	l
c4d	sh.asm	/^     c4d:	5e                   	pop    %esi$/;"	l
c4e	sh.asm	/^     c4e:	5f                   	pop    %edi$/;"	l
c4e	usertests.asm	/^     c4e:	e8 67 2c 00 00       	call   38ba <read>$/;"	l
c4f	sh.asm	/^     c4f:	5d                   	pop    %ebp$/;"	l
c5	cat.asm	/^  c5:	e8 a0 02 00 00       	call   36a <read>$/;"	l
c5	forktest.asm	/^  c5:	83 c4 0c             	add    $0xc,%esp$/;"	l
c5	gettid.asm	/^  c5:	90                   	nop$/;"	l
c5	halt.asm	/^  c5:	90                   	nop$/;"	l
c5	kill.asm	/^  c5:	74 e9                	je     b0 <strcmp+0x20>$/;"	l
c5	ln.asm	/^  c5:	74 e9                	je     b0 <strcmp+0x20>$/;"	l
c5	ls.asm	/^  c5:	bb c0 0d 00 00       	mov    $0xdc0,%ebx$/;"	l
c5	mkdir.asm	/^  c5:	eb 29                	jmp    f0 <strcmp+0x40>$/;"	l
c5	rm.asm	/^  c5:	eb 29                	jmp    f0 <strcmp+0x40>$/;"	l
c5	stressfs.asm	/^  c5:	75 e9                	jne    b0 <main+0xb0>$/;"	l
c5	thread_exit.asm	/^  c5:	90                   	nop$/;"	l
c50	sh.asm	/^     c50:	c3                   	ret    $/;"	l
c51	sh.asm	/^     c51:	eb 0d                	jmp    c60 <stat>$/;"	l
c53	sh.asm	/^     c53:	90                   	nop$/;"	l
c53	usertests.asm	/^     c53:	83 c4 10             	add    $0x10,%esp$/;"	l
c54	sh.asm	/^     c54:	90                   	nop$/;"	l
c55	sh.asm	/^     c55:	90                   	nop$/;"	l
c56	sh.asm	/^     c56:	90                   	nop$/;"	l
c56	usertests.asm	/^     c56:	83 f8 01             	cmp    $0x1,%eax$/;"	l
c57	sh.asm	/^     c57:	90                   	nop$/;"	l
c58	sh.asm	/^     c58:	90                   	nop$/;"	l
c59	sh.asm	/^     c59:	90                   	nop$/;"	l
c59	usertests.asm	/^     c59:	74 1a                	je     c75 <preempt+0xd5>$/;"	l
c5a	sh.asm	/^     c5a:	90                   	nop$/;"	l
c5b	sh.asm	/^     c5b:	90                   	nop$/;"	l
c5b	usertests.asm	/^     c5b:	83 ec 08             	sub    $0x8,%esp$/;"	l
c5c	sh.asm	/^     c5c:	90                   	nop$/;"	l
c5d	sh.asm	/^     c5d:	90                   	nop$/;"	l
c5e	sh.asm	/^     c5e:	90                   	nop$/;"	l
c5e	usertests.asm	/^     c5e:	68 32 41 00 00       	push   $0x4132$/;"	l
c5f	sh.asm	/^     c5f:	90                   	nop$/;"	l
c6	echo.asm	/^  c6:	8d 71 01             	lea    0x1(%ecx),%esi$/;"	l
c6	gettid.asm	/^  c6:	90                   	nop$/;"	l
c6	halt.asm	/^  c6:	90                   	nop$/;"	l
c6	setnice.asm	/^  c6:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
c6	sh.asm	/^      c6:	83 c4 10             	add    $0x10,%esp$/;"	l
c6	thread_exit.asm	/^  c6:	90                   	nop$/;"	l
c60	sh.asm	/^     c60:	55                   	push   %ebp$/;"	l
c61	sh.asm	/^     c61:	89 e5                	mov    %esp,%ebp$/;"	l
c63	sh.asm	/^     c63:	56                   	push   %esi$/;"	l
c63	usertests.asm	/^     c63:	6a 01                	push   $0x1$/;"	l
c64	sh.asm	/^     c64:	53                   	push   %ebx$/;"	l
c65	sh.asm	/^     c65:	83 ec 08             	sub    $0x8,%esp$/;"	l
c65	usertests.asm	/^     c65:	e8 f6 2d 00 00       	call   3a60 <printf>$/;"	l
c68	sh.asm	/^     c68:	6a 00                	push   $0x0$/;"	l
c6a	sh.asm	/^     c6a:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
c6a	usertests.asm	/^     c6a:	83 c4 10             	add    $0x10,%esp$/;"	l
c6d	sh.asm	/^     c6d:	e8 f0 00 00 00       	call   d62 <open>$/;"	l
c6d	usertests.asm	/^     c6d:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
c7	getnice.asm	/^  c7:	89 d0                	mov    %edx,%eax$/;"	l
c7	gettid.asm	/^  c7:	90                   	nop$/;"	l
c7	halt.asm	/^  c7:	90                   	nop$/;"	l
c7	kill.asm	/^  c7:	29 d8                	sub    %ebx,%eax$/;"	l
c7	ln.asm	/^  c7:	29 d8                	sub    %ebx,%eax$/;"	l
c7	mkdir.asm	/^  c7:	89 f6                	mov    %esi,%esi$/;"	l
c7	ps.asm	/^  c7:	89 d0                	mov    %edx,%eax$/;"	l
c7	rm.asm	/^  c7:	89 f6                	mov    %esi,%esi$/;"	l
c7	stressfs.asm	/^  c7:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c7	thread_create.asm	/^  c7:	89 d0                	mov    %edx,%eax$/;"	l
c7	thread_exit.asm	/^  c7:	90                   	nop$/;"	l
c7	thread_join.asm	/^  c7:	89 d0                	mov    %edx,%eax$/;"	l
c7	zombie.asm	/^  c7:	89 d0                	mov    %edx,%eax$/;"	l
c70	usertests.asm	/^     c70:	5b                   	pop    %ebx$/;"	l
c71	usertests.asm	/^     c71:	5e                   	pop    %esi$/;"	l
c72	sh.asm	/^     c72:	83 c4 10             	add    $0x10,%esp$/;"	l
c72	usertests.asm	/^     c72:	5f                   	pop    %edi$/;"	l
c73	usertests.asm	/^     c73:	5d                   	pop    %ebp$/;"	l
c74	usertests.asm	/^     c74:	c3                   	ret    $/;"	l
c75	sh.asm	/^     c75:	85 c0                	test   %eax,%eax$/;"	l
c75	usertests.asm	/^     c75:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c77	sh.asm	/^     c77:	78 27                	js     ca0 <stat+0x40>$/;"	l
c78	usertests.asm	/^     c78:	ff 75 e0             	pushl  -0x20(%ebp)$/;"	l
c79	sh.asm	/^     c79:	83 ec 08             	sub    $0x8,%esp$/;"	l
c7b	usertests.asm	/^     c7b:	e8 4a 2c 00 00       	call   38ca <close>$/;"	l
c7c	sh.asm	/^     c7c:	ff 75 0c             	pushl  0xc(%ebp)$/;"	l
c7f	sh.asm	/^     c7f:	89 c3                	mov    %eax,%ebx$/;"	l
c8	forktest.asm	/^  c8:	50                   	push   %eax$/;"	l
c8	gettid.asm	/^  c8:	90                   	nop$/;"	l
c8	grep.asm	/^  c8:	83 ec 08             	sub    $0x8,%esp$/;"	l
c8	halt.asm	/^  c8:	90                   	nop$/;"	l
c8	init.asm	/^  c8:	e8 bd 02 00 00       	call   38a <exec>$/;"	l
c8	test.asm	/^  c8:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c8	thread_exit.asm	/^  c8:	90                   	nop$/;"	l
c8	usertests.asm	/^      c8:	e8 d3 0a 00 00       	call   ba0 <preempt>$/;"	l
c8	wc.asm	/^  c8:	68 e0 0b 00 00       	push   $0xbe0$/;"	l
c80	usertests.asm	/^     c80:	58                   	pop    %eax$/;"	l
c81	sh.asm	/^     c81:	50                   	push   %eax$/;"	l
c81	usertests.asm	/^     c81:	5a                   	pop    %edx$/;"	l
c82	sh.asm	/^     c82:	e8 f3 00 00 00       	call   d7a <fstat>$/;"	l
c82	usertests.asm	/^     c82:	68 45 41 00 00       	push   $0x4145$/;"	l
c87	sh.asm	/^     c87:	89 c6                	mov    %eax,%esi$/;"	l
c87	usertests.asm	/^     c87:	6a 01                	push   $0x1$/;"	l
c89	sh.asm	/^     c89:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
c89	usertests.asm	/^     c89:	e8 d2 2d 00 00       	call   3a60 <printf>$/;"	l
c8c	sh.asm	/^     c8c:	e8 b9 00 00 00       	call   d4a <close>$/;"	l
c8e	usertests.asm	/^     c8e:	89 3c 24             	mov    %edi,(%esp)$/;"	l
c9	echo.asm	/^  c9:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx$/;"	l
c9	forktest.asm	/^  c9:	68 d6 04 00 00       	push   $0x4d6$/;"	l
c9	getnice.asm	/^  c9:	75 f5                	jne    c0 <strlen+0x10>$/;"	l
c9	gettid.asm	/^  c9:	90                   	nop$/;"	l
c9	halt.asm	/^  c9:	90                   	nop$/;"	l
c9	kill.asm	/^  c9:	5b                   	pop    %ebx$/;"	l
c9	ln.asm	/^  c9:	5b                   	pop    %ebx$/;"	l
c9	mkdir.asm	/^  c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
c9	ps.asm	/^  c9:	75 f5                	jne    c0 <strlen+0x10>$/;"	l
c9	rm.asm	/^  c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
c9	setnice.asm	/^  c9:	74 12                	je     dd <strlen+0x1d>$/;"	l
c9	sh.asm	/^      c9:	85 c0                	test   %eax,%eax$/;"	l
c9	thread_create.asm	/^  c9:	75 f5                	jne    c0 <strlen+0x10>$/;"	l
c9	thread_exit.asm	/^  c9:	90                   	nop$/;"	l
c9	thread_join.asm	/^  c9:	75 f5                	jne    c0 <strlen+0x10>$/;"	l
c9	zombie.asm	/^  c9:	75 f5                	jne    c0 <strlen+0x10>$/;"	l
c91	sh.asm	/^     c91:	83 c4 10             	add    $0x10,%esp$/;"	l
c91	usertests.asm	/^     c91:	e8 3c 2c 00 00       	call   38d2 <kill>$/;"	l
c94	sh.asm	/^     c94:	89 f0                	mov    %esi,%eax$/;"	l
c96	sh.asm	/^     c96:	8d 65 f8             	lea    -0x8(%ebp),%esp$/;"	l
c96	usertests.asm	/^     c96:	89 34 24             	mov    %esi,(%esp)$/;"	l
c99	sh.asm	/^     c99:	5b                   	pop    %ebx$/;"	l
c99	usertests.asm	/^     c99:	e8 34 2c 00 00       	call   38d2 <kill>$/;"	l
c9a	sh.asm	/^     c9a:	5e                   	pop    %esi$/;"	l
c9b	sh.asm	/^     c9b:	5d                   	pop    %ebp$/;"	l
c9c	sh.asm	/^     c9c:	c3                   	ret    $/;"	l
c9d	sh.asm	/^     c9d:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
c9e	usertests.asm	/^     c9e:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
ca	cat.asm	/^  ca:	83 c4 10             	add    $0x10,%esp$/;"	l
ca	gettid.asm	/^  ca:	90                   	nop$/;"	l
ca	halt.asm	/^  ca:	90                   	nop$/;"	l
ca	kill.asm	/^  ca:	5e                   	pop    %esi$/;"	l
ca	ln.asm	/^  ca:	5e                   	pop    %esi$/;"	l
ca	ls.asm	/^  ca:	e8 f1 02 00 00       	call   3c0 <strlen>$/;"	l
ca	stressfs.asm	/^  ca:	57                   	push   %edi$/;"	l
ca	thread_exit.asm	/^  ca:	90                   	nop$/;"	l
ca0	sh.asm	/^     ca0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ca1	usertests.asm	/^     ca1:	e8 2c 2c 00 00       	call   38d2 <kill>$/;"	l
ca5	sh.asm	/^     ca5:	eb ef                	jmp    c96 <stat+0x36>$/;"	l
ca6	usertests.asm	/^     ca6:	59                   	pop    %ecx$/;"	l
ca7	sh.asm	/^     ca7:	89 f6                	mov    %esi,%esi$/;"	l
ca7	usertests.asm	/^     ca7:	5b                   	pop    %ebx$/;"	l
ca8	usertests.asm	/^     ca8:	68 4e 41 00 00       	push   $0x414e$/;"	l
ca9	sh.asm	/^     ca9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
cad	usertests.asm	/^     cad:	6a 01                	push   $0x1$/;"	l
caf	usertests.asm	/^     caf:	e8 ac 2d 00 00       	call   3a60 <printf>$/;"	l
cat	cat.c	/^cat(int fd)$/;"	f
cb	getnice.asm	/^  cb:	5d                   	pop    %ebp$/;"	l
cb	gettid.asm	/^  cb:	90                   	nop$/;"	l
cb	grep.asm	/^  cb:	53                   	push   %ebx$/;"	l
cb	halt.asm	/^  cb:	90                   	nop$/;"	l
cb	kill.asm	/^  cb:	5d                   	pop    %ebp$/;"	l
cb	ln.asm	/^  cb:	5d                   	pop    %ebp$/;"	l
cb	ps.asm	/^  cb:	5d                   	pop    %ebp$/;"	l
cb	setnice.asm	/^  cb:	31 d2                	xor    %edx,%edx$/;"	l
cb	sh.asm	/^      cb:	79 9a                	jns    67 <main+0x67>$/;"	l
cb	stressfs.asm	/^  cb:	e8 da 02 00 00       	call   3aa <close>$/;"	l
cb	test.asm	/^  cb:	68 80 0e 00 00       	push   $0xe80$/;"	l
cb	thread_create.asm	/^  cb:	5d                   	pop    %ebp$/;"	l
cb	thread_exit.asm	/^  cb:	90                   	nop$/;"	l
cb	thread_join.asm	/^  cb:	5d                   	pop    %ebp$/;"	l
cb	zombie.asm	/^  cb:	5d                   	pop    %ebp$/;"	l
cb0	sh.asm	/^     cb0:	55                   	push   %ebp$/;"	l
cb1	sh.asm	/^     cb1:	89 e5                	mov    %esp,%ebp$/;"	l
cb3	sh.asm	/^     cb3:	53                   	push   %ebx$/;"	l
cb4	sh.asm	/^     cb4:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
cb4	usertests.asm	/^     cb4:	e8 f1 2b 00 00       	call   38aa <wait>$/;"	l
cb7	sh.asm	/^     cb7:	0f be 11             	movsbl (%ecx),%edx$/;"	l
cb9	usertests.asm	/^     cb9:	e8 ec 2b 00 00       	call   38aa <wait>$/;"	l
cba	sh.asm	/^     cba:	8d 42 d0             	lea    -0x30(%edx),%eax$/;"	l
cbd	sh.asm	/^     cbd:	3c 09                	cmp    $0x9,%al$/;"	l
cbe	usertests.asm	/^     cbe:	e8 e7 2b 00 00       	call   38aa <wait>$/;"	l
cbf	sh.asm	/^     cbf:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
cc	cat.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	echo.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	forktest.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	getnice.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	getnice.asm	/^  cc:	c3                   	ret    $/;"	l
cc	gettid.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	gettid.asm	/^  cc:	90                   	nop$/;"	l
cc	grep.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	grep.asm	/^  cc:	57                   	push   %edi$/;"	l
cc	halt.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	halt.asm	/^  cc:	90                   	nop$/;"	l
cc	init.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	kill.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	kill.asm	/^  cc:	c3                   	ret    $/;"	l
cc	ln.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	ln.asm	/^  cc:	c3                   	ret    $/;"	l
cc	ls.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	mkdir.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	ps.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	ps.asm	/^  cc:	c3                   	ret    $/;"	l
cc	rm.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	setnice.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	sh.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	stressfs.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	test.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	thread_create.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	thread_create.asm	/^  cc:	c3                   	ret    $/;"	l
cc	thread_exit.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	thread_exit.asm	/^  cc:	90                   	nop$/;"	l
cc	thread_join.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	thread_join.asm	/^  cc:	c3                   	ret    $/;"	l
cc	usertests.asm	/^        cc = sizeof(buf);$/;"	d
cc	usertests.asm	/^      cc = cc * 2;$/;"	d
cc	usertests.asm	/^    cc = 1;$/;"	d
cc	usertests.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	usertests.asm	/^    cc = read(fd, buf, 300);$/;"	d
cc	usertests.asm	/^  cc = read(fd, buf, sizeof(buf));$/;"	d
cc	wc.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	zombie.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	zombie.asm	/^  cc:	c3                   	ret    $/;"	l
cc3	usertests.asm	/^     cc3:	5e                   	pop    %esi$/;"	l
cc4	sh.asm	/^     cc4:	77 1f                	ja     ce5 <atoi+0x35>$/;"	l
cc4	usertests.asm	/^     cc4:	5f                   	pop    %edi$/;"	l
cc5	usertests.asm	/^     cc5:	68 57 41 00 00       	push   $0x4157$/;"	l
cc6	sh.asm	/^     cc6:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
cc9	sh.asm	/^     cc9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
cca	usertests.asm	/^     cca:	6a 01                	push   $0x1$/;"	l
ccc	usertests.asm	/^     ccc:	e8 8f 2d 00 00       	call   3a60 <printf>$/;"	l
cd	cat.asm	/^  cd:	83 f8 00             	cmp    $0x0,%eax$/;"	l
cd	echo.asm	/^  cd:	84 c0                	test   %al,%al$/;"	l
cd	getnice.asm	/^  cd:	31 c0                	xor    %eax,%eax$/;"	l
cd	gettid.asm	/^  cd:	90                   	nop$/;"	l
cd	grep.asm	/^  cd:	e8 3e 00 00 00       	call   110 <matchhere>$/;"	l
cd	halt.asm	/^  cd:	90                   	nop$/;"	l
cd	init.asm	/^  cd:	5a                   	pop    %edx$/;"	l
cd	kill.asm	/^  cd:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
cd	ln.asm	/^  cd:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
cd	ps.asm	/^  cd:	31 c0                	xor    %eax,%eax$/;"	l
cd	setnice.asm	/^  cd:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
cd	sh.asm	/^      cd:	50                   	push   %eax$/;"	l
cd	thread_create.asm	/^  cd:	31 c0                	xor    %eax,%eax$/;"	l
cd	thread_exit.asm	/^  cd:	90                   	nop$/;"	l
cd	thread_join.asm	/^  cd:	31 c0                	xor    %eax,%eax$/;"	l
cd	usertests.asm	/^      cd:	e8 0e 0c 00 00       	call   ce0 <exitwait>$/;"	l
cd	wc.asm	/^  cd:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
cd	zombie.asm	/^  cd:	31 c0                	xor    %eax,%eax$/;"	l
cd0	sh.asm	/^     cd0:	8d 04 80             	lea    (%eax,%eax,4),%eax$/;"	l
cd1	usertests.asm	/^     cd1:	83 c4 10             	add    $0x10,%esp$/;"	l
cd3	sh.asm	/^     cd3:	83 c1 01             	add    $0x1,%ecx$/;"	l
cd4	usertests.asm	/^     cd4:	eb 97                	jmp    c6d <preempt+0xcd>$/;"	l
cd6	sh.asm	/^     cd6:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax$/;"	l
cd6	usertests.asm	/^     cd6:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
cd9	usertests.asm	/^     cd9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
cda	sh.asm	/^     cda:	0f be 11             	movsbl (%ecx),%edx$/;"	l
cdd	sh.asm	/^     cdd:	8d 5a d0             	lea    -0x30(%edx),%ebx$/;"	l
ce	forktest.asm	/^  ce:	6a 01                	push   $0x1$/;"	l
ce	gettid.asm	/^  ce:	90                   	nop$/;"	l
ce	halt.asm	/^  ce:	90                   	nop$/;"	l
ce	init.asm	/^  ce:	59                   	pop    %ecx$/;"	l
ce	sh.asm	/^      ce:	68 c3 18 00 00       	push   $0x18c3$/;"	l
ce	thread_exit.asm	/^  ce:	90                   	nop$/;"	l
ce0	sh.asm	/^     ce0:	80 fb 09             	cmp    $0x9,%bl$/;"	l
ce0	usertests.asm	/^     ce0:	55                   	push   %ebp$/;"	l
ce1	usertests.asm	/^     ce1:	89 e5                	mov    %esp,%ebp$/;"	l
ce3	sh.asm	/^     ce3:	76 eb                	jbe    cd0 <atoi+0x20>$/;"	l
ce3	usertests.asm	/^     ce3:	56                   	push   %esi$/;"	l
ce4	usertests.asm	/^     ce4:	be 64 00 00 00       	mov    $0x64,%esi$/;"	l
ce5	sh.asm	/^     ce5:	5b                   	pop    %ebx$/;"	l
ce6	sh.asm	/^     ce6:	5d                   	pop    %ebp$/;"	l
ce7	sh.asm	/^     ce7:	c3                   	ret    $/;"	l
ce8	sh.asm	/^     ce8:	90                   	nop$/;"	l
ce9	sh.asm	/^     ce9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
ce9	usertests.asm	/^     ce9:	53                   	push   %ebx$/;"	l
cea	usertests.asm	/^     cea:	eb 14                	jmp    d00 <exitwait+0x20>$/;"	l
cec	usertests.asm	/^     cec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
cf	echo.asm	/^  cf:	74 0f                	je     e0 <strcmp+0x40>$/;"	l
cf	getnice.asm	/^  cf:	5d                   	pop    %ebp$/;"	l
cf	gettid.asm	/^  cf:	90                   	nop$/;"	l
cf	halt.asm	/^  cf:	90                   	nop$/;"	l
cf	init.asm	/^  cf:	68 8f 08 00 00       	push   $0x88f$/;"	l
cf	ls.asm	/^  cf:	ba 0e 00 00 00       	mov    $0xe,%edx$/;"	l
cf	ps.asm	/^  cf:	5d                   	pop    %ebp$/;"	l
cf	thread_create.asm	/^  cf:	5d                   	pop    %ebp$/;"	l
cf	thread_exit.asm	/^  cf:	90                   	nop$/;"	l
cf	thread_join.asm	/^  cf:	5d                   	pop    %ebp$/;"	l
cf	zombie.asm	/^  cf:	5d                   	pop    %ebp$/;"	l
cf0	sh.asm	/^     cf0:	55                   	push   %ebp$/;"	l
cf0	usertests.asm	/^     cf0:	74 6f                	je     d61 <exitwait+0x81>$/;"	l
cf1	sh.asm	/^     cf1:	89 e5                	mov    %esp,%ebp$/;"	l
cf2	usertests.asm	/^     cf2:	e8 b3 2b 00 00       	call   38aa <wait>$/;"	l
cf3	sh.asm	/^     cf3:	56                   	push   %esi$/;"	l
cf4	sh.asm	/^     cf4:	53                   	push   %ebx$/;"	l
cf5	sh.asm	/^     cf5:	8b 5d 10             	mov    0x10(%ebp),%ebx$/;"	l
cf7	usertests.asm	/^     cf7:	39 c3                	cmp    %eax,%ebx$/;"	l
cf8	sh.asm	/^     cf8:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cf9	usertests.asm	/^     cf9:	75 2d                	jne    d28 <exitwait+0x48>$/;"	l
cfb	sh.asm	/^     cfb:	8b 75 0c             	mov    0xc(%ebp),%esi$/;"	l
cfb	usertests.asm	/^     cfb:	83 ee 01             	sub    $0x1,%esi$/;"	l
cfe	sh.asm	/^     cfe:	85 db                	test   %ebx,%ebx$/;"	l
cfe	usertests.asm	/^     cfe:	74 48                	je     d48 <exitwait+0x68>$/;"	l
cgaputc	console.c	/^cgaputc(int c)$/;"	f	file:
cgaputc	fmt/console.c	/^8655 cgaputc(int c)$/;"	f	file:
chan	fmt/proc.h	/^2347   void *chan;                  \/\/ If non-zero, sleeping on chan$/;"	m	struct:proc
chan	proc.h	/^  void *chan;                  \/\/ If non-zero, sleeping on chan$/;"	m	struct:proc
char	cat.asm	/^char buf[512];$/;"	l
char	grep.asm	/^char buf[1024];$/;"	l
char	init.asm	/^char *argv[] = { "sh", 0 };$/;"	l
char	sh.asm	/^char symbols[] = "<|>&;()";$/;"	l
char	sh.asm	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	l
char	usertests.asm	/^char uninit[10000];$/;"	l
char	wc.asm	/^char buf[512];$/;"	l
checksum	fmt/mp.h	/^7607   uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mp
checksum	fmt/mp.h	/^7617   uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mpconf
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mp
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mpconf
clearpteu	fmt/vm.c	/^2022 clearpteu(pde_t *pgdir, char *uva)$/;"	f
clearpteu	vm.c	/^clearpteu(pde_t *pgdir, char *uva)$/;"	f
cli	fmt/x86.h	/^0557 cli(void)$/;"	f
cli	x86.h	/^cli(void)$/;"	f
cmd	fmt/sh.c	/^9115 struct cmd {$/;"	s	file:
cmd	fmt/sh.c	/^9127   struct cmd *cmd;$/;"	m	struct:redircmd	typeref:struct:redircmd::cmd	file:
cmd	fmt/sh.c	/^9148   struct cmd *cmd;$/;"	m	struct:backcmd	typeref:struct:backcmd::cmd	file:
cmd	sh.asm	/^      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);$/;"	d
cmd	sh.asm	/^      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);$/;"	d
cmd	sh.asm	/^    cmd = backcmd(cmd);$/;"	d
cmd	sh.asm	/^    cmd = listcmd(cmd, parseline(ps, es));$/;"	d
cmd	sh.asm	/^    cmd = pipecmd(cmd, parsepipe(ps, es));$/;"	d
cmd	sh.asm	/^  cmd = (struct execcmd*)ret;$/;"	d
cmd	sh.asm	/^  cmd = malloc(sizeof(*cmd));$/;"	d
cmd	sh.asm	/^  cmd = parseexec(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parseline(&s, es);$/;"	d
cmd	sh.asm	/^  cmd = parseline(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parsepipe(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parseredirs(cmd, ps, es);$/;"	d
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:backcmd	typeref:struct:backcmd::cmd	file:
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:redircmd	typeref:struct:redircmd::cmd	file:
cmd	sh.c	/^struct cmd {$/;"	s	file:
cmos_read	fmt/lapic.c	/^8082 cmos_read(uint reg)$/;"	f	file:
cmos_read	lapic.c	/^cmos_read(uint reg)$/;"	f	file:
cmostime	fmt/lapic.c	/^8102 cmostime(struct rtcdate *r)$/;"	f
cmostime	lapic.c	/^cmostime(struct rtcdate *r)$/;"	f
code	kernel.asm	/^  code = P2V(0x7000);$/;"	d
commit	fmt/log.c	/^5451 commit()$/;"	f	file:
commit	log.c	/^commit()$/;"	f	file:
committing	fmt/log.c	/^5293   int committing;  \/\/ in commit(), please wait.$/;"	m	struct:log	file:
committing	log.c	/^  int committing;  \/\/ in commit(), please wait.$/;"	m	struct:log	file:
concreate	usertests.c	/^concreate(void)$/;"	f
cond_init	synch.c	/^int cond_init(struct cond_t *cond)$/;"	f
cond_signal	synch.c	/^int cond_signal(struct cond_t *cond)$/;"	f
cond_t	synch.h	/^struct cond_t{$/;"	s
cond_wait	synch.c	/^int cond_wait(struct cond_t *cond, struct mutex_t *mutex)$/;"	f
condition	test.c	/^int condition = 0;$/;"	v
conf	kernel.asm	/^  conf = (struct mpconf*) P2V((uint) mp->physaddr);$/;"	d
cons	console.c	/^} cons;$/;"	v	typeref:struct:__anon13	file:
cons	fmt/console.c	/^8474 } cons;$/;"	v	typeref:struct:__anon5	file:
consoleinit	console.c	/^consoleinit(void)$/;"	f
consoleinit	fmt/console.c	/^8824 consoleinit(void)$/;"	f
consoleintr	console.c	/^consoleintr(int (*getc)(void))$/;"	f
consoleintr	fmt/console.c	/^8727 consoleintr(int (*getc)(void))$/;"	f
consoleread	console.c	/^consoleread(struct inode *ip, char *dst, int n)$/;"	f
consoleread	fmt/console.c	/^8771 consoleread(struct inode *ip, char *dst, int n)$/;"	f
consolewrite	console.c	/^consolewrite(struct inode *ip, char *buf, int n)$/;"	f
consolewrite	fmt/console.c	/^8809 consolewrite(struct inode *ip, char *buf, int n)$/;"	f
consputc	console.c	/^consputc(int c)$/;"	f
consputc	fmt/console.c	/^8701 consputc(int c)$/;"	f
context	fmt/proc.h	/^2326 struct context {$/;"	s
context	fmt/proc.h	/^2346   struct context *context;     \/\/ swtch() here to run process$/;"	m	struct:proc	typeref:struct:proc::context
context	proc.h	/^  struct context *context;     \/\/ swtch() here to run process$/;"	m	struct:proc	typeref:struct:proc::context
context	proc.h	/^struct context {$/;"	s
copyout	fmt/vm.c	/^2118 copyout(pde_t *pgdir, uint va, void *p, uint len)$/;"	f
copyout	vm.c	/^copyout(pde_t *pgdir, uint va, void *p, uint len)$/;"	f
copyuvm	fmt/vm.c	/^2035 copyuvm(pde_t *pgdir, uint sz)$/;"	f
copyuvm	vm.c	/^copyuvm(pde_t *pgdir, uint sz)$/;"	f
cprintf	console.c	/^cprintf(char *fmt, ...)$/;"	f
cprintf	fmt/console.c	/^8552 cprintf(char *fmt, ...)$/;"	f
cpu	fmt/proc.h	/^2301 struct cpu {$/;"	s
cpu	fmt/spinlock.h	/^1506   struct cpu *cpu;   \/\/ The cpu holding the lock.$/;"	m	struct:spinlock	typeref:struct:spinlock::cpu
cpu	proc.h	/^struct cpu {$/;"	s
cpu	spinlock.h	/^  struct cpu *cpu;   \/\/ The cpu holding the lock.$/;"	m	struct:spinlock	typeref:struct:spinlock::cpu
cpuid	fmt/proc.c	/^2432 cpuid() {$/;"	f
cpuid	proc.c	/^cpuid() {$/;"	f
cpus	fmt/mp.c	/^7763 struct cpu cpus[NCPU];$/;"	v	typeref:struct:cpu
cpus	mp.c	/^struct cpu cpus[NCPU];$/;"	v	typeref:struct:cpu
cr3	fmt/mmu.h	/^0825   void *cr3;         \/\/ Page directory base$/;"	m	struct:taskstate
cr3	mmu.h	/^  void *cr3;         \/\/ Page directory base$/;"	m	struct:taskstate
create	fmt/sysfile.c	/^6907 create(char *path, short type, short major, short minor)$/;"	f	file:
create	sysfile.c	/^create(char *path, short type, short major, short minor)$/;"	f	file:
createdelete	usertests.c	/^createdelete(void)$/;"	f
createtest	usertests.c	/^createtest(void)$/;"	f
crt	console.c	/^static ushort *crt = (ushort*)P2V(0xb8000);  \/\/ CGA memory$/;"	v	file:
crt	fmt/console.c	/^8652 static ushort *crt = (ushort*)P2V(0xb8000);  \/\/ CGA memory$/;"	v	file:
cs	fmt/mmu.h	/^0838   ushort cs;$/;"	m	struct:taskstate
cs	fmt/mmu.h	/^0857   uint cs : 16;         \/\/ code segment selector$/;"	m	struct:gatedesc
cs	fmt/x86.h	/^0627   ushort cs;$/;"	m	struct:trapframe
cs	mmu.h	/^  uint cs : 16;         \/\/ code segment selector$/;"	m	struct:gatedesc
cs	mmu.h	/^  ushort cs;$/;"	m	struct:taskstate
cs	x86.h	/^  ushort cs;$/;"	m	struct:trapframe
ctlmap	fmt/kbd.h	/^8350 static uchar ctlmap[256] =$/;"	v
ctlmap	kbd.h	/^static uchar ctlmap[256] =$/;"	v
current	synch.h	/^  struct proc *current;$/;"	m	struct:cond_t	typeref:struct:cond_t::proc
current	synch.h	/^  struct proc *current;$/;"	m	struct:mutex_t	typeref:struct:mutex_t::proc
cwd	fmt/proc.h	/^2350   struct inode *cwd;           \/\/ Current directory$/;"	m	struct:proc	typeref:struct:proc::inode
cwd	proc.h	/^  struct inode *cwd;           \/\/ Current directory$/;"	m	struct:proc	typeref:struct:proc::inode
d	cat.asm	/^   d:	57                   	push   %edi$/;"	l
d	echo.asm	/^   d:	57                   	push   %edi$/;"	l
d	forktest.asm	/^   d:	51                   	push   %ecx$/;"	l
d	getnice.asm	/^   d:	51                   	push   %ecx$/;"	l
d	gettid.asm	/^   d:	51                   	push   %ecx$/;"	l
d	grep.asm	/^   d:	57                   	push   %edi$/;"	l
d	halt.asm	/^   d:	51                   	push   %ecx$/;"	l
d	init.asm	/^   d:	53                   	push   %ebx$/;"	l
d	kernel.asm	/^  d = dst;$/;"	d
d	kill.asm	/^   d:	57                   	push   %edi$/;"	l
d	ln.asm	/^   d:	55                   	push   %ebp$/;"	l
d	ls.asm	/^   d:	57                   	push   %edi$/;"	l
d	mkdir.asm	/^   d:	57                   	push   %edi$/;"	l
d	ps.asm	/^   d:	51                   	push   %ecx$/;"	l
d	rm.asm	/^   d:	57                   	push   %edi$/;"	l
d	setnice.asm	/^   d:	56                   	push   %esi$/;"	l
d	sh.asm	/^       d:	51                   	push   %ecx$/;"	l
d	test.asm	/^   d:	57                   	push   %edi$/;"	l
d	thread_create.asm	/^   d:	51                   	push   %ecx$/;"	l
d	thread_exit.asm	/^   d:	51                   	push   %ecx$/;"	l
d	thread_join.asm	/^   d:	53                   	push   %ebx$/;"	l
d	usertests.asm	/^       d:	51                   	push   %ecx$/;"	l
d	wc.asm	/^   d:	57                   	push   %edi$/;"	l
d	zombie.asm	/^   d:	51                   	push   %ecx$/;"	l
d0	cat.asm	/^  d0:	89 c3                	mov    %eax,%ebx$/;"	l
d0	forktest.asm	/^  d0:	e8 dd 02 00 00       	call   3b2 <write>$/;"	l
d0	getnice.asm	/^  d0:	c3                   	ret    $/;"	l
d0	gettid.asm	/^  d0:	55                   	push   %ebp$/;"	l
d0	halt.asm	/^  d0:	55                   	push   %ebp$/;"	l
d0	kill.asm	/^  d0:	31 c0                	xor    %eax,%eax$/;"	l
d0	ln.asm	/^  d0:	31 c0                	xor    %eax,%eax$/;"	l
d0	mkdir.asm	/^  d0:	83 c2 01             	add    $0x1,%edx$/;"	l
d0	ps.asm	/^  d0:	c3                   	ret    $/;"	l
d0	rm.asm	/^  d0:	83 c2 01             	add    $0x1,%edx$/;"	l
d0	setnice.asm	/^  d0:	83 c2 01             	add    $0x1,%edx$/;"	l
d0	stressfs.asm	/^  d0:	58                   	pop    %eax$/;"	l
d0	test.asm	/^  d0:	e8 d5 04 00 00       	call   5aa <mutex_lock>$/;"	l
d0	thread_create.asm	/^  d0:	c3                   	ret    $/;"	l
d0	thread_exit.asm	/^  d0:	55                   	push   %ebp$/;"	l
d0	thread_join.asm	/^  d0:	c3                   	ret    $/;"	l
d0	wc.asm	/^  d0:	e8 05 03 00 00       	call   3da <read>$/;"	l
d0	zombie.asm	/^  d0:	c3                   	ret    $/;"	l
d00	sh.asm	/^     d00:	7e 14                	jle    d16 <memmove+0x26>$/;"	l
d00	usertests.asm	/^     d00:	e8 95 2b 00 00       	call   389a <fork>$/;"	l
d02	sh.asm	/^     d02:	31 d2                	xor    %edx,%edx$/;"	l
d04	sh.asm	/^     d04:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
d05	usertests.asm	/^     d05:	85 c0                	test   %eax,%eax$/;"	l
d07	usertests.asm	/^     d07:	89 c3                	mov    %eax,%ebx$/;"	l
d08	sh.asm	/^     d08:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx$/;"	l
d09	usertests.asm	/^     d09:	79 e5                	jns    cf0 <exitwait+0x10>$/;"	l
d0b	usertests.asm	/^     d0b:	83 ec 08             	sub    $0x8,%esp$/;"	l
d0c	sh.asm	/^     d0c:	88 0c 10             	mov    %cl,(%eax,%edx,1)$/;"	l
d0e	usertests.asm	/^     d0e:	68 c1 4c 00 00       	push   $0x4cc1$/;"	l
d0f	sh.asm	/^     d0f:	83 c2 01             	add    $0x1,%edx$/;"	l
d1	echo.asm	/^  d1:	89 f1                	mov    %esi,%ecx$/;"	l
d1	getnice.asm	/^  d1:	eb 0d                	jmp    e0 <memset>$/;"	l
d1	gettid.asm	/^  d1:	89 e5                	mov    %esp,%ebp$/;"	l
d1	halt.asm	/^  d1:	89 e5                	mov    %esp,%ebp$/;"	l
d1	ps.asm	/^  d1:	eb 0d                	jmp    e0 <memset>$/;"	l
d1	stressfs.asm	/^  d1:	5a                   	pop    %edx$/;"	l
d1	thread_create.asm	/^  d1:	eb 0d                	jmp    e0 <memset>$/;"	l
d1	thread_exit.asm	/^  d1:	89 e5                	mov    %esp,%ebp$/;"	l
d1	thread_join.asm	/^  d1:	eb 0d                	jmp    e0 <memset>$/;"	l
d1	zombie.asm	/^  d1:	eb 0d                	jmp    e0 <memset>$/;"	l
d12	sh.asm	/^     d12:	39 da                	cmp    %ebx,%edx$/;"	l
d13	usertests.asm	/^     d13:	6a 01                	push   $0x1$/;"	l
d14	sh.asm	/^     d14:	75 f2                	jne    d08 <memmove+0x18>$/;"	l
d15	usertests.asm	/^     d15:	e8 46 2d 00 00       	call   3a60 <printf>$/;"	l
d16	sh.asm	/^     d16:	5b                   	pop    %ebx$/;"	l
d17	sh.asm	/^     d17:	5e                   	pop    %esi$/;"	l
d18	sh.asm	/^     d18:	5d                   	pop    %ebp$/;"	l
d19	sh.asm	/^     d19:	c3                   	ret    $/;"	l
d1a	sh.asm	/^     d1a:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
d1a	usertests.asm	/^     d1a:	83 c4 10             	add    $0x10,%esp$/;"	l
d1d	usertests.asm	/^     d1d:	8d 65 f8             	lea    -0x8(%ebp),%esp$/;"	l
d1f	sh.asm	/^     d1f:	cd 40                	int    $0x40$/;"	l
d2	cat.asm	/^  d2:	7f cc                	jg     a0 <cat+0x10>$/;"	l
d2	grep.asm	/^  d2:	83 c4 10             	add    $0x10,%esp$/;"	l
d2	kill.asm	/^  d2:	29 d8                	sub    %ebx,%eax$/;"	l
d2	ln.asm	/^  d2:	29 d8                	sub    %ebx,%eax$/;"	l
d2	stressfs.asm	/^  d2:	68 7d 08 00 00       	push   $0x87d$/;"	l
d2	usertests.asm	/^      d2:	e8 e9 26 00 00       	call   27c0 <rmdot>$/;"	l
d20	usertests.asm	/^     d20:	5b                   	pop    %ebx$/;"	l
d21	sh.asm	/^     d21:	c3                   	ret    $/;"	l
d21	usertests.asm	/^     d21:	5e                   	pop    %esi$/;"	l
d22	sh.asm	/^     d22:	b8 02 00 00 00       	mov    $0x2,%eax$/;"	l
d22	usertests.asm	/^     d22:	5d                   	pop    %ebp$/;"	l
d23	usertests.asm	/^     d23:	c3                   	ret    $/;"	l
d24	usertests.asm	/^     d24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
d27	sh.asm	/^     d27:	cd 40                	int    $0x40$/;"	l
d28	usertests.asm	/^     d28:	83 ec 08             	sub    $0x8,%esp$/;"	l
d29	sh.asm	/^     d29:	c3                   	ret    $/;"	l
d2a	sh.asm	/^     d2a:	b8 03 00 00 00       	mov    $0x3,%eax$/;"	l
d2b	usertests.asm	/^     d2b:	68 63 41 00 00       	push   $0x4163$/;"	l
d2f	sh.asm	/^     d2f:	cd 40                	int    $0x40$/;"	l
d3	echo.asm	/^  d3:	38 d8                	cmp    %bl,%al$/;"	l
d3	getnice.asm	/^  d3:	90                   	nop$/;"	l
d3	gettid.asm	/^  d3:	57                   	push   %edi$/;"	l
d3	halt.asm	/^  d3:	57                   	push   %edi$/;"	l
d3	mkdir.asm	/^  d3:	0f b6 02             	movzbl (%edx),%eax$/;"	l
d3	ps.asm	/^  d3:	90                   	nop$/;"	l
d3	rm.asm	/^  d3:	0f b6 02             	movzbl (%edx),%eax$/;"	l
d3	setnice.asm	/^  d3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)$/;"	l
d3	sh.asm	/^      d3:	68 a9 12 00 00       	push   $0x12a9$/;"	l
d3	thread_create.asm	/^  d3:	90                   	nop$/;"	l
d3	thread_exit.asm	/^  d3:	57                   	push   %edi$/;"	l
d3	thread_join.asm	/^  d3:	90                   	nop$/;"	l
d3	zombie.asm	/^  d3:	90                   	nop$/;"	l
d30	usertests.asm	/^     d30:	6a 01                	push   $0x1$/;"	l
d31	sh.asm	/^     d31:	c3                   	ret    $/;"	l
d32	sh.asm	/^     d32:	b8 04 00 00 00       	mov    $0x4,%eax$/;"	l
d32	usertests.asm	/^     d32:	e8 29 2d 00 00       	call   3a60 <printf>$/;"	l
d37	sh.asm	/^     d37:	cd 40                	int    $0x40$/;"	l
d37	usertests.asm	/^     d37:	83 c4 10             	add    $0x10,%esp$/;"	l
d39	sh.asm	/^     d39:	c3                   	ret    $/;"	l
d3a	sh.asm	/^     d3a:	b8 05 00 00 00       	mov    $0x5,%eax$/;"	l
d3a	usertests.asm	/^     d3a:	8d 65 f8             	lea    -0x8(%ebp),%esp$/;"	l
d3d	usertests.asm	/^     d3d:	5b                   	pop    %ebx$/;"	l
d3e	usertests.asm	/^     d3e:	5e                   	pop    %esi$/;"	l
d3f	sh.asm	/^     d3f:	cd 40                	int    $0x40$/;"	l
d3f	usertests.asm	/^     d3f:	5d                   	pop    %ebp$/;"	l
d4	cat.asm	/^  d4:	75 1b                	jne    f1 <cat+0x61>$/;"	l
d4	getnice.asm	/^  d4:	90                   	nop$/;"	l
d4	gettid.asm	/^  d4:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
d4	halt.asm	/^  d4:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
d4	init.asm	/^  d4:	6a 01                	push   $0x1$/;"	l
d4	kill.asm	/^  d4:	5b                   	pop    %ebx$/;"	l
d4	ln.asm	/^  d4:	5b                   	pop    %ebx$/;"	l
d4	ls.asm	/^  d4:	83 c4 0c             	add    $0xc,%esp$/;"	l
d4	ps.asm	/^  d4:	90                   	nop$/;"	l
d4	thread_create.asm	/^  d4:	90                   	nop$/;"	l
d4	thread_exit.asm	/^  d4:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
d4	thread_join.asm	/^  d4:	90                   	nop$/;"	l
d4	zombie.asm	/^  d4:	90                   	nop$/;"	l
d40	usertests.asm	/^     d40:	c3                   	ret    $/;"	l
d41	sh.asm	/^     d41:	c3                   	ret    $/;"	l
d41	usertests.asm	/^     d41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
d42	sh.asm	/^     d42:	b8 10 00 00 00       	mov    $0x10,%eax$/;"	l
d47	sh.asm	/^     d47:	cd 40                	int    $0x40$/;"	l
d48	usertests.asm	/^     d48:	83 ec 08             	sub    $0x8,%esp$/;"	l
d49	sh.asm	/^     d49:	c3                   	ret    $/;"	l
d4a	sh.asm	/^     d4a:	b8 15 00 00 00       	mov    $0x15,%eax$/;"	l
d4b	usertests.asm	/^     d4b:	68 73 41 00 00       	push   $0x4173$/;"	l
d4f	sh.asm	/^     d4f:	cd 40                	int    $0x40$/;"	l
d5	echo.asm	/^  d5:	74 e9                	je     c0 <strcmp+0x20>$/;"	l
d5	forktest.asm	/^  d5:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
d5	getnice.asm	/^  d5:	90                   	nop$/;"	l
d5	grep.asm	/^  d5:	85 c0                	test   %eax,%eax$/;"	l
d5	kill.asm	/^  d5:	5e                   	pop    %esi$/;"	l
d5	ln.asm	/^  d5:	5e                   	pop    %esi$/;"	l
d5	ps.asm	/^  d5:	90                   	nop$/;"	l
d5	test.asm	/^  d5:	58                   	pop    %eax$/;"	l
d5	thread_create.asm	/^  d5:	90                   	nop$/;"	l
d5	thread_join.asm	/^  d5:	90                   	nop$/;"	l
d5	wc.asm	/^  d5:	83 c4 10             	add    $0x10,%esp$/;"	l
d5	zombie.asm	/^  d5:	90                   	nop$/;"	l
d50	usertests.asm	/^     d50:	6a 01                	push   $0x1$/;"	l
d51	sh.asm	/^     d51:	c3                   	ret    $/;"	l
d52	sh.asm	/^     d52:	b8 06 00 00 00       	mov    $0x6,%eax$/;"	l
d52	usertests.asm	/^     d52:	e8 09 2d 00 00       	call   3a60 <printf>$/;"	l
d57	sh.asm	/^     d57:	cd 40                	int    $0x40$/;"	l
d57	usertests.asm	/^     d57:	83 c4 10             	add    $0x10,%esp$/;"	l
d59	sh.asm	/^     d59:	c3                   	ret    $/;"	l
d5a	sh.asm	/^     d5a:	b8 07 00 00 00       	mov    $0x7,%eax$/;"	l
d5a	usertests.asm	/^     d5a:	8d 65 f8             	lea    -0x8(%ebp),%esp$/;"	l
d5d	usertests.asm	/^     d5d:	5b                   	pop    %ebx$/;"	l
d5e	usertests.asm	/^     d5e:	5e                   	pop    %esi$/;"	l
d5f	sh.asm	/^     d5f:	cd 40                	int    $0x40$/;"	l
d5f	usertests.asm	/^     d5f:	5d                   	pop    %ebp$/;"	l
d6	cat.asm	/^  d6:	8d 65 f8             	lea    -0x8(%ebp),%esp$/;"	l
d6	getnice.asm	/^  d6:	90                   	nop$/;"	l
d6	init.asm	/^  d6:	e8 35 04 00 00       	call   510 <printf>$/;"	l
d6	kill.asm	/^  d6:	5d                   	pop    %ebp$/;"	l
d6	ln.asm	/^  d6:	5d                   	pop    %ebp$/;"	l
d6	mkdir.asm	/^  d6:	8d 71 01             	lea    0x1(%ecx),%esi$/;"	l
d6	ps.asm	/^  d6:	90                   	nop$/;"	l
d6	rm.asm	/^  d6:	8d 71 01             	lea    0x1(%ecx),%esi$/;"	l
d6	test.asm	/^  d6:	5a                   	pop    %edx$/;"	l
d6	thread_create.asm	/^  d6:	90                   	nop$/;"	l
d6	thread_join.asm	/^  d6:	90                   	nop$/;"	l
d6	zombie.asm	/^  d6:	90                   	nop$/;"	l
d60	usertests.asm	/^     d60:	c3                   	ret    $/;"	l
d61	sh.asm	/^     d61:	c3                   	ret    $/;"	l
d61	usertests.asm	/^     d61:	e8 3c 2b 00 00       	call   38a2 <exit>$/;"	l
d62	sh.asm	/^     d62:	b8 0f 00 00 00       	mov    $0xf,%eax$/;"	l
d66	usertests.asm	/^     d66:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
d67	sh.asm	/^     d67:	cd 40                	int    $0x40$/;"	l
d69	sh.asm	/^     d69:	c3                   	ret    $/;"	l
d69	usertests.asm	/^     d69:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
d6a	sh.asm	/^     d6a:	b8 11 00 00 00       	mov    $0x11,%eax$/;"	l
d6f	sh.asm	/^     d6f:	cd 40                	int    $0x40$/;"	l
d7	echo.asm	/^  d7:	29 d8                	sub    %ebx,%eax$/;"	l
d7	getnice.asm	/^  d7:	90                   	nop$/;"	l
d7	gettid.asm	/^  d7:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
d7	grep.asm	/^  d7:	75 1f                	jne    f8 <matchstar+0x48>$/;"	l
d7	halt.asm	/^  d7:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
d7	kill.asm	/^  d7:	c3                   	ret    $/;"	l
d7	ln.asm	/^  d7:	c3                   	ret    $/;"	l
d7	ls.asm	/^  d7:	05 c0 0d 00 00       	add    $0xdc0,%eax$/;"	l
d7	ps.asm	/^  d7:	90                   	nop$/;"	l
d7	setnice.asm	/^  d7:	89 d0                	mov    %edx,%eax$/;"	l
d7	stressfs.asm	/^  d7:	6a 01                	push   $0x1$/;"	l
d7	test.asm	/^  d7:	68 20 0a 00 00       	push   $0xa20$/;"	l
d7	thread_create.asm	/^  d7:	90                   	nop$/;"	l
d7	thread_exit.asm	/^  d7:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
d7	thread_join.asm	/^  d7:	90                   	nop$/;"	l
d7	usertests.asm	/^      d7:	e8 a4 25 00 00       	call   2680 <fourteen>$/;"	l
d7	zombie.asm	/^  d7:	90                   	nop$/;"	l
d70	usertests.asm	/^     d70:	55                   	push   %ebp$/;"	l
d71	sh.asm	/^     d71:	c3                   	ret    $/;"	l
d71	usertests.asm	/^     d71:	89 e5                	mov    %esp,%ebp$/;"	l
d72	sh.asm	/^     d72:	b8 12 00 00 00       	mov    $0x12,%eax$/;"	l
d73	usertests.asm	/^     d73:	57                   	push   %edi$/;"	l
d74	usertests.asm	/^     d74:	56                   	push   %esi$/;"	l
d75	usertests.asm	/^     d75:	53                   	push   %ebx$/;"	l
d76	usertests.asm	/^     d76:	83 ec 14             	sub    $0x14,%esp$/;"	l
d77	sh.asm	/^     d77:	cd 40                	int    $0x40$/;"	l
d79	sh.asm	/^     d79:	c3                   	ret    $/;"	l
d79	usertests.asm	/^     d79:	68 80 41 00 00       	push   $0x4180$/;"	l
d7a	sh.asm	/^     d7a:	b8 08 00 00 00       	mov    $0x8,%eax$/;"	l
d7e	usertests.asm	/^     d7e:	6a 01                	push   $0x1$/;"	l
d7f	sh.asm	/^     d7f:	cd 40                	int    $0x40$/;"	l
d8	forktest.asm	/^  d8:	c9                   	leave  $/;"	l
d8	getnice.asm	/^  d8:	90                   	nop$/;"	l
d8	kill.asm	/^  d8:	90                   	nop$/;"	l
d8	ln.asm	/^  d8:	90                   	nop$/;"	l
d8	ps.asm	/^  d8:	90                   	nop$/;"	l
d8	sh.asm	/^      d8:	6a 02                	push   $0x2$/;"	l
d8	thread_create.asm	/^  d8:	90                   	nop$/;"	l
d8	thread_join.asm	/^  d8:	90                   	nop$/;"	l
d8	wc.asm	/^  d8:	83 f8 00             	cmp    $0x0,%eax$/;"	l
d8	zombie.asm	/^  d8:	90                   	nop$/;"	l
d80	usertests.asm	/^     d80:	e8 db 2c 00 00       	call   3a60 <printf>$/;"	l
d81	sh.asm	/^     d81:	c3                   	ret    $/;"	l
d82	sh.asm	/^     d82:	b8 13 00 00 00       	mov    $0x13,%eax$/;"	l
d85	usertests.asm	/^     d85:	e8 98 2b 00 00       	call   3922 <getpid>$/;"	l
d87	sh.asm	/^     d87:	cd 40                	int    $0x40$/;"	l
d89	sh.asm	/^     d89:	c3                   	ret    $/;"	l
d8a	sh.asm	/^     d8a:	b8 14 00 00 00       	mov    $0x14,%eax$/;"	l
d8a	usertests.asm	/^     d8a:	89 c6                	mov    %eax,%esi$/;"	l
d8c	usertests.asm	/^     d8c:	e8 09 2b 00 00       	call   389a <fork>$/;"	l
d8f	sh.asm	/^     d8f:	cd 40                	int    $0x40$/;"	l
d9	cat.asm	/^  d9:	5b                   	pop    %ebx$/;"	l
d9	echo.asm	/^  d9:	5b                   	pop    %ebx$/;"	l
d9	forktest.asm	/^  d9:	c3                   	ret    $/;"	l
d9	getnice.asm	/^  d9:	90                   	nop$/;"	l
d9	grep.asm	/^  d9:	0f be 13             	movsbl (%ebx),%edx$/;"	l
d9	kill.asm	/^  d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
d9	ln.asm	/^  d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
d9	mkdir.asm	/^  d9:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx$/;"	l
d9	ps.asm	/^  d9:	90                   	nop$/;"	l
d9	rm.asm	/^  d9:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx$/;"	l
d9	setnice.asm	/^  d9:	75 f5                	jne    d0 <strlen+0x10>$/;"	l
d9	stressfs.asm	/^  d9:	e8 62 04 00 00       	call   540 <printf>$/;"	l
d9	thread_create.asm	/^  d9:	90                   	nop$/;"	l
d9	thread_join.asm	/^  d9:	90                   	nop$/;"	l
d9	zombie.asm	/^  d9:	90                   	nop$/;"	l
d91	sh.asm	/^     d91:	c3                   	ret    $/;"	l
d91	usertests.asm	/^     d91:	83 c4 10             	add    $0x10,%esp$/;"	l
d92	sh.asm	/^     d92:	b8 09 00 00 00       	mov    $0x9,%eax$/;"	l
d94	usertests.asm	/^     d94:	85 c0                	test   %eax,%eax$/;"	l
d96	usertests.asm	/^     d96:	75 70                	jne    e08 <mem+0x98>$/;"	l
d97	sh.asm	/^     d97:	cd 40                	int    $0x40$/;"	l
d98	usertests.asm	/^     d98:	31 db                	xor    %ebx,%ebx$/;"	l
d99	sh.asm	/^     d99:	c3                   	ret    $/;"	l
d9a	sh.asm	/^     d9a:	b8 0a 00 00 00       	mov    $0xa,%eax$/;"	l
d9a	usertests.asm	/^     d9a:	eb 08                	jmp    da4 <mem+0x34>$/;"	l
d9c	usertests.asm	/^     d9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
d9f	sh.asm	/^     d9f:	cd 40                	int    $0x40$/;"	l
da	cat.asm	/^  da:	5e                   	pop    %esi$/;"	l
da	echo.asm	/^  da:	5e                   	pop    %esi$/;"	l
da	forktest.asm	/^  da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
da	getnice.asm	/^  da:	90                   	nop$/;"	l
da	gettid.asm	/^  da:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
da	halt.asm	/^  da:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
da	ps.asm	/^  da:	90                   	nop$/;"	l
da	sh.asm	/^      da:	e8 01 0e 00 00       	call   ee0 <printf>$/;"	l
da	thread_create.asm	/^  da:	90                   	nop$/;"	l
da	thread_exit.asm	/^  da:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
da	thread_join.asm	/^  da:	90                   	nop$/;"	l
da	zombie.asm	/^  da:	90                   	nop$/;"	l
da0	usertests.asm	/^     da0:	89 18                	mov    %ebx,(%eax)$/;"	l
da1	sh.asm	/^     da1:	c3                   	ret    $/;"	l
da2	sh.asm	/^     da2:	b8 0b 00 00 00       	mov    $0xb,%eax$/;"	l
da2	usertests.asm	/^     da2:	89 c3                	mov    %eax,%ebx$/;"	l
da4	usertests.asm	/^     da4:	83 ec 0c             	sub    $0xc,%esp$/;"	l
da7	sh.asm	/^     da7:	cd 40                	int    $0x40$/;"	l
da7	usertests.asm	/^     da7:	68 11 27 00 00       	push   $0x2711$/;"	l
da9	sh.asm	/^     da9:	c3                   	ret    $/;"	l
daa	sh.asm	/^     daa:	b8 0c 00 00 00       	mov    $0xc,%eax$/;"	l
dac	usertests.asm	/^     dac:	e8 df 2e 00 00       	call   3c90 <malloc>$/;"	l
daf	sh.asm	/^     daf:	cd 40                	int    $0x40$/;"	l
data	buf.h	/^  uchar data[BSIZE];$/;"	m	struct:buf
data	fmt/buf.h	/^4409   uchar data[BSIZE];$/;"	m	struct:buf
data	fmt/ioapic.c	/^8180   uint data;$/;"	m	struct:ioapic	file:
data	fmt/pipe.c	/^7314   char data[PIPESIZE];$/;"	m	struct:pipe	file:
data	ioapic.c	/^  uint data;$/;"	m	struct:ioapic	file:
data	kernel.asm	/^    data = (shift & E0ESC ? data : data & 0x7F);$/;"	d
data	kernel.asm	/^  data = inb(KBDATAP);$/;"	d
data	pipe.c	/^  char data[PIPESIZE];$/;"	m	struct:pipe	file:
day	date.h	/^  uint day;$/;"	m	struct:rtcdate
day	fmt/date.h	/^0954   uint day;$/;"	m	struct:rtcdate
db	cat.asm	/^  db:	5d                   	pop    %ebp$/;"	l
db	echo.asm	/^  db:	5d                   	pop    %ebp$/;"	l
db	fmt/mmu.h	/^0736   uint db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:segdesc
db	getnice.asm	/^  db:	90                   	nop$/;"	l
db	init.asm	/^  db:	e8 72 02 00 00       	call   352 <exit>$/;"	l
db	mmu.h	/^  uint db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:segdesc
db	ps.asm	/^  db:	90                   	nop$/;"	l
db	setnice.asm	/^  db:	5d                   	pop    %ebp$/;"	l
db	thread_create.asm	/^  db:	90                   	nop$/;"	l
db	thread_join.asm	/^  db:	90                   	nop$/;"	l
db	wc.asm	/^  db:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
db	zombie.asm	/^  db:	90                   	nop$/;"	l
db1	sh.asm	/^     db1:	c3                   	ret    $/;"	l
db1	usertests.asm	/^     db1:	83 c4 10             	add    $0x10,%esp$/;"	l
db2	sh.asm	/^     db2:	b8 0d 00 00 00       	mov    $0xd,%eax$/;"	l
db4	usertests.asm	/^     db4:	85 c0                	test   %eax,%eax$/;"	l
db6	usertests.asm	/^     db6:	75 e8                	jne    da0 <mem+0x30>$/;"	l
db7	sh.asm	/^     db7:	cd 40                	int    $0x40$/;"	l
db8	usertests.asm	/^     db8:	85 db                	test   %ebx,%ebx$/;"	l
db9	sh.asm	/^     db9:	c3                   	ret    $/;"	l
dba	sh.asm	/^     dba:	b8 0e 00 00 00       	mov    $0xe,%eax$/;"	l
dba	usertests.asm	/^     dba:	74 18                	je     dd4 <mem+0x64>$/;"	l
dbc	usertests.asm	/^     dbc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
dbf	sh.asm	/^     dbf:	cd 40                	int    $0x40$/;"	l
dc	cat.asm	/^  dc:	c3                   	ret    $/;"	l
dc	echo.asm	/^  dc:	c3                   	ret    $/;"	l
dc	getnice.asm	/^  dc:	90                   	nop$/;"	l
dc	grep.asm	/^  dc:	84 d2                	test   %dl,%dl$/;"	l
dc	ls.asm	/^  dc:	29 f2                	sub    %esi,%edx$/;"	l
dc	ps.asm	/^  dc:	90                   	nop$/;"	l
dc	setnice.asm	/^  dc:	c3                   	ret    $/;"	l
dc	test.asm	/^  dc:	6a 01                	push   $0x1$/;"	l
dc	thread_create.asm	/^  dc:	90                   	nop$/;"	l
dc	thread_join.asm	/^  dc:	90                   	nop$/;"	l
dc	usertests.asm	/^      dc:	e8 cf 23 00 00       	call   24b0 <bigfile>$/;"	l
dc	zombie.asm	/^  dc:	90                   	nop$/;"	l
dc0	usertests.asm	/^     dc0:	8b 3b                	mov    (%ebx),%edi$/;"	l
dc1	sh.asm	/^     dc1:	c3                   	ret    $/;"	l
dc2	sh.asm	/^     dc2:	b8 16 00 00 00       	mov    $0x16,%eax$/;"	l
dc2	usertests.asm	/^     dc2:	83 ec 0c             	sub    $0xc,%esp$/;"	l
dc5	usertests.asm	/^     dc5:	53                   	push   %ebx$/;"	l
dc6	usertests.asm	/^     dc6:	89 fb                	mov    %edi,%ebx$/;"	l
dc7	sh.asm	/^     dc7:	cd 40                	int    $0x40$/;"	l
dc8	usertests.asm	/^     dc8:	e8 33 2e 00 00       	call   3c00 <free>$/;"	l
dc9	sh.asm	/^     dc9:	c3                   	ret    $/;"	l
dca	sh.asm	/^     dca:	b8 17 00 00 00       	mov    $0x17,%eax$/;"	l
dcd	usertests.asm	/^     dcd:	83 c4 10             	add    $0x10,%esp$/;"	l
dcf	sh.asm	/^     dcf:	cd 40                	int    $0x40$/;"	l
dd	cat.asm	/^  dd:	83 ec 08             	sub    $0x8,%esp$/;"	l
dd	echo.asm	/^  dd:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
dd	getnice.asm	/^  dd:	90                   	nop$/;"	l
dd	gettid.asm	/^  dd:	89 d7                	mov    %edx,%edi$/;"	l
dd	halt.asm	/^  dd:	89 d7                	mov    %edx,%edi$/;"	l
dd	mkdir.asm	/^  dd:	84 c0                	test   %al,%al$/;"	l
dd	ps.asm	/^  dd:	90                   	nop$/;"	l
dd	rm.asm	/^  dd:	84 c0                	test   %al,%al$/;"	l
dd	setnice.asm	/^  dd:	31 c0                	xor    %eax,%eax$/;"	l
dd	thread_create.asm	/^  dd:	90                   	nop$/;"	l
dd	thread_exit.asm	/^  dd:	89 d7                	mov    %edx,%edi$/;"	l
dd	thread_join.asm	/^  dd:	90                   	nop$/;"	l
dd	zombie.asm	/^  dd:	90                   	nop$/;"	l
dd0	usertests.asm	/^     dd0:	85 db                	test   %ebx,%ebx$/;"	l
dd1	sh.asm	/^     dd1:	c3                   	ret    $/;"	l
dd2	sh.asm	/^     dd2:	b8 18 00 00 00       	mov    $0x18,%eax$/;"	l
dd2	usertests.asm	/^     dd2:	75 ec                	jne    dc0 <mem+0x50>$/;"	l
dd4	usertests.asm	/^     dd4:	83 ec 0c             	sub    $0xc,%esp$/;"	l
dd7	sh.asm	/^     dd7:	cd 40                	int    $0x40$/;"	l
dd7	usertests.asm	/^     dd7:	68 00 50 00 00       	push   $0x5000$/;"	l
dd9	sh.asm	/^     dd9:	c3                   	ret    $/;"	l
dda	sh.asm	/^     dda:	b8 19 00 00 00       	mov    $0x19,%eax$/;"	l
ddc	usertests.asm	/^     ddc:	e8 af 2e 00 00       	call   3c90 <malloc>$/;"	l
ddf	sh.asm	/^     ddf:	cd 40                	int    $0x40$/;"	l
de	getnice.asm	/^  de:	90                   	nop$/;"	l
de	grep.asm	/^  de:	74 0c                	je     ec <matchstar+0x3c>$/;"	l
de	ls.asm	/^  de:	52                   	push   %edx$/;"	l
de	ps.asm	/^  de:	90                   	nop$/;"	l
de	stressfs.asm	/^  de:	59                   	pop    %ecx$/;"	l
de	test.asm	/^  de:	83 05 40 0d 00 00 01 	addl   $0x1,0xd40$/;"	l
de	thread_create.asm	/^  de:	90                   	nop$/;"	l
de	thread_join.asm	/^  de:	90                   	nop$/;"	l
de	wc.asm	/^  de:	7e 5f                	jle    13f <wc+0x9f>$/;"	l
de	zombie.asm	/^  de:	90                   	nop$/;"	l
de1	sh.asm	/^     de1:	c3                   	ret    $/;"	l
de1	usertests.asm	/^     de1:	83 c4 10             	add    $0x10,%esp$/;"	l
de2	sh.asm	/^     de2:	b8 1a 00 00 00       	mov    $0x1a,%eax$/;"	l
de4	usertests.asm	/^     de4:	85 c0                	test   %eax,%eax$/;"	l
de6	usertests.asm	/^     de6:	74 30                	je     e18 <mem+0xa8>$/;"	l
de7	sh.asm	/^     de7:	cd 40                	int    $0x40$/;"	l
de8	usertests.asm	/^     de8:	83 ec 0c             	sub    $0xc,%esp$/;"	l
de9	sh.asm	/^     de9:	c3                   	ret    $/;"	l
dea	sh.asm	/^     dea:	b8 1b 00 00 00       	mov    $0x1b,%eax$/;"	l
deallocuvm	fmt/vm.c	/^1961 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)$/;"	f
deallocuvm	vm.c	/^deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)$/;"	f
deb	usertests.asm	/^     deb:	50                   	push   %eax$/;"	l
dec	usertests.asm	/^     dec:	e8 0f 2e 00 00       	call   3c00 <free>$/;"	l
def	sh.asm	/^     def:	cd 40                	int    $0x40$/;"	l
default	kernel.asm	/^    default:$/;"	l
default	kernel.asm	/^  default:$/;"	l
default	sh.asm	/^  default:$/;"	l
dev	buf.h	/^  uint dev;$/;"	m	struct:buf
dev	file.h	/^  uint dev;           \/\/ Device number$/;"	m	struct:inode
dev	fmt/buf.h	/^4402   uint dev;$/;"	m	struct:buf
dev	fmt/file.h	/^4713   uint dev;           \/\/ Device number$/;"	m	struct:inode
dev	fmt/log.c	/^5294   int dev;$/;"	m	struct:log	file:
dev	fmt/stat.h	/^4556   int dev;     \/\/ File system's disk device$/;"	m	struct:stat
dev	log.c	/^  int dev;$/;"	m	struct:log	file:
dev	stat.h	/^  int dev;     \/\/ File system's disk device$/;"	m	struct:stat
devsw	file.c	/^struct devsw devsw[NDEV];$/;"	v	typeref:struct:devsw
devsw	file.h	/^struct devsw {$/;"	s
devsw	fmt/file.c	/^6412 struct devsw devsw[NDEV];$/;"	v	typeref:struct:devsw
devsw	fmt/file.h	/^4729 struct devsw {$/;"	s
df	getnice.asm	/^  df:	90                   	nop$/;"	l
df	gettid.asm	/^  df:	fc                   	cld    $/;"	l
df	halt.asm	/^  df:	fc                   	cld    $/;"	l
df	ls.asm	/^  df:	6a 20                	push   $0x20$/;"	l
df	mkdir.asm	/^  df:	74 0f                	je     f0 <strcmp+0x40>$/;"	l
df	ps.asm	/^  df:	90                   	nop$/;"	l
df	rm.asm	/^  df:	74 0f                	je     f0 <strcmp+0x40>$/;"	l
df	setnice.asm	/^  df:	5d                   	pop    %ebp$/;"	l
df	sh.asm	/^      df:	83 c4 10             	add    $0x10,%esp$/;"	l
df	stressfs.asm	/^  df:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax$/;"	l
df	thread_create.asm	/^  df:	90                   	nop$/;"	l
df	thread_exit.asm	/^  df:	fc                   	cld    $/;"	l
df	thread_join.asm	/^  df:	90                   	nop$/;"	l
df	zombie.asm	/^  df:	90                   	nop$/;"	l
df1	sh.asm	/^     df1:	c3                   	ret    $/;"	l
df1	usertests.asm	/^     df1:	58                   	pop    %eax$/;"	l
df2	sh.asm	/^     df2:	b8 1c 00 00 00       	mov    $0x1c,%eax$/;"	l
df2	usertests.asm	/^     df2:	5a                   	pop    %edx$/;"	l
df3	usertests.asm	/^     df3:	68 a4 41 00 00       	push   $0x41a4$/;"	l
df7	sh.asm	/^     df7:	cd 40                	int    $0x40$/;"	l
df8	usertests.asm	/^     df8:	6a 01                	push   $0x1$/;"	l
df9	sh.asm	/^     df9:	c3                   	ret    $/;"	l
dfa	sh.asm	/^     dfa:	b8 1d 00 00 00       	mov    $0x1d,%eax$/;"	l
dfa	usertests.asm	/^     dfa:	e8 61 2c 00 00       	call   3a60 <printf>$/;"	l
dff	sh.asm	/^     dff:	cd 40                	int    $0x40$/;"	l
dff	usertests.asm	/^     dff:	e8 9e 2a 00 00       	call   38a2 <exit>$/;"	l
dinode	fmt/fs.h	/^4628 struct dinode {$/;"	s
dinode	fs.h	/^struct dinode {$/;"	s
dip	kernel.asm	/^    dip = (struct dinode*)bp->data + inum%IPB;$/;"	d
dip	kernel.asm	/^    dip = (struct dinode*)bp->data + ip->inum%IPB;$/;"	d
dip	kernel.asm	/^  dip = (struct dinode*)bp->data + ip->inum%IPB;$/;"	d
dirent	fmt/fs.h	/^4665 struct dirent {$/;"	s
dirent	fs.h	/^struct dirent {$/;"	s
dirfile	usertests.c	/^dirfile(void)$/;"	f
dirlink	fmt/fs.c	/^6202 dirlink(struct inode *dp, char *name, uint inum)$/;"	f
dirlink	fs.c	/^dirlink(struct inode *dp, char *name, uint inum)$/;"	f
dirlookup	fmt/fs.c	/^6161 dirlookup(struct inode *dp, char *name, uint *poff)$/;"	f
dirlookup	fs.c	/^dirlookup(struct inode *dp, char *name, uint *poff)$/;"	f
dirtest	usertests.c	/^void dirtest(void)$/;"	f
disksize	memide.c	/^static int disksize;$/;"	v	file:
do_commit	kernel.asm	/^    do_commit = 1;$/;"	d
doprocdump	kernel.asm	/^      doprocdump = 1;$/;"	d
dpl	fmt/mmu.h	/^0731   uint dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:segdesc
dpl	fmt/mmu.h	/^0862   uint dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:gatedesc
dpl	mmu.h	/^  uint dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:gatedesc
dpl	mmu.h	/^  uint dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:segdesc
ds	fmt/mmu.h	/^0842   ushort ds;$/;"	m	struct:taskstate
ds	fmt/x86.h	/^0620   ushort ds;$/;"	m	struct:trapframe
ds	mmu.h	/^  ushort ds;$/;"	m	struct:taskstate
ds	x86.h	/^  ushort ds;$/;"	m	struct:trapframe
dst	cat.asm	/^  dst = vdst;$/;"	d
dst	echo.asm	/^  dst = vdst;$/;"	d
dst	forktest.asm	/^  dst = vdst;$/;"	d
dst	getnice.asm	/^  dst = vdst;$/;"	d
dst	gettid.asm	/^  dst = vdst;$/;"	d
dst	grep.asm	/^  dst = vdst;$/;"	d
dst	halt.asm	/^  dst = vdst;$/;"	d
dst	init.asm	/^  dst = vdst;$/;"	d
dst	kill.asm	/^  dst = vdst;$/;"	d
dst	ln.asm	/^  dst = vdst;$/;"	d
dst	ls.asm	/^  dst = vdst;$/;"	d
dst	mkdir.asm	/^  dst = vdst;$/;"	d
dst	ps.asm	/^  dst = vdst;$/;"	d
dst	rm.asm	/^  dst = vdst;$/;"	d
dst	setnice.asm	/^  dst = vdst;$/;"	d
dst	sh.asm	/^  dst = vdst;$/;"	d
dst	stressfs.asm	/^  dst = vdst;$/;"	d
dst	test.asm	/^  dst = vdst;$/;"	d
dst	thread_create.asm	/^  dst = vdst;$/;"	d
dst	thread_exit.asm	/^  dst = vdst;$/;"	d
dst	thread_join.asm	/^  dst = vdst;$/;"	d
dst	usertests.asm	/^  dst = vdst;$/;"	d
dst	wc.asm	/^  dst = vdst;$/;"	d
dst	zombie.asm	/^  dst = vdst;$/;"	d
e	cat.asm	/^   e:	56                   	push   %esi$/;"	l
e	console.c	/^  uint e;  \/\/ Edit index$/;"	m	struct:__anon14	file:
e	echo.asm	/^   e:	56                   	push   %esi$/;"	l
e	fmt/console.c	/^8721   uint e;  \/\/ Edit index$/;"	m	struct:__anon6	file:
e	forktest.asm	/^   e:	83 ec 04             	sub    $0x4,%esp$/;"	l
e	getnice.asm	/^   e:	83 ec 10             	sub    $0x10,%esp$/;"	l
e	gettid.asm	/^   e:	83 ec 04             	sub    $0x4,%esp$/;"	l
e	grep.asm	/^   e:	56                   	push   %esi$/;"	l
e	halt.asm	/^   e:	83 ec 04             	sub    $0x4,%esp$/;"	l
e	init.asm	/^   e:	51                   	push   %ecx$/;"	l
e	kernel.asm	/^  e = addr+len;$/;"	d
e	kill.asm	/^   e:	56                   	push   %esi$/;"	l
e	ln.asm	/^   e:	89 e5                	mov    %esp,%ebp$/;"	l
e	ls.asm	/^   e:	56                   	push   %esi$/;"	l
e	mkdir.asm	/^   e:	56                   	push   %esi$/;"	l
e	ps.asm	/^   e:	83 ec 10             	sub    $0x10,%esp$/;"	l
e	rm.asm	/^   e:	56                   	push   %esi$/;"	l
e	setnice.asm	/^   e:	53                   	push   %ebx$/;"	l
e	sh.asm	/^       e:	83 ec 04             	sub    $0x4,%esp$/;"	l
e	test.asm	/^   e:	56                   	push   %esi$/;"	l
e	thread_create.asm	/^   e:	83 ec 08             	sub    $0x8,%esp$/;"	l
e	thread_exit.asm	/^   e:	83 ec 10             	sub    $0x10,%esp$/;"	l
e	thread_join.asm	/^   e:	51                   	push   %ecx$/;"	l
e	usertests.asm	/^       e:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e	wc.asm	/^   e:	56                   	push   %esi$/;"	l
e	zombie.asm	/^   e:	83 ec 04             	sub    $0x4,%esp$/;"	l
e0	cat.asm	/^  e0:	68 30 08 00 00       	push   $0x830$/;"	l
e0	echo.asm	/^  e0:	31 c0                	xor    %eax,%eax$/;"	l
e0	forktest.asm	/^  e0:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e0	getnice.asm	/^  e0:	55                   	push   %ebp$/;"	l
e0	gettid.asm	/^  e0:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
e0	grep.asm	/^  e0:	83 c3 01             	add    $0x1,%ebx$/;"	l
e0	halt.asm	/^  e0:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
e0	init.asm	/^  e0:	50                   	push   %eax$/;"	l
e0	kill.asm	/^  e0:	55                   	push   %ebp$/;"	l
e0	ln.asm	/^  e0:	55                   	push   %ebp$/;"	l
e0	ps.asm	/^  e0:	55                   	push   %ebp$/;"	l
e0	setnice.asm	/^  e0:	c3                   	ret    $/;"	l
e0	thread_create.asm	/^  e0:	55                   	push   %ebp$/;"	l
e0	thread_exit.asm	/^  e0:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
e0	thread_join.asm	/^  e0:	55                   	push   %ebp$/;"	l
e0	wc.asm	/^  e0:	31 ff                	xor    %edi,%edi$/;"	l
e0	zombie.asm	/^  e0:	55                   	push   %ebp$/;"	l
e01	sh.asm	/^     e01:	c3                   	ret    $/;"	l
e02	sh.asm	/^     e02:	b8 1e 00 00 00       	mov    $0x1e,%eax$/;"	l
e04	usertests.asm	/^     e04:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
e07	sh.asm	/^     e07:	cd 40                	int    $0x40$/;"	l
e08	usertests.asm	/^     e08:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
e09	sh.asm	/^     e09:	c3                   	ret    $/;"	l
e0a	sh.asm	/^     e0a:	b8 1f 00 00 00       	mov    $0x1f,%eax$/;"	l
e0b	usertests.asm	/^     e0b:	5b                   	pop    %ebx$/;"	l
e0c	usertests.asm	/^     e0c:	5e                   	pop    %esi$/;"	l
e0d	usertests.asm	/^     e0d:	5f                   	pop    %edi$/;"	l
e0e	usertests.asm	/^     e0e:	5d                   	pop    %ebp$/;"	l
e0f	sh.asm	/^     e0f:	cd 40                	int    $0x40$/;"	l
e0f	usertests.asm	/^     e0f:	e9 96 2a 00 00       	jmp    38aa <wait>$/;"	l
e1	getnice.asm	/^  e1:	89 e5                	mov    %esp,%ebp$/;"	l
e1	init.asm	/^  e1:	6a 01                	push   $0x1$/;"	l
e1	kill.asm	/^  e1:	89 e5                	mov    %esp,%ebp$/;"	l
e1	ln.asm	/^  e1:	89 e5                	mov    %esp,%ebp$/;"	l
e1	ls.asm	/^  e1:	50                   	push   %eax$/;"	l
e1	mkdir.asm	/^  e1:	89 f1                	mov    %esi,%ecx$/;"	l
e1	ps.asm	/^  e1:	89 e5                	mov    %esp,%ebp$/;"	l
e1	rm.asm	/^  e1:	89 f1                	mov    %esi,%ecx$/;"	l
e1	setnice.asm	/^  e1:	eb 0d                	jmp    f0 <memset>$/;"	l
e1	thread_create.asm	/^  e1:	89 e5                	mov    %esp,%ebp$/;"	l
e1	thread_join.asm	/^  e1:	89 e5                	mov    %esp,%ebp$/;"	l
e1	usertests.asm	/^      e1:	e8 0a 1c 00 00       	call   1cf0 <subdir>$/;"	l
e1	zombie.asm	/^  e1:	89 e5                	mov    %esp,%ebp$/;"	l
e11	sh.asm	/^     e11:	c3                   	ret    $/;"	l
e12	sh.asm	/^     e12:	b8 20 00 00 00       	mov    $0x20,%eax$/;"	l
e14	usertests.asm	/^     e14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
e17	sh.asm	/^     e17:	cd 40                	int    $0x40$/;"	l
e18	usertests.asm	/^     e18:	83 ec 08             	sub    $0x8,%esp$/;"	l
e19	sh.asm	/^     e19:	c3                   	ret    $/;"	l
e1a	sh.asm	/^     e1a:	b8 21 00 00 00       	mov    $0x21,%eax$/;"	l
e1b	usertests.asm	/^     e1b:	68 8a 41 00 00       	push   $0x418a$/;"	l
e1f	sh.asm	/^     e1f:	cd 40                	int    $0x40$/;"	l
e2	echo.asm	/^  e2:	29 d8                	sub    %ebx,%eax$/;"	l
e2	gettid.asm	/^  e2:	89 d0                	mov    %edx,%eax$/;"	l
e2	halt.asm	/^  e2:	89 d0                	mov    %edx,%eax$/;"	l
e2	ls.asm	/^  e2:	e8 09 03 00 00       	call   3f0 <memset>$/;"	l
e2	sh.asm	/^      e2:	eb 83                	jmp    67 <main+0x67>$/;"	l
e2	thread_exit.asm	/^  e2:	89 d0                	mov    %edx,%eax$/;"	l
e2	wc.asm	/^  e2:	eb 0e                	jmp    f2 <wc+0x52>$/;"	l
e20	usertests.asm	/^     e20:	6a 01                	push   $0x1$/;"	l
e21	sh.asm	/^     e21:	c3                   	ret    $/;"	l
e22	sh.asm	/^     e22:	b8 22 00 00 00       	mov    $0x22,%eax$/;"	l
e22	usertests.asm	/^     e22:	e8 39 2c 00 00       	call   3a60 <printf>$/;"	l
e27	sh.asm	/^     e27:	cd 40                	int    $0x40$/;"	l
e27	usertests.asm	/^     e27:	89 34 24             	mov    %esi,(%esp)$/;"	l
e29	sh.asm	/^     e29:	c3                   	ret    $/;"	l
e2a	sh.asm	/^     e2a:	b8 23 00 00 00       	mov    $0x23,%eax$/;"	l
e2a	usertests.asm	/^     e2a:	e8 a3 2a 00 00       	call   38d2 <kill>$/;"	l
e2f	sh.asm	/^     e2f:	cd 40                	int    $0x40$/;"	l
e2f	usertests.asm	/^     e2f:	e8 6e 2a 00 00       	call   38a2 <exit>$/;"	l
e3	forktest.asm	/^  e3:	68 e4 04 00 00       	push   $0x4e4$/;"	l
e3	getnice.asm	/^  e3:	57                   	push   %edi$/;"	l
e3	grep.asm	/^  e3:	83 fe 2e             	cmp    $0x2e,%esi$/;"	l
e3	init.asm	/^  e3:	6a 01                	push   $0x1$/;"	l
e3	kill.asm	/^  e3:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
e3	ln.asm	/^  e3:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
e3	mkdir.asm	/^  e3:	38 d8                	cmp    %bl,%al$/;"	l
e3	ps.asm	/^  e3:	57                   	push   %edi$/;"	l
e3	rm.asm	/^  e3:	38 d8                	cmp    %bl,%al$/;"	l
e3	setnice.asm	/^  e3:	90                   	nop$/;"	l
e3	thread_create.asm	/^  e3:	57                   	push   %edi$/;"	l
e3	thread_join.asm	/^  e3:	57                   	push   %edi$/;"	l
e3	zombie.asm	/^  e3:	57                   	push   %edi$/;"	l
e31	sh.asm	/^     e31:	c3                   	ret    $/;"	l
e32	sh.asm	/^     e32:	66 90                	xchg   %ax,%ax$/;"	l
e34	sh.asm	/^     e34:	66 90                	xchg   %ax,%ax$/;"	l
e34	usertests.asm	/^     e34:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
e36	sh.asm	/^     e36:	66 90                	xchg   %ax,%ax$/;"	l
e38	sh.asm	/^     e38:	66 90                	xchg   %ax,%ax$/;"	l
e3a	sh.asm	/^     e3a:	66 90                	xchg   %ax,%ax$/;"	l
e3a	usertests.asm	/^     e3a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi$/;"	l
e3c	sh.asm	/^     e3c:	66 90                	xchg   %ax,%ax$/;"	l
e3e	sh.asm	/^     e3e:	66 90                	xchg   %ax,%ax$/;"	l
e4	echo.asm	/^  e4:	5b                   	pop    %ebx$/;"	l
e4	getnice.asm	/^  e4:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
e4	gettid.asm	/^  e4:	5f                   	pop    %edi$/;"	l
e4	halt.asm	/^  e4:	5f                   	pop    %edi$/;"	l
e4	ps.asm	/^  e4:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
e4	setnice.asm	/^  e4:	90                   	nop$/;"	l
e4	sh.asm	/^      e4:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e4	thread_create.asm	/^  e4:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
e4	thread_exit.asm	/^  e4:	5f                   	pop    %edi$/;"	l
e4	thread_join.asm	/^  e4:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
e4	wc.asm	/^  e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
e4	zombie.asm	/^  e4:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
e40	sh.asm	/^     e40:	55                   	push   %ebp$/;"	l
e40	usertests.asm	/^     e40:	55                   	push   %ebp$/;"	l
e41	sh.asm	/^     e41:	89 e5                	mov    %esp,%ebp$/;"	l
e41	usertests.asm	/^     e41:	89 e5                	mov    %esp,%ebp$/;"	l
e43	sh.asm	/^     e43:	57                   	push   %edi$/;"	l
e43	usertests.asm	/^     e43:	57                   	push   %edi$/;"	l
e44	sh.asm	/^     e44:	56                   	push   %esi$/;"	l
e44	usertests.asm	/^     e44:	56                   	push   %esi$/;"	l
e45	sh.asm	/^     e45:	53                   	push   %ebx$/;"	l
e45	usertests.asm	/^     e45:	53                   	push   %ebx$/;"	l
e46	sh.asm	/^     e46:	89 c6                	mov    %eax,%esi$/;"	l
e46	usertests.asm	/^     e46:	83 ec 34             	sub    $0x34,%esp$/;"	l
e48	sh.asm	/^     e48:	83 ec 3c             	sub    $0x3c,%esp$/;"	l
e49	usertests.asm	/^     e49:	68 ac 41 00 00       	push   $0x41ac$/;"	l
e4b	sh.asm	/^     e4b:	8b 5d 08             	mov    0x8(%ebp),%ebx$/;"	l
e4e	sh.asm	/^     e4e:	85 db                	test   %ebx,%ebx$/;"	l
e4e	usertests.asm	/^     e4e:	6a 01                	push   $0x1$/;"	l
e5	cat.asm	/^  e5:	6a 01                	push   $0x1$/;"	l
e5	echo.asm	/^  e5:	5e                   	pop    %esi$/;"	l
e5	gettid.asm	/^  e5:	5d                   	pop    %ebp$/;"	l
e5	halt.asm	/^  e5:	5d                   	pop    %ebp$/;"	l
e5	init.asm	/^  e5:	68 30 08 00 00       	push   $0x830$/;"	l
e5	mkdir.asm	/^  e5:	74 e9                	je     d0 <strcmp+0x20>$/;"	l
e5	rm.asm	/^  e5:	74 e9                	je     d0 <strcmp+0x20>$/;"	l
e5	setnice.asm	/^  e5:	90                   	nop$/;"	l
e5	stressfs.asm	/^  e5:	5b                   	pop    %ebx$/;"	l
e5	test.asm	/^  e5:	e8 96 05 00 00       	call   680 <printf>$/;"	l
e5	thread_exit.asm	/^  e5:	5d                   	pop    %ebp$/;"	l
e50	sh.asm	/^     e50:	74 7e                	je     ed0 <printint+0x90>$/;"	l
e50	usertests.asm	/^     e50:	e8 0b 2c 00 00       	call   3a60 <printf>$/;"	l
e52	sh.asm	/^     e52:	89 d0                	mov    %edx,%eax$/;"	l
e54	sh.asm	/^     e54:	c1 e8 1f             	shr    $0x1f,%eax$/;"	l
e55	usertests.asm	/^     e55:	c7 04 24 bb 41 00 00 	movl   $0x41bb,(%esp)$/;"	l
e57	sh.asm	/^     e57:	84 c0                	test   %al,%al$/;"	l
e59	sh.asm	/^     e59:	74 75                	je     ed0 <printint+0x90>$/;"	l
e5b	sh.asm	/^     e5b:	89 d0                	mov    %edx,%eax$/;"	l
e5c	usertests.asm	/^     e5c:	e8 91 2a 00 00       	call   38f2 <unlink>$/;"	l
e5d	sh.asm	/^     e5d:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)$/;"	l
e6	echo.asm	/^  e6:	5d                   	pop    %ebp$/;"	l
e6	gettid.asm	/^  e6:	c3                   	ret    $/;"	l
e6	grep.asm	/^  e6:	74 e0                	je     c8 <matchstar+0x18>$/;"	l
e6	halt.asm	/^  e6:	c3                   	ret    $/;"	l
e6	kill.asm	/^  e6:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
e6	ln.asm	/^  e6:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
e6	setnice.asm	/^  e6:	90                   	nop$/;"	l
e6	stressfs.asm	/^  e6:	6a 00                	push   $0x0$/;"	l
e6	thread_exit.asm	/^  e6:	c3                   	ret    $/;"	l
e6	usertests.asm	/^      e6:	e8 a5 14 00 00       	call   1590 <linktest>$/;"	l
e61	usertests.asm	/^     e61:	5b                   	pop    %ebx$/;"	l
e62	usertests.asm	/^     e62:	5e                   	pop    %esi$/;"	l
e63	usertests.asm	/^     e63:	68 02 02 00 00       	push   $0x202$/;"	l
e64	sh.asm	/^     e64:	f7 d8                	neg    %eax$/;"	l
e66	sh.asm	/^     e66:	89 75 c0             	mov    %esi,-0x40(%ebp)$/;"	l
e68	usertests.asm	/^     e68:	68 bb 41 00 00       	push   $0x41bb$/;"	l
e69	sh.asm	/^     e69:	31 ff                	xor    %edi,%edi$/;"	l
e6b	sh.asm	/^     e6b:	8d 5d d7             	lea    -0x29(%ebp),%ebx$/;"	l
e6d	usertests.asm	/^     e6d:	e8 70 2a 00 00       	call   38e2 <open>$/;"	l
e6e	sh.asm	/^     e6e:	89 ce                	mov    %ecx,%esi$/;"	l
e7	cat.asm	/^  e7:	e8 24 04 00 00       	call   510 <printf>$/;"	l
e7	echo.asm	/^  e7:	c3                   	ret    $/;"	l
e7	getnice.asm	/^  e7:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
e7	gettid.asm	/^  e7:	89 f6                	mov    %esi,%esi$/;"	l
e7	halt.asm	/^  e7:	89 f6                	mov    %esi,%esi$/;"	l
e7	ls.asm	/^  e7:	83 c4 10             	add    $0x10,%esp$/;"	l
e7	mkdir.asm	/^  e7:	29 d8                	sub    %ebx,%eax$/;"	l
e7	ps.asm	/^  e7:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
e7	rm.asm	/^  e7:	29 d8                	sub    %ebx,%eax$/;"	l
e7	setnice.asm	/^  e7:	90                   	nop$/;"	l
e7	sh.asm	/^      e7:	50                   	push   %eax$/;"	l
e7	thread_create.asm	/^  e7:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
e7	thread_exit.asm	/^  e7:	89 f6                	mov    %esi,%esi$/;"	l
e7	thread_join.asm	/^  e7:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
e7	zombie.asm	/^  e7:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
e70	sh.asm	/^     e70:	eb 08                	jmp    e7a <printint+0x3a>$/;"	l
e72	sh.asm	/^     e72:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
e72	usertests.asm	/^     e72:	83 c4 10             	add    $0x10,%esp$/;"	l
e75	usertests.asm	/^     e75:	85 c0                	test   %eax,%eax$/;"	l
e77	usertests.asm	/^     e77:	0f 88 29 01 00 00    	js     fa6 <sharedfd+0x166>$/;"	l
e78	sh.asm	/^     e78:	89 cf                	mov    %ecx,%edi$/;"	l
e7a	sh.asm	/^     e7a:	31 d2                	xor    %edx,%edx$/;"	l
e7c	sh.asm	/^     e7c:	8d 4f 01             	lea    0x1(%edi),%ecx$/;"	l
e7d	usertests.asm	/^     e7d:	89 c7                	mov    %eax,%edi$/;"	l
e7f	sh.asm	/^     e7f:	f7 f6                	div    %esi$/;"	l
e7f	usertests.asm	/^     e7f:	8d 75 de             	lea    -0x22(%ebp),%esi$/;"	l
e8	echo.asm	/^  e8:	90                   	nop$/;"	l
e8	forktest.asm	/^  e8:	e8 e3 00 00 00       	call   1d0 <strlen>$/;"	l
e8	grep.asm	/^  e8:	39 f2                	cmp    %esi,%edx$/;"	l
e8	setnice.asm	/^  e8:	90                   	nop$/;"	l
e8	sh.asm	/^      e8:	e8 5d 0c 00 00       	call   d4a <close>$/;"	l
e8	stressfs.asm	/^  e8:	50                   	push   %eax$/;"	l
e8	wc.asm	/^  e8:	31 f6                	xor    %esi,%esi$/;"	l
e81	sh.asm	/^     e81:	0f b6 92 f0 12 00 00 	movzbl 0x12f0(%edx),%edx$/;"	l
e82	usertests.asm	/^     e82:	bb e8 03 00 00       	mov    $0x3e8,%ebx$/;"	l
e87	usertests.asm	/^     e87:	e8 0e 2a 00 00       	call   389a <fork>$/;"	l
e88	sh.asm	/^     e88:	85 c0                	test   %eax,%eax$/;"	l
e8a	sh.asm	/^     e8a:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)$/;"	l
e8c	usertests.asm	/^     e8c:	83 f8 01             	cmp    $0x1,%eax$/;"	l
e8d	sh.asm	/^     e8d:	75 e9                	jne    e78 <printint+0x38>$/;"	l
e8f	sh.asm	/^     e8f:	8b 45 c4             	mov    -0x3c(%ebp),%eax$/;"	l
e8f	usertests.asm	/^     e8f:	89 45 d4             	mov    %eax,-0x2c(%ebp)$/;"	l
e9	echo.asm	/^  e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
e9	gettid.asm	/^  e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
e9	halt.asm	/^  e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
e9	kill.asm	/^  e9:	74 12                	je     fd <strlen+0x1d>$/;"	l
e9	ln.asm	/^  e9:	74 12                	je     fd <strlen+0x1d>$/;"	l
e9	mkdir.asm	/^  e9:	5b                   	pop    %ebx$/;"	l
e9	rm.asm	/^  e9:	5b                   	pop    %ebx$/;"	l
e9	setnice.asm	/^  e9:	90                   	nop$/;"	l
e9	stressfs.asm	/^  e9:	bb 14 00 00 00       	mov    $0x14,%ebx$/;"	l
e9	thread_exit.asm	/^  e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
e92	sh.asm	/^     e92:	8b 75 c0             	mov    -0x40(%ebp),%esi$/;"	l
e92	usertests.asm	/^     e92:	19 c0                	sbb    %eax,%eax$/;"	l
e94	usertests.asm	/^     e94:	83 ec 04             	sub    $0x4,%esp$/;"	l
e95	sh.asm	/^     e95:	85 c0                	test   %eax,%eax$/;"	l
e97	sh.asm	/^     e97:	74 08                	je     ea1 <printint+0x61>$/;"	l
e97	usertests.asm	/^     e97:	83 e0 f3             	and    $0xfffffff3,%eax$/;"	l
e99	sh.asm	/^     e99:	c6 44 0d d8 2d       	movb   $0x2d,-0x28(%ebp,%ecx,1)$/;"	l
e9a	usertests.asm	/^     e9a:	6a 0a                	push   $0xa$/;"	l
e9c	usertests.asm	/^     e9c:	83 c0 70             	add    $0x70,%eax$/;"	l
e9e	sh.asm	/^     e9e:	8d 4f 02             	lea    0x2(%edi),%ecx$/;"	l
e9f	usertests.asm	/^     e9f:	50                   	push   %eax$/;"	l
ea	getnice.asm	/^  ea:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ea	grep.asm	/^  ea:	74 dc                	je     c8 <matchstar+0x18>$/;"	l
ea	init.asm	/^  ea:	e8 ab 02 00 00       	call   39a <mknod>$/;"	l
ea	ls.asm	/^  ea:	8d 65 f8             	lea    -0x8(%ebp),%esp$/;"	l
ea	mkdir.asm	/^  ea:	5e                   	pop    %esi$/;"	l
ea	ps.asm	/^  ea:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ea	rm.asm	/^  ea:	5e                   	pop    %esi$/;"	l
ea	setnice.asm	/^  ea:	90                   	nop$/;"	l
ea	test.asm	/^  ea:	c7 04 24 e0 0d 00 00 	movl   $0xde0,(%esp)$/;"	l
ea	thread_create.asm	/^  ea:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ea	thread_join.asm	/^  ea:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ea	wc.asm	/^  ea:	83 c7 01             	add    $0x1,%edi$/;"	l
ea	zombie.asm	/^  ea:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ea0	usertests.asm	/^     ea0:	56                   	push   %esi$/;"	l
ea1	sh.asm	/^     ea1:	8d 7c 0d d7          	lea    -0x29(%ebp,%ecx,1),%edi$/;"	l
ea1	usertests.asm	/^     ea1:	e8 6a 28 00 00       	call   3710 <memset>$/;"	l
ea5	sh.asm	/^     ea5:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
ea6	usertests.asm	/^     ea6:	83 c4 10             	add    $0x10,%esp$/;"	l
ea8	sh.asm	/^     ea8:	0f b6 07             	movzbl (%edi),%eax$/;"	l
ea9	usertests.asm	/^     ea9:	eb 0a                	jmp    eb5 <sharedfd+0x75>$/;"	l
eab	sh.asm	/^     eab:	83 ec 04             	sub    $0x4,%esp$/;"	l
eab	usertests.asm	/^     eab:	90                   	nop$/;"	l
eac	usertests.asm	/^     eac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
eae	sh.asm	/^     eae:	83 ef 01             	sub    $0x1,%edi$/;"	l
eargv	fmt/sh.c	/^9122   char *eargv[MAXARGS];$/;"	m	struct:execcmd	file:
eargv	sh.c	/^  char *eargv[MAXARGS];$/;"	m	struct:execcmd	file:
eax	fmt/mmu.h	/^0828   uint eax;          \/\/ More saved state (registers)$/;"	m	struct:taskstate
eax	fmt/x86.h	/^0611   uint eax;$/;"	m	struct:trapframe
eax	mmu.h	/^  uint eax;          \/\/ More saved state (registers)$/;"	m	struct:taskstate
eax	x86.h	/^  uint eax;$/;"	m	struct:trapframe
eb	kill.asm	/^  eb:	31 d2                	xor    %edx,%edx$/;"	l
eb	ln.asm	/^  eb:	31 d2                	xor    %edx,%edx$/;"	l
eb	mkdir.asm	/^  eb:	5d                   	pop    %ebp$/;"	l
eb	rm.asm	/^  eb:	5d                   	pop    %ebp$/;"	l
eb	setnice.asm	/^  eb:	90                   	nop$/;"	l
eb	usertests.asm	/^      eb:	e8 10 13 00 00       	call   1400 <unlinkread>$/;"	l
eb0	usertests.asm	/^     eb0:	83 eb 01             	sub    $0x1,%ebx$/;"	l
eb1	sh.asm	/^     eb1:	6a 01                	push   $0x1$/;"	l
eb3	sh.asm	/^     eb3:	53                   	push   %ebx$/;"	l
eb3	usertests.asm	/^     eb3:	74 26                	je     edb <sharedfd+0x9b>$/;"	l
eb4	sh.asm	/^     eb4:	56                   	push   %esi$/;"	l
eb5	sh.asm	/^     eb5:	88 45 d7             	mov    %al,-0x29(%ebp)$/;"	l
eb5	usertests.asm	/^     eb5:	83 ec 04             	sub    $0x4,%esp$/;"	l
eb8	sh.asm	/^     eb8:	e8 85 fe ff ff       	call   d42 <write>$/;"	l
eb8	usertests.asm	/^     eb8:	6a 0a                	push   $0xa$/;"	l
eba	usertests.asm	/^     eba:	56                   	push   %esi$/;"	l
ebb	usertests.asm	/^     ebb:	57                   	push   %edi$/;"	l
ebc	usertests.asm	/^     ebc:	e8 01 2a 00 00       	call   38c2 <write>$/;"	l
ebd	sh.asm	/^     ebd:	83 c4 10             	add    $0x10,%esp$/;"	l
ebp	fmt/mmu.h	/^0833   uint *ebp;$/;"	m	struct:taskstate
ebp	fmt/proc.h	/^2330   uint ebp;$/;"	m	struct:context
ebp	fmt/x86.h	/^0606   uint ebp;$/;"	m	struct:trapframe
ebp	kernel.asm	/^    ebp = (uint*)ebp[0]; \/\/ saved %ebp$/;"	d
ebp	kernel.asm	/^  ebp = (uint*)v - 2;$/;"	d
ebp	mmu.h	/^  uint *ebp;$/;"	m	struct:taskstate
ebp	proc.h	/^  uint ebp;$/;"	m	struct:context
ebp	x86.h	/^  uint ebp;$/;"	m	struct:trapframe
ebx	fmt/mmu.h	/^0831   uint ebx;$/;"	m	struct:taskstate
ebx	fmt/proc.h	/^2329   uint ebx;$/;"	m	struct:context
ebx	fmt/x86.h	/^0608   uint ebx;$/;"	m	struct:trapframe
ebx	mmu.h	/^  uint ebx;$/;"	m	struct:taskstate
ebx	proc.h	/^  uint ebx;$/;"	m	struct:context
ebx	x86.h	/^  uint ebx;$/;"	m	struct:trapframe
ec	cat.asm	/^  ec:	e8 61 02 00 00       	call   352 <exit>$/;"	l
ec	grep.asm	/^  ec:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
ec	mkdir.asm	/^  ec:	c3                   	ret    $/;"	l
ec	rm.asm	/^  ec:	c3                   	ret    $/;"	l
ec	setnice.asm	/^  ec:	90                   	nop$/;"	l
ec0	sh.asm	/^     ec0:	39 df                	cmp    %ebx,%edi$/;"	l
ec1	usertests.asm	/^     ec1:	83 c4 10             	add    $0x10,%esp$/;"	l
ec2	sh.asm	/^     ec2:	75 e4                	jne    ea8 <printint+0x68>$/;"	l
ec4	sh.asm	/^     ec4:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
ec4	usertests.asm	/^     ec4:	83 f8 0a             	cmp    $0xa,%eax$/;"	l
ec7	sh.asm	/^     ec7:	5b                   	pop    %ebx$/;"	l
ec7	usertests.asm	/^     ec7:	74 e7                	je     eb0 <sharedfd+0x70>$/;"	l
ec8	sh.asm	/^     ec8:	5e                   	pop    %esi$/;"	l
ec9	sh.asm	/^     ec9:	5f                   	pop    %edi$/;"	l
ec9	usertests.asm	/^     ec9:	83 ec 08             	sub    $0x8,%esp$/;"	l
eca	sh.asm	/^     eca:	5d                   	pop    %ebp$/;"	l
ecb	sh.asm	/^     ecb:	c3                   	ret    $/;"	l
ecc	sh.asm	/^     ecc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
ecc	usertests.asm	/^     ecc:	68 ac 4e 00 00       	push   $0x4eac$/;"	l
echoargv	usertests.c	/^char *echoargv[] = { "echo", "ALL", "TESTS", "PASSED", 0 };$/;"	v
ecmd	sh.asm	/^    ecmd = (struct execcmd*)cmd;$/;"	d
ecx	fmt/mmu.h	/^0829   uint ecx;$/;"	m	struct:taskstate
ecx	fmt/x86.h	/^0610   uint ecx;$/;"	m	struct:trapframe
ecx	mmu.h	/^  uint ecx;$/;"	m	struct:taskstate
ecx	x86.h	/^  uint ecx;$/;"	m	struct:trapframe
ed	forktest.asm	/^  ed:	83 c4 0c             	add    $0xc,%esp$/;"	l
ed	getnice.asm	/^  ed:	89 d7                	mov    %edx,%edi$/;"	l
ed	kill.asm	/^  ed:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
ed	ln.asm	/^  ed:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
ed	ls.asm	/^  ed:	89 d8                	mov    %ebx,%eax$/;"	l
ed	mkdir.asm	/^  ed:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
ed	ps.asm	/^  ed:	89 d7                	mov    %edx,%edi$/;"	l
ed	rm.asm	/^  ed:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
ed	setnice.asm	/^  ed:	90                   	nop$/;"	l
ed	sh.asm	/^      ed:	83 c4 10             	add    $0x10,%esp$/;"	l
ed	thread_create.asm	/^  ed:	89 d7                	mov    %edx,%edi$/;"	l
ed	thread_join.asm	/^  ed:	89 d7                	mov    %edx,%edi$/;"	l
ed	wc.asm	/^  ed:	39 7d e4             	cmp    %edi,-0x1c(%ebp)$/;"	l
ed	zombie.asm	/^  ed:	89 d7                	mov    %edx,%edi$/;"	l
ed0	sh.asm	/^     ed0:	89 d0                	mov    %edx,%eax$/;"	l
ed1	usertests.asm	/^     ed1:	6a 01                	push   $0x1$/;"	l
ed2	sh.asm	/^     ed2:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)$/;"	l
ed3	usertests.asm	/^     ed3:	e8 88 2b 00 00       	call   3a60 <printf>$/;"	l
ed8	usertests.asm	/^     ed8:	83 c4 10             	add    $0x10,%esp$/;"	l
ed9	sh.asm	/^     ed9:	eb 8b                	jmp    e66 <printint+0x26>$/;"	l
edb	sh.asm	/^     edb:	90                   	nop$/;"	l
edb	usertests.asm	/^     edb:	8b 4d d4             	mov    -0x2c(%ebp),%ecx$/;"	l
edc	sh.asm	/^     edc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
ede	usertests.asm	/^     ede:	85 c9                	test   %ecx,%ecx$/;"	l
edi	fmt/mmu.h	/^0835   uint edi;$/;"	m	struct:taskstate
edi	fmt/proc.h	/^2327   uint edi;$/;"	m	struct:context
edi	fmt/x86.h	/^0604   uint edi;$/;"	m	struct:trapframe
edi	mmu.h	/^  uint edi;$/;"	m	struct:taskstate
edi	proc.h	/^  uint edi;$/;"	m	struct:context
edi	x86.h	/^  uint edi;$/;"	m	struct:trapframe
edx	fmt/mmu.h	/^0830   uint edx;$/;"	m	struct:taskstate
edx	fmt/x86.h	/^0609   uint edx;$/;"	m	struct:trapframe
edx	mmu.h	/^  uint edx;$/;"	m	struct:taskstate
edx	x86.h	/^  uint edx;$/;"	m	struct:trapframe
ee	setnice.asm	/^  ee:	90                   	nop$/;"	l
ee	stressfs.asm	/^  ee:	e8 cf 02 00 00       	call   3c2 <open>$/;"	l
ee0	sh.asm	/^     ee0:	55                   	push   %ebp$/;"	l
ee0	usertests.asm	/^     ee0:	0f 84 f4 00 00 00    	je     fda <sharedfd+0x19a>$/;"	l
ee1	sh.asm	/^     ee1:	89 e5                	mov    %esp,%ebp$/;"	l
ee3	sh.asm	/^     ee3:	57                   	push   %edi$/;"	l
ee4	sh.asm	/^     ee4:	56                   	push   %esi$/;"	l
ee5	sh.asm	/^     ee5:	53                   	push   %ebx$/;"	l
ee6	sh.asm	/^     ee6:	8d 45 10             	lea    0x10(%ebp),%eax$/;"	l
ee6	usertests.asm	/^     ee6:	e8 bf 29 00 00       	call   38aa <wait>$/;"	l
ee9	sh.asm	/^     ee9:	83 ec 2c             	sub    $0x2c,%esp$/;"	l
eeb	usertests.asm	/^     eeb:	83 ec 0c             	sub    $0xc,%esp$/;"	l
eec	sh.asm	/^     eec:	8b 75 0c             	mov    0xc(%ebp),%esi$/;"	l
eee	usertests.asm	/^     eee:	31 db                	xor    %ebx,%ebx$/;"	l
eef	sh.asm	/^     eef:	8b 7d 08             	mov    0x8(%ebp),%edi$/;"	l
ef	getnice.asm	/^  ef:	fc                   	cld    $/;"	l
ef	grep.asm	/^  ef:	5b                   	pop    %ebx$/;"	l
ef	init.asm	/^  ef:	58                   	pop    %eax$/;"	l
ef	ls.asm	/^  ef:	5b                   	pop    %ebx$/;"	l
ef	ps.asm	/^  ef:	fc                   	cld    $/;"	l
ef	setnice.asm	/^  ef:	90                   	nop$/;"	l
ef	thread_create.asm	/^  ef:	fc                   	cld    $/;"	l
ef	thread_join.asm	/^  ef:	fc                   	cld    $/;"	l
ef	zombie.asm	/^  ef:	fc                   	cld    $/;"	l
ef0	usertests.asm	/^     ef0:	57                   	push   %edi$/;"	l
ef1	usertests.asm	/^     ef1:	8d 7d e8             	lea    -0x18(%ebp),%edi$/;"	l
ef2	sh.asm	/^     ef2:	89 45 d0             	mov    %eax,-0x30(%ebp)$/;"	l
ef4	usertests.asm	/^     ef4:	e8 d1 29 00 00       	call   38ca <close>$/;"	l
ef5	sh.asm	/^     ef5:	0f b6 1e             	movzbl (%esi),%ebx$/;"	l
ef8	sh.asm	/^     ef8:	83 c6 01             	add    $0x1,%esi$/;"	l
ef9	usertests.asm	/^     ef9:	58                   	pop    %eax$/;"	l
efa	usertests.asm	/^     efa:	5a                   	pop    %edx$/;"	l
efb	sh.asm	/^     efb:	84 db                	test   %bl,%bl$/;"	l
efb	usertests.asm	/^     efb:	6a 00                	push   $0x0$/;"	l
efd	sh.asm	/^     efd:	0f 84 b0 00 00 00    	je     fb3 <printf+0xd3>$/;"	l
efd	usertests.asm	/^     efd:	68 bb 41 00 00       	push   $0x41bb$/;"	l
efile	fmt/sh.c	/^9129   char *efile;$/;"	m	struct:redircmd	file:
efile	sh.c	/^  char *efile;$/;"	m	struct:redircmd	file:
eflags	fmt/mmu.h	/^0827   uint eflags;$/;"	m	struct:taskstate
eflags	fmt/x86.h	/^0629   uint eflags;$/;"	m	struct:trapframe
eflags	kernel.asm	/^  eflags = readeflags();$/;"	d
eflags	mmu.h	/^  uint eflags;$/;"	m	struct:taskstate
eflags	x86.h	/^  uint eflags;$/;"	m	struct:trapframe
ehsize	elf.h	/^  ushort ehsize;$/;"	m	struct:elfhdr
ehsize	fmt/elf.h	/^0915   ushort ehsize;$/;"	m	struct:elfhdr
eip	fmt/mmu.h	/^0826   uint *eip;         \/\/ Saved state from last task switch$/;"	m	struct:taskstate
eip	fmt/proc.h	/^2331   uint eip;$/;"	m	struct:context
eip	fmt/x86.h	/^0626   uint eip;$/;"	m	struct:trapframe
eip	mmu.h	/^  uint *eip;         \/\/ Saved state from last task switch$/;"	m	struct:taskstate
eip	proc.h	/^  uint eip;$/;"	m	struct:context
eip	x86.h	/^  uint eip;$/;"	m	struct:trapframe
elf	bootblock.asm	/^  elf = (struct elfhdr*)0x10000;  \/\/ scratch space$/;"	d
elf	elf.h	/^  uchar elf[12];$/;"	m	struct:elfhdr
elf	fmt/elf.h	/^0907   uchar elf[12];$/;"	m	struct:elfhdr
elfhdr	elf.h	/^struct elfhdr {$/;"	s
elfhdr	fmt/elf.h	/^0905 struct elfhdr {$/;"	s
empty	kernel.asm	/^      empty = ip;$/;"	d
empty	kernel.asm	/^  empty = 0;$/;"	d
end_op	fmt/log.c	/^5403 end_op(void)$/;"	f
end_op	log.c	/^end_op(void)$/;"	f
entry	bootblock.asm	/^  entry = (void(*)(void))(elf->entry);$/;"	d
entry	elf.h	/^  uint entry;$/;"	m	struct:elfhdr
entry	entry.S	/^entry:$/;"	l
entry	fmt/elf.h	/^0911   uint entry;$/;"	m	struct:elfhdr
entry	fmt/mp.h	/^7621   ushort entry;                 \/\/ entry count$/;"	m	struct:mpconf
entry	kernel.asm	/^entry:$/;"	l
entry	mp.h	/^  ushort entry;                 \/\/ entry count$/;"	m	struct:mpconf
entrypgdir	fmt/main.c	/^1260 pde_t entrypgdir[];  \/\/ For entry.S$/;"	v
entrypgdir	fmt/main.c	/^1306 pde_t entrypgdir[NPDENTRIES] = {$/;"	v
entrypgdir	main.c	/^pde_t entrypgdir[NPDENTRIES] = {$/;"	v
entrypgdir	main.c	/^pde_t entrypgdir[];  \/\/ For entry.S$/;"	v
ep	kernel.asm	/^  ep = (char*)curproc->sz;$/;"	d
epa	bootblock.asm	/^  epa = pa + count;$/;"	d
eph	bootblock.asm	/^  eph = ph + elf->phnum;$/;"	d
err	fmt/x86.h	/^0625   uint err;$/;"	m	struct:trapframe
err	x86.h	/^  uint err;$/;"	m	struct:trapframe
es	fmt/mmu.h	/^0836   ushort es;         \/\/ Even more saved state (segment selectors)$/;"	m	struct:taskstate
es	fmt/x86.h	/^0618   ushort es;$/;"	m	struct:trapframe
es	mmu.h	/^  ushort es;         \/\/ Even more saved state (segment selectors)$/;"	m	struct:taskstate
es	sh.asm	/^  es = s + strlen(s);$/;"	d
es	x86.h	/^  ushort es;$/;"	m	struct:trapframe
esi	fmt/mmu.h	/^0834   uint esi;$/;"	m	struct:taskstate
esi	fmt/proc.h	/^2328   uint esi;$/;"	m	struct:context
esi	fmt/x86.h	/^0605   uint esi;$/;"	m	struct:trapframe
esi	mmu.h	/^  uint esi;$/;"	m	struct:taskstate
esi	proc.h	/^  uint esi;$/;"	m	struct:context
esi	x86.h	/^  uint esi;$/;"	m	struct:trapframe
esp	fmt/mmu.h	/^0832   uint *esp;$/;"	m	struct:taskstate
esp	fmt/x86.h	/^0632   uint esp;$/;"	m	struct:trapframe
esp	mmu.h	/^  uint *esp;$/;"	m	struct:taskstate
esp	x86.h	/^  uint esp;$/;"	m	struct:trapframe
esp0	fmt/mmu.h	/^0816   uint esp0;         \/\/ Stack pointers and segment selectors$/;"	m	struct:taskstate
esp0	mmu.h	/^  uint esp0;         \/\/ Stack pointers and segment selectors$/;"	m	struct:taskstate
esp1	fmt/mmu.h	/^0819   uint *esp1;$/;"	m	struct:taskstate
esp1	mmu.h	/^  uint *esp1;$/;"	m	struct:taskstate
esp2	fmt/mmu.h	/^0822   uint *esp2;$/;"	m	struct:taskstate
esp2	mmu.h	/^  uint *esp2;$/;"	m	struct:taskstate
exec	exec.c	/^exec(char *path, char **argv)$/;"	f
exec	fmt/exec.c	/^7160 exec(char *path, char **argv)$/;"	f
execcmd	fmt/sh.c	/^9119 struct execcmd {$/;"	s	file:
execcmd	fmt/sh.c	/^9303 execcmd(void)$/;"	f
execcmd	sh.c	/^execcmd(void)$/;"	f
execcmd	sh.c	/^struct execcmd {$/;"	s	file:
exectest	usertests.c	/^exectest(void)$/;"	f
exit	fmt/proc.c	/^2670 exit(void)$/;"	f
exit	initcode.S	/^exit:$/;"	l
exit	initcode.asm	/^exit:$/;"	l
exit	proc.c	/^exit(void)$/;"	f
exitiputtest	usertests.c	/^exitiputtest(void)$/;"	f
exitwait	usertests.c	/^exitwait(void)$/;"	f
f	Makefile	/^	dd if=\/dev\/zero of=xv6.img count=10000 status=none$/;"	m
f	Makefile	/^	dd if=\/dev\/zero of=xv6memfs.img count=10000 status=none$/;"	m
f	Makefile	/^	dd if=bootblock of=xv6.img conv=notrunc status=none$/;"	m
f	Makefile	/^	dd if=bootblock of=xv6memfs.img conv=notrunc status=none$/;"	m
f	Makefile	/^	dd if=kernel of=xv6.img seek=1 conv=notrunc status=none$/;"	m
f	Makefile	/^	dd if=kernelmemfs of=xv6memfs.img seek=1 conv=notrunc status=none$/;"	m
f	cat.asm	/^   f:	53                   	push   %ebx$/;"	l
f	echo.asm	/^   f:	53                   	push   %ebx$/;"	l
f	grep.asm	/^   f:	53                   	push   %ebx$/;"	l
f	init.asm	/^   f:	83 ec 08             	sub    $0x8,%esp$/;"	l
f	kill.asm	/^   f:	53                   	push   %ebx$/;"	l
f	ls.asm	/^   f:	53                   	push   %ebx$/;"	l
f	mkdir.asm	/^   f:	53                   	push   %ebx$/;"	l
f	rm.asm	/^   f:	53                   	push   %ebx$/;"	l
f	setnice.asm	/^   f:	51                   	push   %ecx$/;"	l
f	stressfs.asm	/^   f:	55                   	push   %ebp$/;"	l
f	test.asm	/^   f:	53                   	push   %ebx$/;"	l
f	thread_join.asm	/^   f:	8b 41 04             	mov    0x4(%ecx),%eax$/;"	l
f	wc.asm	/^   f:	53                   	push   %ebx$/;"	l
f0	echo.asm	/^  f0:	55                   	push   %ebp$/;"	l
f0	forktest.asm	/^  f0:	50                   	push   %eax$/;"	l
f0	getnice.asm	/^  f0:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
f0	gettid.asm	/^  f0:	55                   	push   %ebp$/;"	l
f0	grep.asm	/^  f0:	5e                   	pop    %esi$/;"	l
f0	halt.asm	/^  f0:	55                   	push   %ebp$/;"	l
f0	init.asm	/^  f0:	5a                   	pop    %edx$/;"	l
f0	kill.asm	/^  f0:	83 c2 01             	add    $0x1,%edx$/;"	l
f0	ln.asm	/^  f0:	83 c2 01             	add    $0x1,%edx$/;"	l
f0	ls.asm	/^  f0:	5e                   	pop    %esi$/;"	l
f0	mkdir.asm	/^  f0:	31 c0                	xor    %eax,%eax$/;"	l
f0	ps.asm	/^  f0:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
f0	rm.asm	/^  f0:	31 c0                	xor    %eax,%eax$/;"	l
f0	setnice.asm	/^  f0:	55                   	push   %ebp$/;"	l
f0	sh.asm	/^      f0:	e9 72 ff ff ff       	jmp    67 <main+0x67>$/;"	l
f0	thread_create.asm	/^  f0:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
f0	thread_exit.asm	/^  f0:	55                   	push   %ebp$/;"	l
f0	thread_join.asm	/^  f0:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
f0	usertests.asm	/^      f0:	e8 4b 28 00 00       	call   2940 <dirfile>$/;"	l
f0	wc.asm	/^  f0:	74 3a                	je     12c <wc+0x8c>$/;"	l
f0	zombie.asm	/^  f0:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
f02	usertests.asm	/^     f02:	e8 db 29 00 00       	call   38e2 <open>$/;"	l
f03	sh.asm	/^     f03:	31 d2                	xor    %edx,%edx$/;"	l
f05	sh.asm	/^     f05:	eb 39                	jmp    f40 <printf+0x60>$/;"	l
f07	sh.asm	/^     f07:	89 f6                	mov    %esi,%esi$/;"	l
f07	usertests.asm	/^     f07:	83 c4 10             	add    $0x10,%esp$/;"	l
f09	sh.asm	/^     f09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
f0a	usertests.asm	/^     f0a:	31 d2                	xor    %edx,%edx$/;"	l
f0c	usertests.asm	/^     f0c:	85 c0                	test   %eax,%eax$/;"	l
f0e	usertests.asm	/^     f0e:	89 45 d0             	mov    %eax,-0x30(%ebp)$/;"	l
f1	cat.asm	/^  f1:	83 ec 08             	sub    $0x8,%esp$/;"	l
f1	echo.asm	/^  f1:	89 e5                	mov    %esp,%ebp$/;"	l
f1	forktest.asm	/^  f1:	68 e4 04 00 00       	push   $0x4e4$/;"	l
f1	gettid.asm	/^  f1:	89 e5                	mov    %esp,%ebp$/;"	l
f1	grep.asm	/^  f1:	5f                   	pop    %edi$/;"	l
f1	halt.asm	/^  f1:	89 e5                	mov    %esp,%ebp$/;"	l
f1	init.asm	/^  f1:	6a 02                	push   $0x2$/;"	l
f1	ls.asm	/^  f1:	5d                   	pop    %ebp$/;"	l
f1	setnice.asm	/^  f1:	89 e5                	mov    %esp,%ebp$/;"	l
f1	test.asm	/^  f1:	e8 d4 04 00 00       	call   5ca <cond_signal>$/;"	l
f1	thread_exit.asm	/^  f1:	89 e5                	mov    %esp,%ebp$/;"	l
f10	sh.asm	/^     f10:	83 f8 25             	cmp    $0x25,%eax$/;"	l
f11	usertests.asm	/^     f11:	0f 88 a9 00 00 00    	js     fc0 <sharedfd+0x180>$/;"	l
f13	sh.asm	/^     f13:	89 55 d4             	mov    %edx,-0x2c(%ebp)$/;"	l
f16	sh.asm	/^     f16:	ba 25 00 00 00       	mov    $0x25,%edx$/;"	l
f17	usertests.asm	/^     f17:	89 f6                	mov    %esi,%esi$/;"	l
f19	usertests.asm	/^     f19:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
f1b	sh.asm	/^     f1b:	74 18                	je     f35 <printf+0x55>$/;"	l
f1d	sh.asm	/^     f1d:	8d 45 e2             	lea    -0x1e(%ebp),%eax$/;"	l
f2	getnice.asm	/^  f2:	89 d0                	mov    %edx,%eax$/;"	l
f2	grep.asm	/^  f2:	5d                   	pop    %ebp$/;"	l
f2	ls.asm	/^  f2:	c3                   	ret    $/;"	l
f2	mkdir.asm	/^  f2:	29 d8                	sub    %ebx,%eax$/;"	l
f2	ps.asm	/^  f2:	89 d0                	mov    %edx,%eax$/;"	l
f2	rm.asm	/^  f2:	29 d8                	sub    %ebx,%eax$/;"	l
f2	thread_create.asm	/^  f2:	89 d0                	mov    %edx,%eax$/;"	l
f2	thread_join.asm	/^  f2:	89 d0                	mov    %edx,%eax$/;"	l
f2	wc.asm	/^  f2:	0f be 87 e0 0b 00 00 	movsbl 0xbe0(%edi),%eax$/;"	l
f2	zombie.asm	/^  f2:	89 d0                	mov    %edx,%eax$/;"	l
f20	sh.asm	/^     f20:	83 ec 04             	sub    $0x4,%esp$/;"	l
f20	usertests.asm	/^     f20:	83 ec 04             	sub    $0x4,%esp$/;"	l
f23	sh.asm	/^     f23:	88 5d e2             	mov    %bl,-0x1e(%ebp)$/;"	l
f23	usertests.asm	/^     f23:	89 55 d4             	mov    %edx,-0x2c(%ebp)$/;"	l
f26	sh.asm	/^     f26:	6a 01                	push   $0x1$/;"	l
f26	usertests.asm	/^     f26:	6a 0a                	push   $0xa$/;"	l
f28	sh.asm	/^     f28:	50                   	push   %eax$/;"	l
f28	usertests.asm	/^     f28:	56                   	push   %esi$/;"	l
f29	sh.asm	/^     f29:	57                   	push   %edi$/;"	l
f29	usertests.asm	/^     f29:	ff 75 d0             	pushl  -0x30(%ebp)$/;"	l
f2a	sh.asm	/^     f2a:	e8 13 fe ff ff       	call   d42 <write>$/;"	l
f2c	usertests.asm	/^     f2c:	e8 89 29 00 00       	call   38ba <read>$/;"	l
f2f	sh.asm	/^     f2f:	8b 55 d4             	mov    -0x2c(%ebp),%edx$/;"	l
f3	echo.asm	/^  f3:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
f3	gettid.asm	/^  f3:	53                   	push   %ebx$/;"	l
f3	grep.asm	/^  f3:	c3                   	ret    $/;"	l
f3	halt.asm	/^  f3:	53                   	push   %ebx$/;"	l
f3	init.asm	/^  f3:	68 30 08 00 00       	push   $0x830$/;"	l
f3	kill.asm	/^  f3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)$/;"	l
f3	ln.asm	/^  f3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)$/;"	l
f3	ls.asm	/^  f3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
f3	setnice.asm	/^  f3:	57                   	push   %edi$/;"	l
f3	stressfs.asm	/^  f3:	83 c4 10             	add    $0x10,%esp$/;"	l
f3	thread_exit.asm	/^  f3:	53                   	push   %ebx$/;"	l
f31	usertests.asm	/^     f31:	83 c4 10             	add    $0x10,%esp$/;"	l
f32	sh.asm	/^     f32:	83 c4 10             	add    $0x10,%esp$/;"	l
f34	usertests.asm	/^     f34:	85 c0                	test   %eax,%eax$/;"	l
f35	sh.asm	/^     f35:	83 c6 01             	add    $0x1,%esi$/;"	l
f36	usertests.asm	/^     f36:	7e 27                	jle    f5f <sharedfd+0x11f>$/;"	l
f38	sh.asm	/^     f38:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx$/;"	l
f38	usertests.asm	/^     f38:	89 f0                	mov    %esi,%eax$/;"	l
f3a	usertests.asm	/^     f3a:	8b 55 d4             	mov    -0x2c(%ebp),%edx$/;"	l
f3c	sh.asm	/^     f3c:	84 db                	test   %bl,%bl$/;"	l
f3d	usertests.asm	/^     f3d:	eb 13                	jmp    f52 <sharedfd+0x112>$/;"	l
f3e	sh.asm	/^     f3e:	74 73                	je     fb3 <printf+0xd3>$/;"	l
f3f	usertests.asm	/^     f3f:	90                   	nop$/;"	l
f4	cat.asm	/^  f4:	68 42 08 00 00       	push   $0x842$/;"	l
f4	getnice.asm	/^  f4:	5f                   	pop    %edi$/;"	l
f4	gettid.asm	/^  f4:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f4	grep.asm	/^  f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
f4	halt.asm	/^  f4:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f4	mkdir.asm	/^  f4:	5b                   	pop    %ebx$/;"	l
f4	ps.asm	/^  f4:	5f                   	pop    %edi$/;"	l
f4	rm.asm	/^  f4:	5b                   	pop    %ebx$/;"	l
f4	setnice.asm	/^  f4:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
f4	thread_create.asm	/^  f4:	5f                   	pop    %edi$/;"	l
f4	thread_exit.asm	/^  f4:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f4	thread_join.asm	/^  f4:	5f                   	pop    %edi$/;"	l
f4	zombie.asm	/^  f4:	5f                   	pop    %edi$/;"	l
f40	sh.asm	/^     f40:	85 d2                	test   %edx,%edx$/;"	l
f40	usertests.asm	/^     f40:	80 f9 70             	cmp    $0x70,%cl$/;"	l
f42	sh.asm	/^     f42:	0f be cb             	movsbl %bl,%ecx$/;"	l
f43	usertests.asm	/^     f43:	0f 94 c1             	sete   %cl$/;"	l
f45	sh.asm	/^     f45:	0f b6 c3             	movzbl %bl,%eax$/;"	l
f46	usertests.asm	/^     f46:	0f b6 c9             	movzbl %cl,%ecx$/;"	l
f48	sh.asm	/^     f48:	74 c6                	je     f10 <printf+0x30>$/;"	l
f49	usertests.asm	/^     f49:	01 cb                	add    %ecx,%ebx$/;"	l
f4a	sh.asm	/^     f4a:	83 fa 25             	cmp    $0x25,%edx$/;"	l
f4b	usertests.asm	/^     f4b:	83 c0 01             	add    $0x1,%eax$/;"	l
f4d	sh.asm	/^     f4d:	75 e6                	jne    f35 <printf+0x55>$/;"	l
f4e	usertests.asm	/^     f4e:	39 c7                	cmp    %eax,%edi$/;"	l
f4f	sh.asm	/^     f4f:	83 f8 64             	cmp    $0x64,%eax$/;"	l
f5	getnice.asm	/^  f5:	5d                   	pop    %ebp$/;"	l
f5	mkdir.asm	/^  f5:	5e                   	pop    %esi$/;"	l
f5	ps.asm	/^  f5:	5d                   	pop    %ebp$/;"	l
f5	rm.asm	/^  f5:	5e                   	pop    %esi$/;"	l
f5	sh.asm	/^      f5:	e8 28 0c 00 00       	call   d22 <exit>$/;"	l
f5	thread_create.asm	/^  f5:	5d                   	pop    %ebp$/;"	l
f5	thread_join.asm	/^  f5:	5d                   	pop    %ebp$/;"	l
f5	usertests.asm	/^      f5:	e8 46 2a 00 00       	call   2b40 <iref>$/;"	l
f5	zombie.asm	/^  f5:	5d                   	pop    %ebp$/;"	l
f50	usertests.asm	/^     f50:	74 ce                	je     f20 <sharedfd+0xe0>$/;"	l
f52	sh.asm	/^     f52:	0f 84 f8 00 00 00    	je     1050 <printf+0x170>$/;"	l
f52	usertests.asm	/^     f52:	0f b6 08             	movzbl (%eax),%ecx$/;"	l
f55	usertests.asm	/^     f55:	80 f9 63             	cmp    $0x63,%cl$/;"	l
f58	sh.asm	/^     f58:	81 e1 f7 00 00 00    	and    $0xf7,%ecx$/;"	l
f58	usertests.asm	/^     f58:	75 e6                	jne    f40 <sharedfd+0x100>$/;"	l
f5a	usertests.asm	/^     f5a:	83 c2 01             	add    $0x1,%edx$/;"	l
f5d	usertests.asm	/^     f5d:	eb ec                	jmp    f4b <sharedfd+0x10b>$/;"	l
f5e	sh.asm	/^     f5e:	83 f9 70             	cmp    $0x70,%ecx$/;"	l
f5f	usertests.asm	/^     f5f:	83 ec 0c             	sub    $0xc,%esp$/;"	l
f6	echo.asm	/^  f6:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
f6	forktest.asm	/^  f6:	6a 01                	push   $0x1$/;"	l
f6	getnice.asm	/^  f6:	c3                   	ret    $/;"	l
f6	mkdir.asm	/^  f6:	5d                   	pop    %ebp$/;"	l
f6	ps.asm	/^  f6:	c3                   	ret    $/;"	l
f6	rm.asm	/^  f6:	5d                   	pop    %ebp$/;"	l
f6	stressfs.asm	/^  f6:	89 c7                	mov    %eax,%edi$/;"	l
f6	test.asm	/^  f6:	c7 04 24 80 0e 00 00 	movl   $0xe80,(%esp)$/;"	l
f6	thread_create.asm	/^  f6:	c3                   	ret    $/;"	l
f6	thread_join.asm	/^  f6:	c3                   	ret    $/;"	l
f6	zombie.asm	/^  f6:	c3                   	ret    $/;"	l
f61	sh.asm	/^     f61:	74 5d                	je     fc0 <printf+0xe0>$/;"	l
f62	usertests.asm	/^     f62:	ff 75 d0             	pushl  -0x30(%ebp)$/;"	l
f63	sh.asm	/^     f63:	83 f8 73             	cmp    $0x73,%eax$/;"	l
f65	usertests.asm	/^     f65:	e8 60 29 00 00       	call   38ca <close>$/;"	l
f66	sh.asm	/^     f66:	0f 84 84 00 00 00    	je     ff0 <printf+0x110>$/;"	l
f6a	usertests.asm	/^     f6a:	c7 04 24 bb 41 00 00 	movl   $0x41bb,(%esp)$/;"	l
f6c	sh.asm	/^     f6c:	83 f8 63             	cmp    $0x63,%eax$/;"	l
f6f	sh.asm	/^     f6f:	0f 84 ea 00 00 00    	je     105f <printf+0x17f>$/;"	l
f7	getnice.asm	/^  f7:	89 f6                	mov    %esi,%esi$/;"	l
f7	gettid.asm	/^  f7:	8b 5d 0c             	mov    0xc(%ebp),%ebx$/;"	l
f7	halt.asm	/^  f7:	8b 5d 0c             	mov    0xc(%ebp),%ebx$/;"	l
f7	kill.asm	/^  f7:	89 d0                	mov    %edx,%eax$/;"	l
f7	ln.asm	/^  f7:	89 d0                	mov    %edx,%eax$/;"	l
f7	mkdir.asm	/^  f7:	c3                   	ret    $/;"	l
f7	ps.asm	/^  f7:	89 f6                	mov    %esi,%esi$/;"	l
f7	rm.asm	/^  f7:	c3                   	ret    $/;"	l
f7	setnice.asm	/^  f7:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
f7	thread_create.asm	/^  f7:	89 f6                	mov    %esi,%esi$/;"	l
f7	thread_exit.asm	/^  f7:	8b 5d 0c             	mov    0xc(%ebp),%ebx$/;"	l
f7	thread_join.asm	/^  f7:	89 f6                	mov    %esi,%esi$/;"	l
f7	zombie.asm	/^  f7:	89 f6                	mov    %esi,%esi$/;"	l
f71	usertests.asm	/^     f71:	e8 7c 29 00 00       	call   38f2 <unlink>$/;"	l
f75	sh.asm	/^     f75:	83 f8 25             	cmp    $0x25,%eax$/;"	l
f76	usertests.asm	/^     f76:	8b 55 d4             	mov    -0x2c(%ebp),%edx$/;"	l
f78	sh.asm	/^     f78:	0f 84 c2 00 00 00    	je     1040 <printf+0x160>$/;"	l
f79	usertests.asm	/^     f79:	83 c4 10             	add    $0x10,%esp$/;"	l
f7c	usertests.asm	/^     f7c:	81 fa 10 27 00 00    	cmp    $0x2710,%edx$/;"	l
f7e	sh.asm	/^     f7e:	8d 45 e7             	lea    -0x19(%ebp),%eax$/;"	l
f8	forktest.asm	/^  f8:	e8 b5 02 00 00       	call   3b2 <write>$/;"	l
f8	grep.asm	/^  f8:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
f8	init.asm	/^  f8:	e8 95 02 00 00       	call   392 <open>$/;"	l
f8	mkdir.asm	/^  f8:	90                   	nop$/;"	l
f8	rm.asm	/^  f8:	90                   	nop$/;"	l
f8	stressfs.asm	/^  f8:	90                   	nop$/;"	l
f81	sh.asm	/^     f81:	83 ec 04             	sub    $0x4,%esp$/;"	l
f82	usertests.asm	/^     f82:	75 5b                	jne    fdf <sharedfd+0x19f>$/;"	l
f84	sh.asm	/^     f84:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)$/;"	l
f84	usertests.asm	/^     f84:	81 fb 10 27 00 00    	cmp    $0x2710,%ebx$/;"	l
f88	sh.asm	/^     f88:	6a 01                	push   $0x1$/;"	l
f8a	sh.asm	/^     f8a:	50                   	push   %eax$/;"	l
f8a	usertests.asm	/^     f8a:	75 53                	jne    fdf <sharedfd+0x19f>$/;"	l
f8b	sh.asm	/^     f8b:	57                   	push   %edi$/;"	l
f8c	sh.asm	/^     f8c:	e8 b1 fd ff ff       	call   d42 <write>$/;"	l
f8c	usertests.asm	/^     f8c:	83 ec 08             	sub    $0x8,%esp$/;"	l
f8f	usertests.asm	/^     f8f:	68 c4 41 00 00       	push   $0x41c4$/;"	l
f9	cat.asm	/^  f9:	6a 01                	push   $0x1$/;"	l
f9	echo.asm	/^  f9:	74 12                	je     10d <strlen+0x1d>$/;"	l
f9	getnice.asm	/^  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
f9	kill.asm	/^  f9:	75 f5                	jne    f0 <strlen+0x10>$/;"	l
f9	ln.asm	/^  f9:	75 f5                	jne    f0 <strlen+0x10>$/;"	l
f9	ls.asm	/^  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
f9	mkdir.asm	/^  f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
f9	ps.asm	/^  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
f9	rm.asm	/^  f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
f9	stressfs.asm	/^  f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
f9	thread_create.asm	/^  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
f9	thread_join.asm	/^  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
f9	wc.asm	/^  f9:	31 c9                	xor    %ecx,%ecx$/;"	l
f9	zombie.asm	/^  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
f91	sh.asm	/^     f91:	83 c4 0c             	add    $0xc,%esp$/;"	l
f94	sh.asm	/^     f94:	8d 45 e6             	lea    -0x1a(%ebp),%eax$/;"	l
f94	usertests.asm	/^     f94:	6a 01                	push   $0x1$/;"	l
f96	usertests.asm	/^     f96:	e8 c5 2a 00 00       	call   3a60 <printf>$/;"	l
f97	sh.asm	/^     f97:	88 5d e6             	mov    %bl,-0x1a(%ebp)$/;"	l
f9a	sh.asm	/^     f9a:	6a 01                	push   $0x1$/;"	l
f9b	usertests.asm	/^     f9b:	83 c4 10             	add    $0x10,%esp$/;"	l
f9c	sh.asm	/^     f9c:	50                   	push   %eax$/;"	l
f9d	sh.asm	/^     f9d:	57                   	push   %edi$/;"	l
f9e	sh.asm	/^     f9e:	83 c6 01             	add    $0x1,%esi$/;"	l
f9e	usertests.asm	/^     f9e:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
fa	gettid.asm	/^  fa:	0f b6 10             	movzbl (%eax),%edx$/;"	l
fa	halt.asm	/^  fa:	0f b6 10             	movzbl (%eax),%edx$/;"	l
fa	setnice.asm	/^  fa:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
fa	sh.asm	/^      fa:	83 ec 0c             	sub    $0xc,%esp$/;"	l
fa	thread_exit.asm	/^  fa:	0f b6 10             	movzbl (%eax),%edx$/;"	l
fa	usertests.asm	/^      fa:	e8 61 2b 00 00       	call   2c60 <forktest>$/;"	l
fa1	sh.asm	/^     fa1:	e8 9c fd ff ff       	call   d42 <write>$/;"	l
fa1	usertests.asm	/^     fa1:	5b                   	pop    %ebx$/;"	l
fa2	usertests.asm	/^     fa2:	5e                   	pop    %esi$/;"	l
fa3	usertests.asm	/^     fa3:	5f                   	pop    %edi$/;"	l
fa4	usertests.asm	/^     fa4:	5d                   	pop    %ebp$/;"	l
fa5	usertests.asm	/^     fa5:	c3                   	ret    $/;"	l
fa6	sh.asm	/^     fa6:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx$/;"	l
fa6	usertests.asm	/^     fa6:	83 ec 08             	sub    $0x8,%esp$/;"	l
fa9	usertests.asm	/^     fa9:	68 80 4e 00 00       	push   $0x4e80$/;"	l
faa	sh.asm	/^     faa:	83 c4 10             	add    $0x10,%esp$/;"	l
fad	sh.asm	/^     fad:	31 d2                	xor    %edx,%edx$/;"	l
fae	usertests.asm	/^     fae:	6a 01                	push   $0x1$/;"	l
faf	sh.asm	/^     faf:	84 db                	test   %bl,%bl$/;"	l
fb	cat.asm	/^  fb:	e8 10 04 00 00       	call   510 <printf>$/;"	l
fb	echo.asm	/^  fb:	31 d2                	xor    %edx,%edx$/;"	l
fb	grep.asm	/^  fb:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
fb	kill.asm	/^  fb:	5d                   	pop    %ebp$/;"	l
fb	ln.asm	/^  fb:	5d                   	pop    %ebp$/;"	l
fb	wc.asm	/^  fb:	3c 0a                	cmp    $0xa,%al$/;"	l
fb0	usertests.asm	/^     fb0:	e8 ab 2a 00 00       	call   3a60 <printf>$/;"	l
fb1	sh.asm	/^     fb1:	75 8d                	jne    f40 <printf+0x60>$/;"	l
fb3	sh.asm	/^     fb3:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
fb5	usertests.asm	/^     fb5:	83 c4 10             	add    $0x10,%esp$/;"	l
fb6	sh.asm	/^     fb6:	5b                   	pop    %ebx$/;"	l
fb7	sh.asm	/^     fb7:	5e                   	pop    %esi$/;"	l
fb8	sh.asm	/^     fb8:	5f                   	pop    %edi$/;"	l
fb8	usertests.asm	/^     fb8:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
fb9	sh.asm	/^     fb9:	5d                   	pop    %ebp$/;"	l
fba	sh.asm	/^     fba:	c3                   	ret    $/;"	l
fbb	sh.asm	/^     fbb:	90                   	nop$/;"	l
fbb	usertests.asm	/^     fbb:	5b                   	pop    %ebx$/;"	l
fbc	sh.asm	/^     fbc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
fbc	usertests.asm	/^     fbc:	5e                   	pop    %esi$/;"	l
fbd	usertests.asm	/^     fbd:	5f                   	pop    %edi$/;"	l
fbe	usertests.asm	/^     fbe:	5d                   	pop    %ebp$/;"	l
fbf	usertests.asm	/^     fbf:	c3                   	ret    $/;"	l
fc	kill.asm	/^  fc:	c3                   	ret    $/;"	l
fc	ln.asm	/^  fc:	c3                   	ret    $/;"	l
fc0	sh.asm	/^     fc0:	83 ec 0c             	sub    $0xc,%esp$/;"	l
fc0	usertests.asm	/^     fc0:	83 ec 08             	sub    $0x8,%esp$/;"	l
fc3	sh.asm	/^     fc3:	b9 10 00 00 00       	mov    $0x10,%ecx$/;"	l
fc3	usertests.asm	/^     fc3:	68 cc 4e 00 00       	push   $0x4ecc$/;"	l
fc8	sh.asm	/^     fc8:	6a 00                	push   $0x0$/;"	l
fc8	usertests.asm	/^     fc8:	6a 01                	push   $0x1$/;"	l
fca	sh.asm	/^     fca:	8b 5d d0             	mov    -0x30(%ebp),%ebx$/;"	l
fca	usertests.asm	/^     fca:	e8 91 2a 00 00       	call   3a60 <printf>$/;"	l
fcd	sh.asm	/^     fcd:	89 f8                	mov    %edi,%eax$/;"	l
fcf	sh.asm	/^     fcf:	8b 13                	mov    (%ebx),%edx$/;"	l
fcf	usertests.asm	/^     fcf:	83 c4 10             	add    $0x10,%esp$/;"	l
fd	cat.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	echo.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	echo.asm	/^  fd:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
fd	fmt/sh.c	/^9131   int fd;$/;"	m	struct:redircmd	file:
fd	forktest.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	forktest.asm	/^  fd:	e8 90 02 00 00       	call   392 <exit>$/;"	l
fd	getnice.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	gettid.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	gettid.asm	/^  fd:	84 d2                	test   %dl,%dl$/;"	l
fd	grep.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	halt.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	halt.asm	/^  fd:	84 d2                	test   %dl,%dl$/;"	l
fd	init.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	init.asm	/^  fd:	83 c4 10             	add    $0x10,%esp$/;"	l
fd	kill.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	kill.asm	/^  fd:	31 c0                	xor    %eax,%eax$/;"	l
fd	ln.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	ln.asm	/^  fd:	31 c0                	xor    %eax,%eax$/;"	l
fd	ls.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	mkdir.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	ps.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	rm.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	setnice.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	setnice.asm	/^  fd:	89 d7                	mov    %edx,%edi$/;"	l
fd	sh.asm	/^      fd:	68 c0 18 00 00       	push   $0x18c0$/;"	l
fd	sh.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	sh.c	/^  int fd;$/;"	m	struct:redircmd	file:
fd	stressfs.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	stressfs.asm	/^  fd = open(path, O_CREATE | O_RDWR);$/;"	d
fd	stressfs.asm	/^  fd = open(path, O_RDONLY);$/;"	d
fd	test.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	test.asm	/^  fd:	e8 b0 04 00 00       	call   5b2 <mutex_unlock>$/;"	l
fd	thread_create.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	thread_exit.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	thread_exit.asm	/^  fd:	84 d2                	test   %dl,%dl$/;"	l
fd	thread_join.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	usertests.asm	/^        fd = open(name, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^      fd = open(file, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^      fd = open(fname, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^      fd = open(name, 0);$/;"	d
fd	usertests.asm	/^    fd = open("", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open("bigarg-ok", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open("bigwrite", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^    fd = open("xx", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open(fname, 0);$/;"	d
fd	usertests.asm	/^    fd = open(name, O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open(".", 0);$/;"	d
fd	usertests.asm	/^  fd = open(".", O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("123456789012345\/123456789012345\/123456789012345", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("12345678901234\/12345678901234\/12345678901234", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bd", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("big", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("big", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("bigarg-ok", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bigfile", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bigfile", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/..\/ff", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/ff", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/ffff", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/ff", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile\/xx", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile\/xx", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("doesnotexist", 0);$/;"	d
fd	usertests.asm	/^  fd = open("echo", 0);$/;"	d
fd	usertests.asm	/^  fd = open("init", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("lf1", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("lf2", 0);$/;"	d
fd	usertests.asm	/^  fd = open("sharedfd", 0);$/;"	d
fd	usertests.asm	/^  fd = open("sharedfd", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("small", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("small", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("unlinkread", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("unlinkread", O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	wc.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	wc.asm	/^  fd:	0f 94 c1             	sete   %cl$/;"	l
fd	zombie.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd0	kernel.asm	/^  fd0 = -1;$/;"	d
fd1	sh.asm	/^     fd1:	e8 6a fe ff ff       	call   e40 <printint>$/;"	l
fd1	usertests.asm	/^  fd1 = open("unlinkread", O_CREATE | O_RDWR);$/;"	d
fd2	usertests.asm	/^     fd2:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
fd5	usertests.asm	/^     fd5:	5b                   	pop    %ebx$/;"	l
fd6	sh.asm	/^     fd6:	89 d8                	mov    %ebx,%eax$/;"	l
fd6	usertests.asm	/^     fd6:	5e                   	pop    %esi$/;"	l
fd7	usertests.asm	/^     fd7:	5f                   	pop    %edi$/;"	l
fd8	sh.asm	/^     fd8:	83 c4 10             	add    $0x10,%esp$/;"	l
fd8	usertests.asm	/^     fd8:	5d                   	pop    %ebp$/;"	l
fd9	usertests.asm	/^     fd9:	c3                   	ret    $/;"	l
fda	usertests.asm	/^     fda:	e8 c3 28 00 00       	call   38a2 <exit>$/;"	l
fdalloc	fmt/sysfile.c	/^6653 fdalloc(struct file *f)$/;"	f	file:
fdalloc	sysfile.c	/^fdalloc(struct file *f)$/;"	f	file:
fdb	sh.asm	/^     fdb:	31 d2                	xor    %edx,%edx$/;"	l
fdd	sh.asm	/^     fdd:	83 c0 04             	add    $0x4,%eax$/;"	l
fdf	usertests.asm	/^     fdf:	53                   	push   %ebx$/;"	l
fe0	sh.asm	/^     fe0:	89 45 d0             	mov    %eax,-0x30(%ebp)$/;"	l
fe0	usertests.asm	/^     fe0:	52                   	push   %edx$/;"	l
fe1	usertests.asm	/^     fe1:	68 d1 41 00 00       	push   $0x41d1$/;"	l
fe3	sh.asm	/^     fe3:	e9 4d ff ff ff       	jmp    f35 <printf+0x55>$/;"	l
fe6	usertests.asm	/^     fe6:	6a 01                	push   $0x1$/;"	l
fe8	sh.asm	/^     fe8:	90                   	nop$/;"	l
fe8	usertests.asm	/^     fe8:	e8 73 2a 00 00       	call   3a60 <printf>$/;"	l
fe9	sh.asm	/^     fe9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
feature	fmt/mp.h	/^7635   uint feature;                 \/\/ feature flags from CPUID instruction$/;"	m	struct:mpproc
feature	mp.h	/^  uint feature;                 \/\/ feature flags from CPUID instruction$/;"	m	struct:mpproc
fed	usertests.asm	/^     fed:	e8 b0 28 00 00       	call   38a2 <exit>$/;"	l
fetchint	fmt/syscall.c	/^3917 fetchint(uint addr, int *ip)$/;"	f
fetchint	syscall.c	/^fetchint(uint addr, int *ip)$/;"	f
fetchstr	fmt/syscall.c	/^3931 fetchstr(uint addr, char **pp)$/;"	f
fetchstr	syscall.c	/^fetchstr(uint addr, char **pp)$/;"	f
ff	gettid.asm	/^  ff:	74 1d                	je     11e <strchr+0x2e>$/;"	l
ff	halt.asm	/^  ff:	74 1d                	je     11e <strchr+0x2e>$/;"	l
ff	kernel.asm	/^  ff = *f;$/;"	d
ff	kill.asm	/^  ff:	5d                   	pop    %ebp$/;"	l
ff	ln.asm	/^  ff:	5d                   	pop    %ebp$/;"	l
ff	setnice.asm	/^  ff:	fc                   	cld    $/;"	l
ff	thread_exit.asm	/^  ff:	74 1d                	je     11e <strchr+0x2e>$/;"	l
ff	usertests.asm	/^      ff:	e8 bc 1a 00 00       	call   1bc0 <bigdir>$/;"	l
ff0	sh.asm	/^     ff0:	8b 45 d0             	mov    -0x30(%ebp),%eax$/;"	l
ff2	usertests.asm	/^     ff2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
ff3	sh.asm	/^     ff3:	8b 18                	mov    (%eax),%ebx$/;"	l
ff5	sh.asm	/^     ff5:	83 c0 04             	add    $0x4,%eax$/;"	l
ff8	sh.asm	/^     ff8:	89 45 d0             	mov    %eax,-0x30(%ebp)$/;"	l
ff9	usertests.asm	/^     ff9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
ffb	sh.asm	/^     ffb:	b8 e8 12 00 00       	mov    $0x12e8,%eax$/;"	l
file	file.c	/^  struct file file[NFILE];$/;"	m	struct:__anon15	typeref:struct:__anon15::file	file:
file	file.h	/^struct file {$/;"	s
file	fmt/file.c	/^6415   struct file file[NFILE];$/;"	m	struct:__anon7	typeref:struct:__anon7::file	file:
file	fmt/file.h	/^4700 struct file {$/;"	s
file	fmt/sh.c	/^9128   char *file;$/;"	m	struct:redircmd	file:
file	sh.c	/^  char *file;$/;"	m	struct:redircmd	file:
filealloc	file.c	/^filealloc(void)$/;"	f
filealloc	fmt/file.c	/^6426 filealloc(void)$/;"	f
fileclose	file.c	/^fileclose(struct file *f)$/;"	f
fileclose	fmt/file.c	/^6464 fileclose(struct file *f)$/;"	f
filedup	file.c	/^filedup(struct file *f)$/;"	f
filedup	fmt/file.c	/^6452 filedup(struct file *f)$/;"	f
fileinit	file.c	/^fileinit(void)$/;"	f
fileinit	fmt/file.c	/^6419 fileinit(void)$/;"	f
fileread	file.c	/^fileread(struct file *f, char *addr, int n)$/;"	f
fileread	fmt/file.c	/^6515 fileread(struct file *f, char *addr, int n)$/;"	f
filestat	file.c	/^filestat(struct file *f, struct stat *st)$/;"	f
filestat	fmt/file.c	/^6502 filestat(struct file *f, struct stat *st)$/;"	f
filesz	elf.h	/^  uint filesz;$/;"	m	struct:proghdr
filesz	fmt/elf.h	/^0929   uint filesz;$/;"	m	struct:proghdr
filewrite	file.c	/^filewrite(struct file *f, char *addr, int n)$/;"	f
filewrite	fmt/file.c	/^6552 filewrite(struct file *f, char *addr, int n)$/;"	f
fill_rtcdate	fmt/lapic.c	/^8091 fill_rtcdate(struct rtcdate *r)$/;"	f	file:
fill_rtcdate	lapic.c	/^fill_rtcdate(struct rtcdate *r)$/;"	f	file:
first	kernel.asm	/^    first = 0;$/;"	d
flags	buf.h	/^  int flags;$/;"	m	struct:buf
flags	elf.h	/^  uint flags;$/;"	m	struct:elfhdr
flags	elf.h	/^  uint flags;$/;"	m	struct:proghdr
flags	fmt/buf.h	/^4401   int flags;$/;"	m	struct:buf
flags	fmt/elf.h	/^0914   uint flags;$/;"	m	struct:elfhdr
flags	fmt/elf.h	/^0931   uint flags;$/;"	m	struct:proghdr
flags	fmt/mp.h	/^7632   uchar flags;                  \/\/ CPU flags$/;"	m	struct:mpproc
flags	fmt/mp.h	/^7643   uchar flags;                  \/\/ I\/O APIC flags$/;"	m	struct:mpioapic
flags	kernel.asm	/^    flags = PTE_FLAGS(*pte);$/;"	d
flags	mp.h	/^  uchar flags;                  \/\/ CPU flags$/;"	m	struct:mpproc
flags	mp.h	/^  uchar flags;                  \/\/ I\/O APIC flags$/;"	m	struct:mpioapic
fmtname	ls.c	/^fmtname(char *path)$/;"	f
fname	usertests.asm	/^    fname = names[i];$/;"	d
fname	usertests.asm	/^    fname = names[pi];$/;"	d
fork	fmt/proc.c	/^2625 fork(void)$/;"	f
fork	proc.c	/^fork(void)$/;"	f
fork1	fmt/sh.c	/^9288 fork1(void)$/;"	f
fork1	sh.c	/^fork1(void)$/;"	f
forkret	fmt/proc.c	/^2903 forkret(void)$/;"	f
forkret	proc.c	/^forkret(void)$/;"	f
forktest	forktest.c	/^forktest(void)$/;"	f
forktest	usertests.c	/^forktest(void)$/;"	f
found	kernel.asm	/^found:$/;"	l
fourfiles	usertests.c	/^fourfiles(void)$/;"	f
fourteen	usertests.c	/^fourteen(void)$/;"	f
free	umalloc.c	/^free(void *ap)$/;"	f
freeblock	mkfs.c	/^uint freeblock;$/;"	v
freeinode	mkfs.c	/^uint freeinode = 1;$/;"	v
freelist	fmt/kalloc.c	/^3472   struct run *freelist;$/;"	m	struct:__anon3	typeref:struct:__anon3::run	file:
freelist	kalloc.c	/^  struct run *freelist;$/;"	m	struct:__anon11	typeref:struct:__anon11::run	file:
freep	cat.asm	/^      freep = prevp;$/;"	d
freep	cat.asm	/^  freep = p;$/;"	d
freep	echo.asm	/^      freep = prevp;$/;"	d
freep	echo.asm	/^  freep = p;$/;"	d
freep	getnice.asm	/^      freep = prevp;$/;"	d
freep	getnice.asm	/^  freep = p;$/;"	d
freep	gettid.asm	/^      freep = prevp;$/;"	d
freep	gettid.asm	/^  freep = p;$/;"	d
freep	grep.asm	/^      freep = prevp;$/;"	d
freep	grep.asm	/^  freep = p;$/;"	d
freep	halt.asm	/^      freep = prevp;$/;"	d
freep	halt.asm	/^  freep = p;$/;"	d
freep	init.asm	/^      freep = prevp;$/;"	d
freep	init.asm	/^  freep = p;$/;"	d
freep	kill.asm	/^      freep = prevp;$/;"	d
freep	kill.asm	/^  freep = p;$/;"	d
freep	ln.asm	/^      freep = prevp;$/;"	d
freep	ln.asm	/^  freep = p;$/;"	d
freep	ls.asm	/^      freep = prevp;$/;"	d
freep	ls.asm	/^  freep = p;$/;"	d
freep	mkdir.asm	/^      freep = prevp;$/;"	d
freep	mkdir.asm	/^  freep = p;$/;"	d
freep	ps.asm	/^      freep = prevp;$/;"	d
freep	ps.asm	/^  freep = p;$/;"	d
freep	rm.asm	/^      freep = prevp;$/;"	d
freep	rm.asm	/^  freep = p;$/;"	d
freep	setnice.asm	/^      freep = prevp;$/;"	d
freep	setnice.asm	/^  freep = p;$/;"	d
freep	sh.asm	/^      freep = prevp;$/;"	d
freep	sh.asm	/^  freep = p;$/;"	d
freep	stressfs.asm	/^      freep = prevp;$/;"	d
freep	stressfs.asm	/^  freep = p;$/;"	d
freep	test.asm	/^      freep = prevp;$/;"	d
freep	test.asm	/^  freep = p;$/;"	d
freep	thread_create.asm	/^      freep = prevp;$/;"	d
freep	thread_create.asm	/^  freep = p;$/;"	d
freep	thread_exit.asm	/^      freep = prevp;$/;"	d
freep	thread_exit.asm	/^  freep = p;$/;"	d
freep	thread_join.asm	/^      freep = prevp;$/;"	d
freep	thread_join.asm	/^  freep = p;$/;"	d
freep	umalloc.c	/^static Header *freep;$/;"	v	file:
freep	usertests.asm	/^      freep = prevp;$/;"	d
freep	usertests.asm	/^  freep = p;$/;"	d
freep	wc.asm	/^      freep = prevp;$/;"	d
freep	wc.asm	/^  freep = p;$/;"	d
freep	zombie.asm	/^      freep = prevp;$/;"	d
freep	zombie.asm	/^  freep = p;$/;"	d
freerange	fmt/kalloc.c	/^3501 freerange(void *vstart, void *vend)$/;"	f
freerange	kalloc.c	/^freerange(void *vstart, void *vend)$/;"	f
freevm	fmt/vm.c	/^2003 freevm(pde_t *pgdir)$/;"	f
freevm	vm.c	/^freevm(pde_t *pgdir)$/;"	f
fs	fmt/mmu.h	/^0844   ushort fs;$/;"	m	struct:taskstate
fs	fmt/x86.h	/^0616   ushort fs;$/;"	m	struct:trapframe
fs	mmu.h	/^  ushort fs;$/;"	m	struct:taskstate
fs	x86.h	/^  ushort fs;$/;"	m	struct:trapframe
fsfd	mkfs.c	/^int fsfd;$/;"	v
fsfull	usertests.c	/^fsfull()$/;"	f
ftable	file.c	/^} ftable;$/;"	v	typeref:struct:__anon15
ftable	fmt/file.c	/^6416 } ftable;$/;"	v	typeref:struct:__anon7
g	fmt/mmu.h	/^0737   uint g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:segdesc
g	mmu.h	/^  uint g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:segdesc
gatedesc	fmt/mmu.h	/^0855 struct gatedesc {$/;"	s
gatedesc	mmu.h	/^struct gatedesc {$/;"	s
gdt	bootasm.S	/^gdt:$/;"	l
gdt	entryother.S	/^gdt:$/;"	l
gdt	fmt/proc.h	/^2305   struct segdesc gdt[NSEGS];   \/\/ x86 global descriptor table$/;"	m	struct:cpu	typeref:struct:cpu::segdesc
gdt	proc.h	/^  struct segdesc gdt[NSEGS];   \/\/ x86 global descriptor table$/;"	m	struct:cpu	typeref:struct:cpu::segdesc
gdtdesc	bootasm.S	/^gdtdesc:$/;"	l
gdtdesc	entryother.S	/^gdtdesc:$/;"	l
getcallerpcs	fmt/spinlock.c	/^1627 getcallerpcs(void *v, uint pcs[])$/;"	f
getcallerpcs	spinlock.c	/^getcallerpcs(void *v, uint pcs[])$/;"	f
getcmd	fmt/sh.c	/^9234 getcmd(char *buf, int nbuf)$/;"	f
getcmd	sh.c	/^getcmd(char *buf, int nbuf)$/;"	f
getnice	fmt/proc.c	/^3101 getnice(int pid)$/;"	f
getnice	proc.c	/^getnice(int pid)$/;"	f
gets	ulib.c	/^gets(char *buf, int max)$/;"	f
gettid	fmt/proc.c	/^3362 int gettid()$/;"	f
gettid	proc.c	/^int gettid()$/;"	f
gettoken	fmt/sh.c	/^9406 gettoken(char **ps, char *es, char **q, char **eq)$/;"	f
gettoken	sh.c	/^gettoken(char **ps, char *es, char **q, char **eq)$/;"	f
grep	grep.c	/^grep(char *pattern, int fd)$/;"	f
growproc	fmt/proc.c	/^2603 growproc(int n)$/;"	f
growproc	proc.c	/^growproc(int n)$/;"	f
gs	fmt/mmu.h	/^0846   ushort gs;$/;"	m	struct:taskstate
gs	fmt/x86.h	/^0614   ushort gs;$/;"	m	struct:trapframe
gs	mmu.h	/^  ushort gs;$/;"	m	struct:taskstate
gs	x86.h	/^  ushort gs;$/;"	m	struct:trapframe
havedisk1	fmt/ide.c	/^4783 static int havedisk1;$/;"	v	file:
havedisk1	ide.c	/^static int havedisk1;$/;"	v	file:
havedisk1	kernel.asm	/^      havedisk1 = 1;$/;"	d
havekids	kernel.asm	/^      havekids = 1;$/;"	d
havekids	kernel.asm	/^    havekids = 0;$/;"	d
head	bio.c	/^  struct buf head;$/;"	m	struct:__anon12	typeref:struct:__anon12::buf	file:
head	fmt/bio.c	/^4984   struct buf head;$/;"	m	struct:__anon4	typeref:struct:__anon4::buf	file:
header	umalloc.c	/^union header {$/;"	u	file:
hi	usertests.asm	/^  hi = 1100*1024;$/;"	d
holding	fmt/spinlock.c	/^1652 holding(struct spinlock *lock)$/;"	f
holding	spinlock.c	/^holding(struct spinlock *lock)$/;"	f
holdingsleep	fmt/sleeplock.c	/^5201 holdingsleep(struct sleeplock *lk)$/;"	f
holdingsleep	sleeplock.c	/^holdingsleep(struct sleeplock *lk)$/;"	f
hour	date.h	/^  uint hour;$/;"	m	struct:rtcdate
hour	fmt/date.h	/^0953   uint hour;$/;"	m	struct:rtcdate
hp	cat.asm	/^  hp = (Header*)p;$/;"	d
hp	echo.asm	/^  hp = (Header*)p;$/;"	d
hp	getnice.asm	/^  hp = (Header*)p;$/;"	d
hp	gettid.asm	/^  hp = (Header*)p;$/;"	d
hp	grep.asm	/^  hp = (Header*)p;$/;"	d
hp	halt.asm	/^  hp = (Header*)p;$/;"	d
hp	init.asm	/^  hp = (Header*)p;$/;"	d
hp	kill.asm	/^  hp = (Header*)p;$/;"	d
hp	ln.asm	/^  hp = (Header*)p;$/;"	d
hp	ls.asm	/^  hp = (Header*)p;$/;"	d
hp	mkdir.asm	/^  hp = (Header*)p;$/;"	d
hp	ps.asm	/^  hp = (Header*)p;$/;"	d
hp	rm.asm	/^  hp = (Header*)p;$/;"	d
hp	setnice.asm	/^  hp = (Header*)p;$/;"	d
hp	sh.asm	/^  hp = (Header*)p;$/;"	d
hp	stressfs.asm	/^  hp = (Header*)p;$/;"	d
hp	test.asm	/^  hp = (Header*)p;$/;"	d
hp	thread_create.asm	/^  hp = (Header*)p;$/;"	d
hp	thread_exit.asm	/^  hp = (Header*)p;$/;"	d
hp	thread_join.asm	/^  hp = (Header*)p;$/;"	d
hp	usertests.asm	/^  hp = (Header*)p;$/;"	d
hp	wc.asm	/^  hp = (Header*)p;$/;"	d
hp	zombie.asm	/^  hp = (Header*)p;$/;"	d
i	cat.asm	/^  i = 0;$/;"	d
i	echo.asm	/^  i = 0;$/;"	d
i	getnice.asm	/^  i = 0;$/;"	d
i	gettid.asm	/^  i = 0;$/;"	d
i	grep.asm	/^  i = 0;$/;"	d
i	halt.asm	/^  i = 0;$/;"	d
i	init.asm	/^  i = 0;$/;"	d
i	kernel.asm	/^  i = 0;$/;"	d
i	kill.asm	/^  i = 0;$/;"	d
i	ln.asm	/^  i = 0;$/;"	d
i	ls.asm	/^  i = 0;$/;"	d
i	mkdir.asm	/^  i = 0;$/;"	d
i	ps.asm	/^  i = 0;$/;"	d
i	rm.asm	/^  i = 0;$/;"	d
i	setnice.asm	/^  i = 0;$/;"	d
i	sh.asm	/^  i = 0;$/;"	d
i	stressfs.asm	/^  i = 0;$/;"	d
i	test.asm	/^  i = 0;$/;"	d
i	thread_create.asm	/^  i = 0;$/;"	d
i	thread_exit.asm	/^  i = 0;$/;"	d
i	thread_join.asm	/^  i = 0;$/;"	d
i	usertests.asm	/^      i = de.name[1] - '0';$/;"	d
i	usertests.asm	/^    i = read(fd, buf, 512);$/;"	d
i	usertests.asm	/^  i = 0;$/;"	d
i	usertests.asm	/^  i = read(fd, buf, 2000);$/;"	d
i	wc.asm	/^  i = 0;$/;"	d
i	zombie.asm	/^  i = 0;$/;"	d
ialloc	fmt/fs.c	/^5754 ialloc(uint dev, short type)$/;"	f
ialloc	fs.c	/^ialloc(uint dev, short type)$/;"	f
ialloc	mkfs.c	/^ialloc(ushort type)$/;"	f
iappend	mkfs.c	/^iappend(uint inum, void *xp, int n)$/;"	f
icache	fmt/fs.c	/^5690 } icache;$/;"	v	typeref:struct:__anon8
icache	fs.c	/^} icache;$/;"	v	typeref:struct:__anon16
id	kernel.asm	/^  id = ioapicread(REG_ID) >> 24;$/;"	d
ideinit	fmt/ide.c	/^4801 ideinit(void)$/;"	f
ideinit	ide.c	/^ideinit(void)$/;"	f
ideinit	memide.c	/^ideinit(void)$/;"	f
ideintr	fmt/ide.c	/^4854 ideintr(void)$/;"	f
ideintr	ide.c	/^ideintr(void)$/;"	f
ideintr	memide.c	/^ideintr(void)$/;"	f
idelock	fmt/ide.c	/^4780 static struct spinlock idelock;$/;"	v	typeref:struct:spinlock	file:
idelock	ide.c	/^static struct spinlock idelock;$/;"	v	typeref:struct:spinlock	file:
idequeue	fmt/ide.c	/^4781 static struct buf *idequeue;$/;"	v	typeref:struct:buf	file:
idequeue	ide.c	/^static struct buf *idequeue;$/;"	v	typeref:struct:buf	file:
idequeue	kernel.asm	/^  idequeue = b->qnext;$/;"	d
iderw	fmt/ide.c	/^4904 iderw(struct buf *b)$/;"	f
iderw	ide.c	/^iderw(struct buf *b)$/;"	f
iderw	memide.c	/^iderw(struct buf *b)$/;"	f
idestart	fmt/ide.c	/^4824 idestart(struct buf *b)$/;"	f	file:
idestart	ide.c	/^idestart(struct buf *b)$/;"	f	file:
idewait	fmt/ide.c	/^4788 idewait(int checkerr)$/;"	f	file:
idewait	ide.c	/^idewait(int checkerr)$/;"	f	file:
idt	fmt/trap.c	/^3711 struct gatedesc idt[256];$/;"	v	typeref:struct:gatedesc
idt	trap.c	/^struct gatedesc idt[256];$/;"	v	typeref:struct:gatedesc
idtinit	fmt/trap.c	/^3729 idtinit(void)$/;"	f
idtinit	trap.c	/^idtinit(void)$/;"	f
idup	fmt/fs.c	/^5839 idup(struct inode *ip)$/;"	f
idup	fs.c	/^idup(struct inode *ip)$/;"	f
idx	test.c	/^int idx=0;$/;"	v
iget	fmt/fs.c	/^5804 iget(uint dev, uint inum)$/;"	f	file:
iget	fs.c	/^iget(uint dev, uint inum)$/;"	f	file:
iinit	fmt/fs.c	/^5693 iinit(int dev)$/;"	f
iinit	fs.c	/^iinit(int dev)$/;"	f
ilock	fmt/fs.c	/^5853 ilock(struct inode *ip)$/;"	f
ilock	fs.c	/^ilock(struct inode *ip)$/;"	f
imcrp	fmt/mp.h	/^7609   uchar imcrp;$/;"	m	struct:mp
imcrp	mp.h	/^  uchar imcrp;$/;"	m	struct:mp
inb	fmt/x86.h	/^0453 inb(ushort port)$/;"	f
inb	x86.h	/^inb(ushort port)$/;"	f
init	initcode.S	/^init:$/;"	l
initlock	fmt/spinlock.c	/^1562 initlock(struct spinlock *lk, char *name)$/;"	f
initlock	spinlock.c	/^initlock(struct spinlock *lk, char *name)$/;"	f
initlog	fmt/log.c	/^5306 initlog(int dev)$/;"	f
initlog	log.c	/^initlog(int dev)$/;"	f
initproc	fmt/proc.c	/^2416 static struct proc *initproc;$/;"	v	typeref:struct:proc	file:
initproc	kernel.asm	/^  initproc = p;$/;"	d
initproc	proc.c	/^static struct proc *initproc;$/;"	v	typeref:struct:proc	file:
initsleeplock	fmt/sleeplock.c	/^5163 initsleeplock(struct sleeplock *lk, char *name)$/;"	f
initsleeplock	sleeplock.c	/^initsleeplock(struct sleeplock *lk, char *name)$/;"	f
inituvm	fmt/vm.c	/^1886 inituvm(pde_t *pgdir, char *init, uint sz)$/;"	f
inituvm	vm.c	/^inituvm(pde_t *pgdir, char *init, uint sz)$/;"	f
ino	fmt/stat.h	/^4557   uint ino;    \/\/ Inode number$/;"	m	struct:stat
ino	stat.h	/^  uint ino;    \/\/ Inode number$/;"	m	struct:stat
inode	file.h	/^struct inode {$/;"	s
inode	fmt/file.h	/^4712 struct inode {$/;"	s
inode	fmt/fs.c	/^5689   struct inode inode[NINODE];$/;"	m	struct:__anon8	typeref:struct:__anon8::inode	file:
inode	fs.c	/^  struct inode inode[NINODE];$/;"	m	struct:__anon16	typeref:struct:__anon16::inode	file:
inodestart	fmt/fs.h	/^4619   uint inodestart;   \/\/ Block number of first inode block$/;"	m	struct:superblock
inodestart	fs.h	/^  uint inodestart;   \/\/ Block number of first inode block$/;"	m	struct:superblock
input	console.c	/^} input;$/;"	v	typeref:struct:__anon14
input	fmt/console.c	/^8722 } input;$/;"	v	typeref:struct:__anon6
insl	fmt/x86.h	/^0462 insl(int port, void *addr, int cnt)$/;"	f
insl	x86.h	/^insl(int port, void *addr, int cnt)$/;"	f
install_trans	fmt/log.c	/^5322 install_trans(void)$/;"	f	file:
install_trans	log.c	/^install_trans(void)$/;"	f	file:
int	cat.asm	/^int$/;"	l
int	echo.asm	/^int$/;"	l
int	forktest.asm	/^int$/;"	l
int	getnice.asm	/^int main(int argc, char *argv[])$/;"	l
int	getnice.asm	/^int$/;"	l
int	gettid.asm	/^int main(int argc, char *argv[])$/;"	l
int	gettid.asm	/^int$/;"	l
int	grep.asm	/^int match(char*, char*);$/;"	l
int	grep.asm	/^int matchhere(char *re, char *text)$/;"	l
int	grep.asm	/^int matchhere(char*, char*);$/;"	l
int	grep.asm	/^int matchstar(int c, char *re, char *text)$/;"	l
int	grep.asm	/^int matchstar(int, char*, char*);$/;"	l
int	grep.asm	/^int$/;"	l
int	halt.asm	/^int main(void) {$/;"	l
int	halt.asm	/^int$/;"	l
int	init.asm	/^int$/;"	l
int	kernel.asm	/^int cond_init(struct cond_t *cond)$/;"	l
int	kernel.asm	/^int cond_signal(struct cond_t *cond)$/;"	l
int	kernel.asm	/^int cond_wait(struct cond_t *cond, struct mutex_t *mutex)$/;"	l
int	kernel.asm	/^int gettid()$/;"	l
int	kernel.asm	/^int mutex_init(struct mutex_t *mutex)$/;"	l
int	kernel.asm	/^int mutex_lock(struct mutex_t *mutex)$/;"	l
int	kernel.asm	/^int mutex_unlock(struct mutex_t *mutex)$/;"	l
int	kernel.asm	/^int thread_create(void* (*function)(void*), void* arg, void* stack)$/;"	l
int	kernel.asm	/^int tsleep(struct mutex_t *mutex)$/;"	l
int	kernel.asm	/^int twake(struct proc *p)$/;"	l
int	kernel.asm	/^int$/;"	l
int	kill.asm	/^int$/;"	l
int	ln.asm	/^int$/;"	l
int	ls.asm	/^int$/;"	l
int	mkdir.asm	/^int$/;"	l
int	ps.asm	/^int main(int argc, char *argv[])$/;"	l
int	ps.asm	/^int$/;"	l
int	rm.asm	/^int$/;"	l
int	setnice.asm	/^int main(int argc, char *argv[])$/;"	l
int	setnice.asm	/^int$/;"	l
int	sh.asm	/^int$/;"	l
int	stressfs.asm	/^int$/;"	l
int	test.asm	/^int buffer[10];$/;"	l
int	test.asm	/^int condition = 0;$/;"	l
int	test.asm	/^int idx=0;$/;"	l
int	test.asm	/^int$/;"	l
int	thread_create.asm	/^int main(int argc, char *argv[])$/;"	l
int	thread_create.asm	/^int$/;"	l
int	thread_exit.asm	/^int main(int argc, char *argv[])$/;"	l
int	thread_exit.asm	/^int$/;"	l
int	thread_join.asm	/^int main(int argc, char *argv[])$/;"	l
int	thread_join.asm	/^int$/;"	l
int	usertests.asm	/^int stdout = 1;$/;"	l
int	usertests.asm	/^int$/;"	l
int	wc.asm	/^int$/;"	l
int	zombie.asm	/^int$/;"	l
intena	fmt/proc.h	/^2308   int intena;                  \/\/ Were interrupts enabled before pushcli?$/;"	m	struct:cpu
intena	kernel.asm	/^  intena = mycpu()->intena;$/;"	d
intena	proc.h	/^  int intena;                  \/\/ Were interrupts enabled before pushcli?$/;"	m	struct:cpu
inum	file.h	/^  uint inum;          \/\/ Inode number$/;"	m	struct:inode
inum	fmt/file.h	/^4714   uint inum;          \/\/ Inode number$/;"	m	struct:inode
inum	fmt/fs.h	/^4666   ushort inum;$/;"	m	struct:dirent
inum	fs.h	/^  ushort inum;$/;"	m	struct:dirent
inum	kernel.asm	/^      inum = de.inum;$/;"	d
inword	wc.asm	/^        inword = 0;$/;"	d
inword	wc.asm	/^        inword = 1;$/;"	d
inword	wc.asm	/^  inword = 0;$/;"	d
ioapic	fmt/ioapic.c	/^8174 volatile struct ioapic *ioapic;$/;"	v	typeref:struct:ioapic
ioapic	fmt/ioapic.c	/^8177 struct ioapic {$/;"	s	file:
ioapic	ioapic.c	/^struct ioapic {$/;"	s	file:
ioapic	ioapic.c	/^volatile struct ioapic *ioapic;$/;"	v	typeref:struct:ioapic
ioapic	kernel.asm	/^      ioapic = (struct mpioapic*)p;$/;"	d
ioapic	kernel.asm	/^  ioapic = (volatile struct ioapic*)IOAPIC;$/;"	d
ioapicenable	fmt/ioapic.c	/^8220 ioapicenable(int irq, int cpunum)$/;"	f
ioapicenable	ioapic.c	/^ioapicenable(int irq, int cpunum)$/;"	f
ioapicid	fmt/mp.c	/^7765 uchar ioapicid;$/;"	v
ioapicid	kernel.asm	/^      ioapicid = ioapic->apicno;$/;"	d
ioapicid	mp.c	/^uchar ioapicid;$/;"	v
ioapicinit	fmt/ioapic.c	/^8201 ioapicinit(void)$/;"	f
ioapicinit	ioapic.c	/^ioapicinit(void)$/;"	f
ioapicread	fmt/ioapic.c	/^8184 ioapicread(int reg)$/;"	f	file:
ioapicread	ioapic.c	/^ioapicread(int reg)$/;"	f	file:
ioapicwrite	fmt/ioapic.c	/^8191 ioapicwrite(int reg, uint data)$/;"	f	file:
ioapicwrite	ioapic.c	/^ioapicwrite(int reg, uint data)$/;"	f	file:
iomb	fmt/mmu.h	/^0851   ushort iomb;       \/\/ I\/O map base address$/;"	m	struct:taskstate
iomb	mmu.h	/^  ushort iomb;       \/\/ I\/O map base address$/;"	m	struct:taskstate
ip	file.h	/^  struct inode *ip;$/;"	m	struct:file	typeref:struct:file::inode
ip	fmt/file.h	/^4706   struct inode *ip;$/;"	m	struct:file	typeref:struct:file::inode
ip	kernel.asm	/^    ip = create(path, T_FILE, 0, 0);$/;"	d
ip	kernel.asm	/^    ip = idup(myproc()->cwd);$/;"	d
ip	kernel.asm	/^    ip = iget(ROOTDEV, ROOTINO);$/;"	d
ip	kernel.asm	/^    ip = next;$/;"	d
ip	kernel.asm	/^  ip = 0;$/;"	d
ip	kernel.asm	/^  ip = empty;$/;"	d
iput	fmt/fs.c	/^5908 iput(struct inode *ip)$/;"	f
iput	fs.c	/^iput(struct inode *ip)$/;"	f
iputtest	usertests.c	/^iputtest(void)$/;"	f
iref	usertests.c	/^iref(void)$/;"	f
isdirempty	fmt/sysfile.c	/^6802 isdirempty(struct inode *dp)$/;"	f	file:
isdirempty	sysfile.c	/^isdirempty(struct inode *dp)$/;"	f	file:
ismp	kernel.asm	/^      ismp = 0;$/;"	d
ismp	kernel.asm	/^  ismp = 1;$/;"	d
itrunc	fmt/fs.c	/^6006 itrunc(struct inode *ip)$/;"	f	file:
itrunc	fs.c	/^itrunc(struct inode *ip)$/;"	f	file:
iunlock	fmt/fs.c	/^5881 iunlock(struct inode *ip)$/;"	f
iunlock	fs.c	/^iunlock(struct inode *ip)$/;"	f
iunlockput	fmt/fs.c	/^5932 iunlockput(struct inode *ip)$/;"	f
iunlockput	fs.c	/^iunlockput(struct inode *ip)$/;"	f
iupdate	fmt/fs.c	/^5780 iupdate(struct inode *ip)$/;"	f
iupdate	fs.c	/^iupdate(struct inode *ip)$/;"	f
kalloc	fmt/kalloc.c	/^3537 kalloc(void)$/;"	f
kalloc	kalloc.c	/^kalloc(void)$/;"	f
kbdgetc	fmt/kbd.c	/^8406 kbdgetc(void)$/;"	f
kbdgetc	kbd.c	/^kbdgetc(void)$/;"	f
kbdintr	fmt/kbd.c	/^8446 kbdintr(void)$/;"	f
kbdintr	kbd.c	/^kbdintr(void)$/;"	f
kernel	kernel.asm	/^kernel:     file format elf32-i386$/;"	l
kfree	fmt/kalloc.c	/^3514 kfree(char *v)$/;"	f
kfree	kalloc.c	/^kfree(char *v)$/;"	f
kill	fmt/proc.c	/^3025 kill(int pid)$/;"	f
kill	proc.c	/^kill(int pid)$/;"	f
killed	fmt/proc.h	/^2348   int killed;                  \/\/ If non-zero, have been killed$/;"	m	struct:proc
killed	proc.h	/^  int killed;                  \/\/ If non-zero, have been killed$/;"	m	struct:proc
kinit1	fmt/kalloc.c	/^3481 kinit1(void *vstart, void *vend)$/;"	f
kinit1	kalloc.c	/^kinit1(void *vstart, void *vend)$/;"	f
kinit2	fmt/kalloc.c	/^3489 kinit2(void *vstart, void *vend)$/;"	f
kinit2	kalloc.c	/^kinit2(void *vstart, void *vend)$/;"	f
kmap	fmt/vm.c	/^1804 static struct kmap {$/;"	s	file:
kmap	fmt/vm.c	/^1809 } kmap[] = {$/;"	v	typeref:struct:kmap	file:
kmap	vm.c	/^static struct kmap {$/;"	s	file:
kmap	vm.c	/^} kmap[] = {$/;"	v	typeref:struct:kmap	file:
kmem	fmt/kalloc.c	/^3473 } kmem;$/;"	v	typeref:struct:__anon3
kmem	kalloc.c	/^} kmem;$/;"	v	typeref:struct:__anon11
kpgdir	fmt/vm.c	/^1710 pde_t *kpgdir;  \/\/ for use in scheduler()$/;"	v
kpgdir	kernel.asm	/^  kpgdir = setupkvm();$/;"	d
kpgdir	vm.c	/^pde_t *kpgdir;  \/\/ for use in scheduler()$/;"	v
kstack	fmt/proc.h	/^2340   char *kstack;                \/\/ Bottom of kernel stack for this process$/;"	m	struct:proc
kstack	proc.h	/^  char *kstack;                \/\/ Bottom of kernel stack for this process$/;"	m	struct:proc
kvmalloc	fmt/vm.c	/^1840 kvmalloc(void)$/;"	f
kvmalloc	vm.c	/^kvmalloc(void)$/;"	f
l	wc.asm	/^  l = w = c = 0;$/;"	d
lapic	fmt/lapic.c	/^7943 volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	v
lapic	kernel.asm	/^  lapic = (uint*)conf->lapicaddr;$/;"	d
lapic	lapic.c	/^volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	v
lapicaddr	fmt/mp.h	/^7622   uint *lapicaddr;              \/\/ address of local APIC$/;"	m	struct:mpconf
lapicaddr	mp.h	/^  uint *lapicaddr;              \/\/ address of local APIC$/;"	m	struct:mpconf
lapiceoi	fmt/lapic.c	/^8014 lapiceoi(void)$/;"	f
lapiceoi	lapic.c	/^lapiceoi(void)$/;"	f
lapicid	fmt/lapic.c	/^8005 lapicid(void)$/;"	f
lapicid	lapic.c	/^lapicid(void)$/;"	f
lapicinit	fmt/lapic.c	/^7958 lapicinit(void)$/;"	f
lapicinit	lapic.c	/^lapicinit(void)$/;"	f
lapicstartap	fmt/lapic.c	/^8033 lapicstartap(uchar apicid, uint addr)$/;"	f
lapicstartap	lapic.c	/^lapicstartap(uchar apicid, uint addr)$/;"	f
lapicw	fmt/lapic.c	/^7951 lapicw(int index, int value)$/;"	f	file:
lapicw	lapic.c	/^lapicw(int index, int value)$/;"	f	file:
last	kernel.asm	/^      last = s+1;$/;"	d
last	kernel.asm	/^  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);$/;"	d
lastaddr	usertests.asm	/^  lastaddr = (char*) (BIG-1);$/;"	d
lcmd	sh.asm	/^    lcmd = (struct listcmd*)cmd;$/;"	d
lcr3	fmt/x86.h	/^0590 lcr3(uint val)$/;"	f
lcr3	x86.h	/^lcr3(uint val)$/;"	f
ldt	fmt/mmu.h	/^0848   ushort ldt;$/;"	m	struct:taskstate
ldt	mmu.h	/^  ushort ldt;$/;"	m	struct:taskstate
left	fmt/sh.c	/^9136   struct cmd *left;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
left	fmt/sh.c	/^9142   struct cmd *left;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
left	sh.c	/^  struct cmd *left;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
left	sh.c	/^  struct cmd *left;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
len	kernel.asm	/^  len = path - s;$/;"	d
length	fmt/mp.h	/^7605   uchar length;                 \/\/ 1$/;"	m	struct:mp
length	fmt/mp.h	/^7615   ushort length;                \/\/ total table length$/;"	m	struct:mpconf
length	mp.h	/^  uchar length;                 \/\/ 1$/;"	m	struct:mp
length	mp.h	/^  ushort length;                \/\/ total table length$/;"	m	struct:mpconf
lgdt	fmt/x86.h	/^0512 lgdt(struct segdesc *p, int size)$/;"	f
lgdt	x86.h	/^lgdt(struct segdesc *p, int size)$/;"	f
lh	fmt/log.c	/^5295   struct logheader lh;$/;"	m	struct:log	typeref:struct:log::logheader	file:
lh	log.c	/^  struct logheader lh;$/;"	m	struct:log	typeref:struct:log::logheader	file:
lidt	fmt/x86.h	/^0526 lidt(struct gatedesc *p, int size)$/;"	f
lidt	x86.h	/^lidt(struct gatedesc *p, int size)$/;"	f
lim_15_0	fmt/mmu.h	/^0726   uint lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:segdesc
lim_15_0	mmu.h	/^  uint lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:segdesc
lim_19_16	fmt/mmu.h	/^0733   uint lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:segdesc
lim_19_16	mmu.h	/^  uint lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:segdesc
link	fmt/mmu.h	/^0815   uint link;         \/\/ Old ts selector$/;"	m	struct:taskstate
link	mmu.h	/^  uint link;         \/\/ Old ts selector$/;"	m	struct:taskstate
linktest	usertests.c	/^linktest(void)$/;"	f
linkunlink	usertests.c	/^linkunlink()$/;"	f
listcmd	fmt/sh.c	/^9140 struct listcmd {$/;"	s	file:
listcmd	fmt/sh.c	/^9351 listcmd(struct cmd *left, struct cmd *right)$/;"	f
listcmd	sh.c	/^listcmd(struct cmd *left, struct cmd *right)$/;"	f
listcmd	sh.c	/^struct listcmd {$/;"	s	file:
lk	fmt/sleeplock.h	/^4453   struct spinlock lk; \/\/ spinlock protecting this sleep lock$/;"	m	struct:sleeplock	typeref:struct:sleeplock::spinlock
lk	sleeplock.h	/^  struct spinlock lk; \/\/ spinlock protecting this sleep lock$/;"	m	struct:sleeplock	typeref:struct:sleeplock::spinlock
loadgs	fmt/x86.h	/^0551 loadgs(ushort v)$/;"	f
loadgs	x86.h	/^loadgs(ushort v)$/;"	f
loaduvm	fmt/vm.c	/^1903 loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)$/;"	f
loaduvm	vm.c	/^loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)$/;"	f
lock	bio.c	/^  struct spinlock lock;$/;"	m	struct:__anon12	typeref:struct:__anon12::spinlock	file:
lock	buf.h	/^  struct sleeplock lock;$/;"	m	struct:buf	typeref:struct:buf::sleeplock
lock	console.c	/^  struct spinlock lock;$/;"	m	struct:__anon13	typeref:struct:__anon13::spinlock	file:
lock	file.c	/^  struct spinlock lock;$/;"	m	struct:__anon15	typeref:struct:__anon15::spinlock	file:
lock	file.h	/^  struct sleeplock lock; \/\/ protects everything below here$/;"	m	struct:inode	typeref:struct:inode::sleeplock
lock	fmt/bio.c	/^4979   struct spinlock lock;$/;"	m	struct:__anon4	typeref:struct:__anon4::spinlock	file:
lock	fmt/buf.h	/^4404   struct sleeplock lock;$/;"	m	struct:buf	typeref:struct:buf::sleeplock
lock	fmt/console.c	/^8472   struct spinlock lock;$/;"	m	struct:__anon5	typeref:struct:__anon5::spinlock	file:
lock	fmt/file.c	/^6414   struct spinlock lock;$/;"	m	struct:__anon7	typeref:struct:__anon7::spinlock	file:
lock	fmt/file.h	/^4716   struct sleeplock lock; \/\/ protects everything below here$/;"	m	struct:inode	typeref:struct:inode::sleeplock
lock	fmt/fs.c	/^5688   struct spinlock lock;$/;"	m	struct:__anon8	typeref:struct:__anon8::spinlock	file:
lock	fmt/kalloc.c	/^3470   struct spinlock lock;$/;"	m	struct:__anon3	typeref:struct:__anon3::spinlock	file:
lock	fmt/log.c	/^5289   struct spinlock lock;$/;"	m	struct:log	typeref:struct:log::spinlock	file:
lock	fmt/pipe.c	/^7313   struct spinlock lock;$/;"	m	struct:pipe	typeref:struct:pipe::spinlock	file:
lock	fmt/proc.c	/^2412   struct spinlock lock;$/;"	m	struct:__anon1	typeref:struct:__anon1::spinlock	file:
lock	fs.c	/^  struct spinlock lock;$/;"	m	struct:__anon16	typeref:struct:__anon16::spinlock	file:
lock	kalloc.c	/^  struct spinlock lock;$/;"	m	struct:__anon11	typeref:struct:__anon11::spinlock	file:
lock	log.c	/^  struct spinlock lock;$/;"	m	struct:log	typeref:struct:log::spinlock	file:
lock	pipe.c	/^  struct spinlock lock;$/;"	m	struct:pipe	typeref:struct:pipe::spinlock	file:
lock	proc.c	/^  struct spinlock lock;$/;"	m	struct:__anon9	typeref:struct:__anon9::spinlock	file:
lock	synch.h	/^  struct spinlock lock;$/;"	m	struct:cond_t	typeref:struct:cond_t::spinlock
lock	synch.h	/^  struct spinlock lock;$/;"	m	struct:mutex_t	typeref:struct:mutex_t::spinlock
locked	fmt/sleeplock.h	/^4452   uint locked;       \/\/ Is the lock held?$/;"	m	struct:sleeplock
locked	fmt/spinlock.h	/^1502   uint locked;       \/\/ Is the lock held?$/;"	m	struct:spinlock
locked	sleeplock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:sleeplock
locked	spinlock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:spinlock
locking	console.c	/^  int locking;$/;"	m	struct:__anon13	file:
locking	fmt/console.c	/^8473   int locking;$/;"	m	struct:__anon5	file:
locking	kernel.asm	/^  locking = cons.locking;$/;"	d
log	fmt/log.c	/^5288 struct log {$/;"	s	file:
log	fmt/log.c	/^5300 struct log log;$/;"	v	typeref:struct:log
log	log.c	/^struct log log;$/;"	v	typeref:struct:log
log	log.c	/^struct log {$/;"	s	file:
log_write	fmt/log.c	/^5472 log_write(struct buf *b)$/;"	f
log_write	log.c	/^log_write(struct buf *b)$/;"	f
logheader	fmt/log.c	/^5283 struct logheader {$/;"	s	file:
logheader	log.c	/^struct logheader {$/;"	s	file:
logstart	fmt/fs.h	/^4618   uint logstart;     \/\/ Block number of first log block$/;"	m	struct:superblock
logstart	fs.h	/^  uint logstart;     \/\/ Block number of first log block$/;"	m	struct:superblock
ls	ls.c	/^ls(char *path)$/;"	f
ltr	fmt/x86.h	/^0538 ltr(ushort sel)$/;"	f
ltr	x86.h	/^ltr(ushort sel)$/;"	f
m	grep.asm	/^      m = 0;$/;"	d
m	grep.asm	/^  m = 0;$/;"	d
m	kernel.asm	/^      m = 1 << (bi % 8);$/;"	d
m	kernel.asm	/^    m = min(n - tot, BSIZE - off%BSIZE);$/;"	d
m	kernel.asm	/^  m = 1 << (bi % 8);$/;"	d
m	test.c	/^struct mutex_t m;$/;"	v	typeref:struct:mutex_t
m1	usertests.asm	/^      m1 = m2;$/;"	d
m1	usertests.asm	/^    m1 = 0;$/;"	d
m1	usertests.asm	/^    m1 = malloc(1024*20);$/;"	d
m2	usertests.asm	/^      m2 = *(char**)m1;$/;"	d
machine	elf.h	/^  ushort machine;$/;"	m	struct:elfhdr
machine	fmt/elf.h	/^0909   ushort machine;$/;"	m	struct:elfhdr
magic	elf.h	/^  uint magic;  \/\/ must equal ELF_MAGIC$/;"	m	struct:elfhdr
magic	fmt/elf.h	/^0906   uint magic;  \/\/ must equal ELF_MAGIC$/;"	m	struct:elfhdr
main	cat.c	/^main(int argc, char *argv[])$/;"	f
main	echo.c	/^main(int argc, char *argv[])$/;"	f
main	fmt/init.c	/^9060 main(void)$/;"	f
main	fmt/main.c	/^1217 main(void)$/;"	f
main	fmt/sh.c	/^9251 main(void)$/;"	f
main	forktest.c	/^main(void)$/;"	f
main	getnice.c	/^int main(int argc, char *argv[])$/;"	f
main	gettid.c	/^int main(int argc, char *argv[])$/;"	f
main	grep.c	/^main(int argc, char *argv[])$/;"	f
main	halt.c	/^int main(void) {$/;"	f
main	init.c	/^main(void)$/;"	f
main	kill.c	/^main(int argc, char **argv)$/;"	f
main	ln.c	/^main(int argc, char *argv[])$/;"	f
main	ls.c	/^main(int argc, char *argv[])$/;"	f
main	main.c	/^main(void)$/;"	f
main	mkdir.c	/^main(int argc, char *argv[])$/;"	f
main	mkfs.c	/^main(int argc, char *argv[])$/;"	f
main	ps.c	/^int main(int argc, char *argv[])$/;"	f
main	rm.c	/^main(int argc, char *argv[])$/;"	f
main	setnice.c	/^int main(int argc, char *argv[])$/;"	f
main	sh.c	/^main(void)$/;"	f
main	stressfs.c	/^main(int argc, char *argv[])$/;"	f
main	test.c	/^main(int argc, char **argv)$/;"	f
main	thread_create.c	/^int main(int argc, char *argv[])$/;"	f
main	thread_exit.c	/^int main(int argc, char *argv[])$/;"	f
main	thread_join.c	/^int main(int argc, char *argv[])$/;"	f
main	usertests.c	/^main(int argc, char *argv[])$/;"	f
main	wc.c	/^main(int argc, char *argv[])$/;"	f
main	zombie.c	/^main(void)$/;"	f
major	file.h	/^  short major;$/;"	m	struct:inode
major	fmt/file.h	/^4720   short major;$/;"	m	struct:inode
major	fmt/fs.h	/^4630   short major;          \/\/ Major device number (T_DEV only)$/;"	m	struct:dinode
major	fs.h	/^  short major;          \/\/ Major device number (T_DEV only)$/;"	m	struct:dinode
malloc	umalloc.c	/^malloc(uint nbytes)$/;"	f
mappages	fmt/vm.c	/^1760 mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)$/;"	f	file:
mappages	vm.c	/^mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)$/;"	f	file:
match	grep.c	/^match(char *re, char *text)$/;"	f
matchhere	grep.c	/^int matchhere(char *re, char *text)$/;"	f
matchstar	grep.c	/^int matchstar(int c, char *re, char *text)$/;"	f
maxintr	kernel.asm	/^  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;$/;"	d
mem	kernel.asm	/^    mem = kalloc();$/;"	d
mem	kernel.asm	/^  mem = kalloc();$/;"	d
mem	usertests.c	/^mem(void)$/;"	f
memcmp	fmt/string.c	/^7465 memcmp(const void *v1, const void *v2, uint n)$/;"	f
memcmp	string.c	/^memcmp(const void *v1, const void *v2, uint n)$/;"	f
memcpy	fmt/string.c	/^7502 memcpy(void *dst, const void *src, uint n)$/;"	f
memcpy	string.c	/^memcpy(void *dst, const void *src, uint n)$/;"	f
memdisk	memide.c	/^static uchar *memdisk;$/;"	v	file:
memmove	fmt/string.c	/^7481 memmove(void *dst, const void *src, uint n)$/;"	f
memmove	string.c	/^memmove(void *dst, const void *src, uint n)$/;"	f
memmove	ulib.c	/^memmove(void *vdst, const void *vsrc, int n)$/;"	f
memset	fmt/string.c	/^7454 memset(void *dst, int c, uint n)$/;"	f
memset	string.c	/^memset(void *dst, int c, uint n)$/;"	f
memset	ulib.c	/^memset(void *dst, int c, uint n)$/;"	f
memsz	elf.h	/^  uint memsz;$/;"	m	struct:proghdr
memsz	fmt/elf.h	/^0930   uint memsz;$/;"	m	struct:proghdr
microdelay	fmt/lapic.c	/^8023 microdelay(int us)$/;"	f
microdelay	lapic.c	/^microdelay(int us)$/;"	f
min	fs.c	24;"	d	file:
min	mkfs.c	253;"	d	file:
minor	file.h	/^  short minor;$/;"	m	struct:inode
minor	fmt/file.h	/^4721   short minor;$/;"	m	struct:inode
minor	fmt/fs.h	/^4631   short minor;          \/\/ Minor device number (T_DEV only)$/;"	m	struct:dinode
minor	fs.h	/^  short minor;          \/\/ Minor device number (T_DEV only)$/;"	m	struct:dinode
minute	date.h	/^  uint minute;$/;"	m	struct:rtcdate
minute	fmt/date.h	/^0952   uint minute;$/;"	m	struct:rtcdate
mode	fmt/sh.c	/^9130   int mode;$/;"	m	struct:redircmd	file:
mode	sh.c	/^  int mode;$/;"	m	struct:redircmd	file:
month	date.h	/^  uint month;$/;"	m	struct:rtcdate
month	fmt/date.h	/^0955   uint month;$/;"	m	struct:rtcdate
morecore	umalloc.c	/^morecore(uint nu)$/;"	f	file:
mp	fmt/mp.h	/^7602 struct mp {             \/\/ floating pointer$/;"	s
mp	mp.h	/^struct mp {             \/\/ floating pointer$/;"	s
mpconf	fmt/mp.h	/^7613 struct mpconf {         \/\/ configuration table header$/;"	s
mpconf	mp.h	/^struct mpconf {         \/\/ configuration table header$/;"	s
mpconfig	fmt/mp.c	/^7830 mpconfig(struct mp **pmp)$/;"	f	file:
mpconfig	mp.c	/^mpconfig(struct mp **pmp)$/;"	f	file:
mpenter	fmt/main.c	/^1241 mpenter(void)$/;"	f	file:
mpenter	main.c	/^mpenter(void)$/;"	f	file:
mpinit	fmt/mp.c	/^7851 mpinit(void)$/;"	f
mpinit	mp.c	/^mpinit(void)$/;"	f
mpioapic	fmt/mp.h	/^7639 struct mpioapic {       \/\/ I\/O APIC table entry$/;"	s
mpioapic	mp.h	/^struct mpioapic {       \/\/ I\/O APIC table entry$/;"	s
mpmain	fmt/main.c	/^1252 mpmain(void)$/;"	f	file:
mpmain	main.c	/^mpmain(void)$/;"	f	file:
mpproc	fmt/mp.h	/^7628 struct mpproc {         \/\/ processor table entry$/;"	s
mpproc	mp.h	/^struct mpproc {         \/\/ processor table entry$/;"	s
mpsearch	fmt/mp.c	/^7806 mpsearch(void)$/;"	f	file:
mpsearch	mp.c	/^mpsearch(void)$/;"	f	file:
mpsearch1	fmt/mp.c	/^7780 mpsearch1(uint a, int len)$/;"	f	file:
mpsearch1	mp.c	/^mpsearch1(uint a, int len)$/;"	f	file:
multiboot_header	entry.S	/^multiboot_header:$/;"	l
mutex_init	synch.c	/^int mutex_init(struct mutex_t *mutex)$/;"	f
mutex_lock	synch.c	/^int mutex_lock(struct mutex_t *mutex)$/;"	f
mutex_t	synch.h	/^struct mutex_t{$/;"	s
mutex_unlock	synch.c	/^int mutex_unlock(struct mutex_t *mutex)$/;"	f
mycpu	fmt/proc.c	/^2453 mycpu(void)$/;"	f
mycpu	proc.c	/^mycpu(void)$/;"	f
myproc	fmt/proc.c	/^2473 myproc(void) {$/;"	f
myproc	proc.c	/^myproc(void) {$/;"	f
n	cat.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	cat.asm	/^  n = 0;$/;"	d
n	echo.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	echo.asm	/^  n = 0;$/;"	d
n	fmt/log.c	/^5284   int n;$/;"	m	struct:logheader	file:
n	forktest.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	forktest.asm	/^  n = 0;$/;"	d
n	getnice.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	getnice.asm	/^  n = 0;$/;"	d
n	gettid.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	gettid.asm	/^  n = 0;$/;"	d
n	grep.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	grep.asm	/^  n = 0;$/;"	d
n	halt.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	halt.asm	/^  n = 0;$/;"	d
n	init.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	init.asm	/^  n = 0;$/;"	d
n	kernel.asm	/^      n = PGSIZE;$/;"	d
n	kernel.asm	/^      n = len;$/;"	d
n	kernel.asm	/^      n = sz - i;$/;"	d
n	kernel.asm	/^    n = PGSIZE - (va - va0);$/;"	d
n	kernel.asm	/^    n = ip->size - off;$/;"	d
n	kill.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	kill.asm	/^  n = 0;$/;"	d
n	ln.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	ln.asm	/^  n = 0;$/;"	d
n	log.c	/^  int n;$/;"	m	struct:logheader	file:
n	ls.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	ls.asm	/^  n = 0;$/;"	d
n	mkdir.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	mkdir.asm	/^  n = 0;$/;"	d
n	ps.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	ps.asm	/^  n = 0;$/;"	d
n	rm.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	rm.asm	/^  n = 0;$/;"	d
n	setnice.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	setnice.asm	/^  n = 0;$/;"	d
n	sh.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	sh.asm	/^  n = 0;$/;"	d
n	stressfs.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	stressfs.asm	/^  n = 0;$/;"	d
n	test.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	test.asm	/^  n = 0;$/;"	d
n	thread_create.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	thread_create.asm	/^  n = 0;$/;"	d
n	thread_exit.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	thread_exit.asm	/^  n = 0;$/;"	d
n	thread_join.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	thread_join.asm	/^  n = 0;$/;"	d
n	usertests.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	usertests.asm	/^  n = 0;$/;"	d
n	wc.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	wc.asm	/^  n = 0;$/;"	d
n	zombie.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	zombie.asm	/^  n = 0;$/;"	d
n1	kernel.asm	/^        n1 = max;$/;"	d
name	cat.asm	/^  name: \\$/;"	l
name	echo.asm	/^  name: \\$/;"	l
name	fmt/fs.h	/^4667   char name[DIRSIZ];$/;"	m	struct:dirent
name	fmt/proc.h	/^2351   char name[16];               \/\/ Process name (debugging)$/;"	m	struct:proc
name	fmt/sleeplock.h	/^4456   char *name;        \/\/ Name of lock.$/;"	m	struct:sleeplock
name	fmt/spinlock.h	/^1505   char *name;        \/\/ Name of lock.$/;"	m	struct:spinlock
name	forktest.asm	/^  name: \\$/;"	l
name	fs.h	/^  char name[DIRSIZ];$/;"	m	struct:dirent
name	getnice.asm	/^  name: \\$/;"	l
name	gettid.asm	/^  name: \\$/;"	l
name	grep.asm	/^  name: \\$/;"	l
name	halt.asm	/^  name: \\$/;"	l
name	init.asm	/^  name: \\$/;"	l
name	kill.asm	/^  name: \\$/;"	l
name	ln.asm	/^  name: \\$/;"	l
name	ls.asm	/^  name: \\$/;"	l
name	mkdir.asm	/^  name: \\$/;"	l
name	proc.h	/^  char name[16];               \/\/ Process name (debugging)$/;"	m	struct:proc
name	ps.asm	/^  name: \\$/;"	l
name	rm.asm	/^  name: \\$/;"	l
name	setnice.asm	/^  name: \\$/;"	l
name	sh.asm	/^  name: \\$/;"	l
name	sleeplock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:sleeplock
name	spinlock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:spinlock
name	stressfs.asm	/^  name: \\$/;"	l
name	test.asm	/^  name: \\$/;"	l
name	thread_create.asm	/^  name: \\$/;"	l
name	thread_exit.asm	/^  name: \\$/;"	l
name	thread_join.asm	/^  name: \\$/;"	l
name	usertests.asm	/^  name: \\$/;"	l
name	usertests.c	/^char name[3];$/;"	v
name	usys.S	/^  name: \\$/;"	l
name	wc.asm	/^  name: \\$/;"	l
name	zombie.asm	/^  name: \\$/;"	l
namecmp	fmt/fs.c	/^6153 namecmp(const char *s, const char *t)$/;"	f
namecmp	fs.c	/^namecmp(const char *s, const char *t)$/;"	f
namei	fmt/fs.c	/^6340 namei(char *path)$/;"	f
namei	fs.c	/^namei(char *path)$/;"	f
nameiparent	fmt/fs.c	/^6351 nameiparent(char *path, char *name)$/;"	f
nameiparent	fs.c	/^nameiparent(char *path, char *name)$/;"	f
namex	fmt/fs.c	/^6305 namex(char *path, int nameiparent, char *name)$/;"	f	file:
namex	fs.c	/^namex(char *path, int nameiparent, char *name)$/;"	f	file:
nbitmap	mkfs.c	/^int nbitmap = FSSIZE\/(BSIZE*8) + 1;$/;"	v
nblocks	fmt/fs.h	/^4615   uint nblocks;      \/\/ Number of data blocks$/;"	m	struct:superblock
nblocks	fs.h	/^  uint nblocks;      \/\/ Number of data blocks$/;"	m	struct:superblock
nblocks	mkfs.c	/^int nblocks;  \/\/ Number of data blocks$/;"	v
nc	usertests.asm	/^  nc = np = 0;$/;"	d
ncli	fmt/proc.h	/^2307   int ncli;                    \/\/ Depth of pushcli nesting.$/;"	m	struct:cpu
ncli	proc.h	/^  int ncli;                    \/\/ Depth of pushcli nesting.$/;"	m	struct:cpu
ncpu	fmt/mp.c	/^7764 int ncpu;$/;"	v
ncpu	mp.c	/^int ncpu;$/;"	v
neg	cat.asm	/^    neg = 1;$/;"	d
neg	cat.asm	/^  neg = 0;$/;"	d
neg	echo.asm	/^    neg = 1;$/;"	d
neg	echo.asm	/^  neg = 0;$/;"	d
neg	getnice.asm	/^    neg = 1;$/;"	d
neg	getnice.asm	/^  neg = 0;$/;"	d
neg	gettid.asm	/^    neg = 1;$/;"	d
neg	gettid.asm	/^  neg = 0;$/;"	d
neg	grep.asm	/^    neg = 1;$/;"	d
neg	grep.asm	/^  neg = 0;$/;"	d
neg	halt.asm	/^    neg = 1;$/;"	d
neg	halt.asm	/^  neg = 0;$/;"	d
neg	init.asm	/^    neg = 1;$/;"	d
neg	init.asm	/^  neg = 0;$/;"	d
neg	kill.asm	/^    neg = 1;$/;"	d
neg	kill.asm	/^  neg = 0;$/;"	d
neg	ln.asm	/^    neg = 1;$/;"	d
neg	ln.asm	/^  neg = 0;$/;"	d
neg	ls.asm	/^    neg = 1;$/;"	d
neg	ls.asm	/^  neg = 0;$/;"	d
neg	mkdir.asm	/^    neg = 1;$/;"	d
neg	mkdir.asm	/^  neg = 0;$/;"	d
neg	ps.asm	/^    neg = 1;$/;"	d
neg	ps.asm	/^  neg = 0;$/;"	d
neg	rm.asm	/^    neg = 1;$/;"	d
neg	rm.asm	/^  neg = 0;$/;"	d
neg	setnice.asm	/^    neg = 1;$/;"	d
neg	setnice.asm	/^  neg = 0;$/;"	d
neg	sh.asm	/^    neg = 1;$/;"	d
neg	sh.asm	/^  neg = 0;$/;"	d
neg	stressfs.asm	/^    neg = 1;$/;"	d
neg	stressfs.asm	/^  neg = 0;$/;"	d
neg	test.asm	/^    neg = 1;$/;"	d
neg	test.asm	/^  neg = 0;$/;"	d
neg	thread_create.asm	/^    neg = 1;$/;"	d
neg	thread_create.asm	/^  neg = 0;$/;"	d
neg	thread_exit.asm	/^    neg = 1;$/;"	d
neg	thread_exit.asm	/^  neg = 0;$/;"	d
neg	thread_join.asm	/^    neg = 1;$/;"	d
neg	thread_join.asm	/^  neg = 0;$/;"	d
neg	usertests.asm	/^    neg = 1;$/;"	d
neg	usertests.asm	/^  neg = 0;$/;"	d
neg	wc.asm	/^    neg = 1;$/;"	d
neg	wc.asm	/^  neg = 0;$/;"	d
neg	zombie.asm	/^    neg = 1;$/;"	d
neg	zombie.asm	/^  neg = 0;$/;"	d
next	buf.h	/^  struct buf *next;$/;"	m	struct:buf	typeref:struct:buf::buf
next	fmt/buf.h	/^4407   struct buf *next;$/;"	m	struct:buf	typeref:struct:buf::buf
next	fmt/kalloc.c	/^3466   struct run *next;$/;"	m	struct:run	typeref:struct:run::run	file:
next	kalloc.c	/^  struct run *next;$/;"	m	struct:run	typeref:struct:run::run	file:
nextpid	fmt/proc.c	/^2418 int nextpid = 1;$/;"	v
nextpid	proc.c	/^int nextpid = 1;$/;"	v
nice	fmt/proc.h	/^2343   int nice;                    \/\/ Nice Value of Process$/;"	m	struct:proc
nice	proc.h	/^  int nice;                    \/\/ Nice Value of Process$/;"	m	struct:proc
ninodeblocks	mkfs.c	/^int ninodeblocks = NINODES \/ IPB + 1;$/;"	v
ninodes	fmt/fs.h	/^4616   uint ninodes;      \/\/ Number of inodes.$/;"	m	struct:superblock
ninodes	fs.h	/^  uint ninodes;      \/\/ Number of inodes.$/;"	m	struct:superblock
nlink	file.h	/^  short nlink;$/;"	m	struct:inode
nlink	fmt/file.h	/^4722   short nlink;$/;"	m	struct:inode
nlink	fmt/fs.h	/^4632   short nlink;          \/\/ Number of links to inode in file system$/;"	m	struct:dinode
nlink	fmt/stat.h	/^4558   short nlink; \/\/ Number of links to file$/;"	m	struct:stat
nlink	fs.h	/^  short nlink;          \/\/ Number of links to inode in file system$/;"	m	struct:dinode
nlink	stat.h	/^  short nlink; \/\/ Number of links to file$/;"	m	struct:stat
nlog	fmt/fs.h	/^4617   uint nlog;         \/\/ Number of log blocks$/;"	m	struct:superblock
nlog	fs.h	/^  uint nlog;         \/\/ Number of log blocks$/;"	m	struct:superblock
nlog	mkfs.c	/^int nlog = LOGSIZE;$/;"	v
nmeta	mkfs.c	/^int nmeta;    \/\/ Number of meta blocks (boot, sb, nlog, inode, bitmap)$/;"	v
normalmap	fmt/kbd.h	/^8300 static uchar normalmap[256] =$/;"	v
normalmap	kbd.h	/^static uchar normalmap[256] =$/;"	v
nread	fmt/pipe.c	/^7315   uint nread;     \/\/ number of bytes read$/;"	m	struct:pipe	file:
nread	pipe.c	/^  uint nread;     \/\/ number of bytes read$/;"	m	struct:pipe	file:
nu	cat.asm	/^    nu = 4096;$/;"	d
nu	echo.asm	/^    nu = 4096;$/;"	d
nu	getnice.asm	/^    nu = 4096;$/;"	d
nu	gettid.asm	/^    nu = 4096;$/;"	d
nu	grep.asm	/^    nu = 4096;$/;"	d
nu	halt.asm	/^    nu = 4096;$/;"	d
nu	init.asm	/^    nu = 4096;$/;"	d
nu	kill.asm	/^    nu = 4096;$/;"	d
nu	ln.asm	/^    nu = 4096;$/;"	d
nu	ls.asm	/^    nu = 4096;$/;"	d
nu	mkdir.asm	/^    nu = 4096;$/;"	d
nu	ps.asm	/^    nu = 4096;$/;"	d
nu	rm.asm	/^    nu = 4096;$/;"	d
nu	setnice.asm	/^    nu = 4096;$/;"	d
nu	sh.asm	/^    nu = 4096;$/;"	d
nu	stressfs.asm	/^    nu = 4096;$/;"	d
nu	test.asm	/^    nu = 4096;$/;"	d
nu	thread_create.asm	/^    nu = 4096;$/;"	d
nu	thread_exit.asm	/^    nu = 4096;$/;"	d
nu	thread_join.asm	/^    nu = 4096;$/;"	d
nu	usertests.asm	/^    nu = 4096;$/;"	d
nu	wc.asm	/^    nu = 4096;$/;"	d
nu	zombie.asm	/^    nu = 4096;$/;"	d
nulterminate	fmt/sh.c	/^9602 nulterminate(struct cmd *cmd)$/;"	f
nulterminate	sh.c	/^nulterminate(struct cmd *cmd)$/;"	f
num	kernel.asm	/^  num = curproc->tf->eax;$/;"	d
nunits	cat.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	echo.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	getnice.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	gettid.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	grep.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	halt.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	init.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	kill.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	ln.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	ls.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	mkdir.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	ps.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	rm.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	setnice.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	sh.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	stressfs.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	test.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	thread_create.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	thread_exit.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	thread_join.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	usertests.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	wc.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	zombie.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nwrite	fmt/pipe.c	/^7316   uint nwrite;    \/\/ number of bytes written$/;"	m	struct:pipe	file:
nwrite	pipe.c	/^  uint nwrite;    \/\/ number of bytes written$/;"	m	struct:pipe	file:
oemlength	fmt/mp.h	/^7620   ushort oemlength;             \/\/ OEM table length$/;"	m	struct:mpconf
oemlength	mp.h	/^  ushort oemlength;             \/\/ OEM table length$/;"	m	struct:mpconf
oemtable	fmt/mp.h	/^7619   uint *oemtable;               \/\/ OEM table pointer$/;"	m	struct:mpconf
oemtable	mp.h	/^  uint *oemtable;               \/\/ OEM table pointer$/;"	m	struct:mpconf
oesp	fmt/x86.h	/^0607   uint oesp;      \/\/ useless & ignored$/;"	m	struct:trapframe
oesp	x86.h	/^  uint oesp;      \/\/ useless & ignored$/;"	m	struct:trapframe
off	elf.h	/^  uint off;$/;"	m	struct:proghdr
off	file.h	/^  uint off;$/;"	m	struct:file
off	fmt/elf.h	/^0926   uint off;$/;"	m	struct:proghdr
off	fmt/file.h	/^4707   uint off;$/;"	m	struct:file
off_15_0	fmt/mmu.h	/^0856   uint off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:gatedesc
off_15_0	mmu.h	/^  uint off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:gatedesc
off_31_16	fmt/mmu.h	/^0864   uint off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:gatedesc
off_31_16	mmu.h	/^  uint off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:gatedesc
offset	bootblock.asm	/^  offset = (offset \/ SECTSIZE) + 1;$/;"	d
ofile	fmt/proc.h	/^2349   struct file *ofile[NOFILE];  \/\/ Open files$/;"	m	struct:proc	typeref:struct:proc::file
ofile	proc.h	/^  struct file *ofile[NOFILE];  \/\/ Open files$/;"	m	struct:proc	typeref:struct:proc::file
oldbrk	usertests.asm	/^  oldbrk = sbrk(0);$/;"	d
oldpgdir	kernel.asm	/^  oldpgdir = curproc->pgdir;$/;"	d
openiputtest	usertests.c	/^openiputtest(void)$/;"	f
opentest	usertests.c	/^opentest(void)$/;"	f
os	cat.asm	/^  os = s;$/;"	d
os	echo.asm	/^  os = s;$/;"	d
os	forktest.asm	/^  os = s;$/;"	d
os	getnice.asm	/^  os = s;$/;"	d
os	gettid.asm	/^  os = s;$/;"	d
os	grep.asm	/^  os = s;$/;"	d
os	halt.asm	/^  os = s;$/;"	d
os	init.asm	/^  os = s;$/;"	d
os	kernel.asm	/^  os = s;$/;"	d
os	kill.asm	/^  os = s;$/;"	d
os	ln.asm	/^  os = s;$/;"	d
os	ls.asm	/^  os = s;$/;"	d
os	mkdir.asm	/^  os = s;$/;"	d
os	ps.asm	/^  os = s;$/;"	d
os	rm.asm	/^  os = s;$/;"	d
os	setnice.asm	/^  os = s;$/;"	d
os	sh.asm	/^  os = s;$/;"	d
os	stressfs.asm	/^  os = s;$/;"	d
os	test.asm	/^  os = s;$/;"	d
os	thread_create.asm	/^  os = s;$/;"	d
os	thread_exit.asm	/^  os = s;$/;"	d
os	thread_join.asm	/^  os = s;$/;"	d
os	usertests.asm	/^  os = s;$/;"	d
os	wc.asm	/^  os = s;$/;"	d
os	zombie.asm	/^  os = s;$/;"	d
outb	fmt/x86.h	/^0471 outb(ushort port, uchar data)$/;"	f
outb	x86.h	/^outb(ushort port, uchar data)$/;"	f
outsl	fmt/x86.h	/^0483 outsl(int port, const void *addr, int cnt)$/;"	f
outsl	x86.h	/^outsl(int port, const void *addr, int cnt)$/;"	f
outstanding	fmt/log.c	/^5292   int outstanding; \/\/ how many FS sys calls are executing.$/;"	m	struct:log	file:
outstanding	log.c	/^  int outstanding; \/\/ how many FS sys calls are executing.$/;"	m	struct:log	file:
outw	fmt/x86.h	/^0477 outw(ushort port, ushort data)$/;"	f
outw	x86.h	/^outw(ushort port, ushort data)$/;"	f
p	cat.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	echo.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	fmt/mmu.h	/^0732   uint p : 1;          \/\/ Present$/;"	m	struct:segdesc
p	fmt/mmu.h	/^0863   uint p : 1;           \/\/ Present$/;"	m	struct:gatedesc
p	getnice.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	gettid.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	grep.asm	/^      p = q+1;$/;"	d
p	grep.asm	/^    p = buf;$/;"	d
p	grep.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	halt.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	init.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	kernel.asm	/^    p = ((bda[0x14]<<8)|bda[0x13])*1024;$/;"	d
p	kernel.asm	/^  p = (char*)PGROUNDUP((uint)vstart);$/;"	d
p	kernel.asm	/^  p = 0;$/;"	d
p	kernel.asm	/^  p = allocproc();$/;"	d
p	kernel.asm	/^  p = c->proc;$/;"	d
p	kill.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	ln.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	ls.asm	/^    p = buf+strlen(buf);$/;"	d
p	ls.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	mkdir.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	mmu.h	/^  uint p : 1;           \/\/ Present$/;"	m	struct:gatedesc
p	mmu.h	/^  uint p : 1;          \/\/ Present$/;"	m	struct:segdesc
p	ps.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	rm.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	setnice.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	sh.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	stressfs.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	test.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	thread_create.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	thread_exit.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	thread_join.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	usertests.asm	/^  p = sbrk(amt);$/;"	d
p	usertests.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	wc.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	zombie.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
pa	bootblock.asm	/^    pa = (uchar*)ph->paddr;$/;"	d
pa	kernel.asm	/^      pa = PTE_ADDR(*pte);$/;"	d
pa	kernel.asm	/^    pa = PTE_ADDR(*pte);$/;"	d
pa0	kernel.asm	/^    pa0 = uva2ka(pgdir, (char*)va0);$/;"	d
pad	fmt/ioapic.c	/^8179   uint pad[3];$/;"	m	struct:ioapic	file:
pad	ioapic.c	/^  uint pad[3];$/;"	m	struct:ioapic	file:
pad	runoff	/^pad()$/;"	f
padding1	fmt/mmu.h	/^0818   ushort padding1;$/;"	m	struct:taskstate
padding1	fmt/x86.h	/^0615   ushort padding1;$/;"	m	struct:trapframe
padding1	mmu.h	/^  ushort padding1;$/;"	m	struct:taskstate
padding1	x86.h	/^  ushort padding1;$/;"	m	struct:trapframe
padding10	fmt/mmu.h	/^0849   ushort padding10;$/;"	m	struct:taskstate
padding10	mmu.h	/^  ushort padding10;$/;"	m	struct:taskstate
padding2	fmt/mmu.h	/^0821   ushort padding2;$/;"	m	struct:taskstate
padding2	fmt/x86.h	/^0617   ushort padding2;$/;"	m	struct:trapframe
padding2	mmu.h	/^  ushort padding2;$/;"	m	struct:taskstate
padding2	x86.h	/^  ushort padding2;$/;"	m	struct:trapframe
padding3	fmt/mmu.h	/^0824   ushort padding3;$/;"	m	struct:taskstate
padding3	fmt/x86.h	/^0619   ushort padding3;$/;"	m	struct:trapframe
padding3	mmu.h	/^  ushort padding3;$/;"	m	struct:taskstate
padding3	x86.h	/^  ushort padding3;$/;"	m	struct:trapframe
padding4	fmt/mmu.h	/^0837   ushort padding4;$/;"	m	struct:taskstate
padding4	fmt/x86.h	/^0621   ushort padding4;$/;"	m	struct:trapframe
padding4	mmu.h	/^  ushort padding4;$/;"	m	struct:taskstate
padding4	x86.h	/^  ushort padding4;$/;"	m	struct:trapframe
padding5	fmt/mmu.h	/^0839   ushort padding5;$/;"	m	struct:taskstate
padding5	fmt/x86.h	/^0628   ushort padding5;$/;"	m	struct:trapframe
padding5	mmu.h	/^  ushort padding5;$/;"	m	struct:taskstate
padding5	x86.h	/^  ushort padding5;$/;"	m	struct:trapframe
padding6	fmt/mmu.h	/^0841   ushort padding6;$/;"	m	struct:taskstate
padding6	fmt/x86.h	/^0634   ushort padding6;$/;"	m	struct:trapframe
padding6	mmu.h	/^  ushort padding6;$/;"	m	struct:taskstate
padding6	x86.h	/^  ushort padding6;$/;"	m	struct:trapframe
padding7	fmt/mmu.h	/^0843   ushort padding7;$/;"	m	struct:taskstate
padding7	mmu.h	/^  ushort padding7;$/;"	m	struct:taskstate
padding8	fmt/mmu.h	/^0845   ushort padding8;$/;"	m	struct:taskstate
padding8	mmu.h	/^  ushort padding8;$/;"	m	struct:taskstate
padding9	fmt/mmu.h	/^0847   ushort padding9;$/;"	m	struct:taskstate
padding9	mmu.h	/^  ushort padding9;$/;"	m	struct:taskstate
paddr	elf.h	/^  uint paddr;$/;"	m	struct:proghdr
paddr	fmt/elf.h	/^0928   uint paddr;$/;"	m	struct:proghdr
panic	console.c	/^panic(char *s)$/;"	f
panic	fmt/console.c	/^8605 panic(char *s)$/;"	f
panic	fmt/sh.c	/^9281 panic(char *s)$/;"	f
panic	sh.c	/^panic(char *s)$/;"	f
panicked	console.c	/^static int panicked = 0;$/;"	v	file:
panicked	fmt/console.c	/^8469 static int panicked = 0;$/;"	v	file:
panicked	kernel.asm	/^  panicked = 1; \/\/ freeze other CPU$/;"	d
parent	fmt/proc.h	/^2344   struct proc *parent;         \/\/ Parent process$/;"	m	struct:proc	typeref:struct:proc::proc
parent	proc.h	/^  struct proc *parent;         \/\/ Parent process$/;"	m	struct:proc	typeref:struct:proc::proc
parseblock	fmt/sh.c	/^9551 parseblock(char **ps, char *es)$/;"	f
parseblock	sh.c	/^parseblock(char **ps, char *es)$/;"	f
parsecmd	fmt/sh.c	/^9468 parsecmd(char *s)$/;"	f
parsecmd	sh.c	/^parsecmd(char *s)$/;"	f
parseexec	fmt/sh.c	/^9567 parseexec(char **ps, char *es)$/;"	f
parseexec	sh.c	/^parseexec(char **ps, char *es)$/;"	f
parseline	fmt/sh.c	/^9485 parseline(char **ps, char *es)$/;"	f
parseline	sh.c	/^parseline(char **ps, char *es)$/;"	f
parsepipe	fmt/sh.c	/^9501 parsepipe(char **ps, char *es)$/;"	f
parsepipe	sh.c	/^parsepipe(char **ps, char *es)$/;"	f
parseredirs	fmt/sh.c	/^9514 parseredirs(struct cmd *cmd, char **ps, char *es)$/;"	f
parseredirs	sh.c	/^parseredirs(struct cmd *cmd, char **ps, char *es)$/;"	f
pattern	grep.asm	/^  pattern = argv[1];$/;"	d
pcmd	sh.asm	/^    pcmd = (struct pipecmd*)cmd;$/;"	d
pcs	fmt/spinlock.h	/^1507   uint pcs[10];      \/\/ The call stack (an array of program counters)$/;"	m	struct:spinlock
pcs	spinlock.h	/^  uint pcs[10];      \/\/ The call stack (an array of program counters)$/;"	m	struct:spinlock
pde	kernel.asm	/^  pde = &pgdir[PDX(va)];$/;"	d
pde_t	fmt/types.h	/^0103 typedef uint pde_t;$/;"	t
pde_t	types.h	/^typedef uint pde_t;$/;"	t
peek	fmt/sh.c	/^9451 peek(char **ps, char *es, char *toks)$/;"	f
peek	sh.c	/^peek(char **ps, char *es, char *toks)$/;"	f
perm	fmt/vm.c	/^1808   int perm;$/;"	m	struct:kmap	file:
perm	vm.c	/^  int perm;$/;"	m	struct:kmap	file:
pgdir	fmt/proc.h	/^2339   pde_t* pgdir;                \/\/ Page table$/;"	m	struct:proc
pgdir	kernel.asm	/^  pgdir = 0;$/;"	d
pgdir	proc.h	/^  pde_t* pgdir;                \/\/ Page table$/;"	m	struct:proc
pgtab	kernel.asm	/^    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));$/;"	d
ph	bootblock.asm	/^  ph = (struct proghdr*)((uchar*)elf + elf->phoff);$/;"	d
phentsize	elf.h	/^  ushort phentsize;$/;"	m	struct:elfhdr
phentsize	fmt/elf.h	/^0916   ushort phentsize;$/;"	m	struct:elfhdr
phnum	elf.h	/^  ushort phnum;$/;"	m	struct:elfhdr
phnum	fmt/elf.h	/^0917   ushort phnum;$/;"	m	struct:elfhdr
phoff	elf.h	/^  uint phoff;$/;"	m	struct:elfhdr
phoff	fmt/elf.h	/^0912   uint phoff;$/;"	m	struct:elfhdr
phys_end	fmt/vm.c	/^1807   uint phys_end;$/;"	m	struct:kmap	file:
phys_end	vm.c	/^  uint phys_end;$/;"	m	struct:kmap	file:
phys_start	fmt/vm.c	/^1806   uint phys_start;$/;"	m	struct:kmap	file:
phys_start	vm.c	/^  uint phys_start;$/;"	m	struct:kmap	file:
physaddr	fmt/mp.h	/^7604   void *physaddr;               \/\/ phys addr of MP config table$/;"	m	struct:mp
physaddr	mp.h	/^  void *physaddr;               \/\/ phys addr of MP config table$/;"	m	struct:mp
picinit	picirq.c	/^picinit(void)$/;"	f
pid	fmt/proc.h	/^2342   int pid;                     \/\/ Process ID$/;"	m	struct:proc
pid	fmt/sleeplock.h	/^4457   int pid;           \/\/ Process holding lock$/;"	m	struct:sleeplock
pid	forktest.asm	/^    pid = fork();$/;"	d
pid	init.asm	/^    pid = fork();$/;"	d
pid	kernel.asm	/^        pid = p->pid;$/;"	d
pid	kernel.asm	/^  pid = np->pid;$/;"	d
pid	proc.h	/^  int pid;                     \/\/ Process ID$/;"	m	struct:proc
pid	sh.asm	/^  pid = fork();$/;"	d
pid	sleeplock.h	/^  int pid;           \/\/ Process holding lock$/;"	m	struct:sleeplock
pid	usertests.asm	/^    pid = fork();$/;"	d
pid	usertests.asm	/^  pid = fork();$/;"	d
pid1	usertests.asm	/^  pid1 = fork();$/;"	d
pid2	usertests.asm	/^  pid2 = fork();$/;"	d
pid3	usertests.asm	/^  pid3 = fork();$/;"	d
pinit	fmt/proc.c	/^2425 pinit(void)$/;"	f
pinit	proc.c	/^pinit(void)$/;"	f
pipe	file.h	/^  struct pipe *pipe;$/;"	m	struct:file	typeref:struct:file::pipe
pipe	fmt/file.h	/^4705   struct pipe *pipe;$/;"	m	struct:file	typeref:struct:file::pipe
pipe	fmt/pipe.c	/^7312 struct pipe {$/;"	s	file:
pipe	pipe.c	/^struct pipe {$/;"	s	file:
pipe1	usertests.c	/^pipe1(void)$/;"	f
pipealloc	fmt/pipe.c	/^7322 pipealloc(struct file **f0, struct file **f1)$/;"	f
pipealloc	pipe.c	/^pipealloc(struct file **f0, struct file **f1)$/;"	f
pipeclose	fmt/pipe.c	/^7361 pipeclose(struct pipe *p, int writable)$/;"	f
pipeclose	pipe.c	/^pipeclose(struct pipe *p, int writable)$/;"	f
pipecmd	fmt/sh.c	/^9134 struct pipecmd {$/;"	s	file:
pipecmd	fmt/sh.c	/^9330 pipecmd(struct cmd *left, struct cmd *right)$/;"	f
pipecmd	sh.c	/^pipecmd(struct cmd *left, struct cmd *right)$/;"	f
pipecmd	sh.c	/^struct pipecmd {$/;"	s	file:
piperead	fmt/pipe.c	/^7401 piperead(struct pipe *p, char *addr, int n)$/;"	f
piperead	pipe.c	/^piperead(struct pipe *p, char *addr, int n)$/;"	f
pipewrite	fmt/pipe.c	/^7380 pipewrite(struct pipe *p, char *addr, int n)$/;"	f
pipewrite	pipe.c	/^pipewrite(struct pipe *p, char *addr, int n)$/;"	f
popcli	fmt/spinlock.c	/^1679 popcli(void)$/;"	f
popcli	spinlock.c	/^popcli(void)$/;"	f
port	usertests.asm	/^    port = RTC_ADDR;$/;"	d
port	usertests.asm	/^    port = RTC_DATA;$/;"	d
pos	kernel.asm	/^  pos = inb(CRTPORT+1) << 8;$/;"	d
ppid	usertests.asm	/^    ppid = getpid();$/;"	d
ppid	usertests.asm	/^  ppid = getpid();$/;"	d
preempt	usertests.c	/^preempt(void)$/;"	f
prev	buf.h	/^  struct buf *prev; \/\/ LRU cache list$/;"	m	struct:buf	typeref:struct:buf::buf
prev	fmt/buf.h	/^4406   struct buf *prev; \/\/ LRU cache list$/;"	m	struct:buf	typeref:struct:buf::buf
print_enum	fmt/proc.c	/^3150 char* print_enum(enum procstate a)$/;"	f
print_enum	proc.c	/^char* print_enum(enum procstate a)$/;"	f
printf	forktest.c	/^printf(int fd, const char *s, ...)$/;"	f
printf	printf.c	/^printf(int fd, const char *fmt, ...)$/;"	f
printint	console.c	/^printint(int xx, int base, int sign)$/;"	f	file:
printint	fmt/console.c	/^8477 printint(int xx, int base, int sign)$/;"	f	file:
printint	printf.c	/^printint(int fd, int xx, int base, int sgn)$/;"	f	file:
proc	fmt/proc.c	/^2413   struct proc proc[NPROC];$/;"	m	struct:__anon1	typeref:struct:__anon1::proc	file:
proc	fmt/proc.h	/^2309   struct proc *proc;           \/\/ The process running on this cpu or null$/;"	m	struct:cpu	typeref:struct:cpu::proc
proc	fmt/proc.h	/^2337 struct proc {$/;"	s
proc	kernel.asm	/^      proc = (struct mpproc*)p;$/;"	d
proc	proc.c	/^  struct proc proc[NPROC];$/;"	m	struct:__anon9	typeref:struct:__anon9::proc	file:
proc	proc.h	/^  struct proc *proc;           \/\/ The process running on this cpu or null$/;"	m	struct:cpu	typeref:struct:cpu::proc
proc	proc.h	/^struct proc {$/;"	s
procdump	fmt/proc.c	/^3054 procdump(void)$/;"	f
procdump	proc.c	/^procdump(void)$/;"	f
procstate	fmt/proc.h	/^2334 enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	g
procstate	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	g
product	fmt/mp.h	/^7618   uchar product[20];            \/\/ product id$/;"	m	struct:mpconf
product	mp.h	/^  uchar product[20];            \/\/ product id$/;"	m	struct:mpconf
proghdr	elf.h	/^struct proghdr {$/;"	s
proghdr	fmt/elf.h	/^0924 struct proghdr {$/;"	s
ps	fmt/proc.c	/^3173 ps(int pid)$/;"	f
ps	proc.c	/^ps(int pid)$/;"	f
ptable	fmt/proc.c	/^2414 } ptable;$/;"	v	typeref:struct:__anon1
ptable	proc.c	/^} ptable;$/;"	v	typeref:struct:__anon9
pte	kernel.asm	/^    pte = walkpgdir(pgdir, (char*)a, 0);$/;"	d
pte	kernel.asm	/^  pte = walkpgdir(pgdir, uva, 0);$/;"	d
pte_t	fmt/mmu.h	/^0811 typedef uint pte_t;$/;"	t
pte_t	mmu.h	/^typedef uint pte_t;$/;"	t
ptr	umalloc.c	/^    union header *ptr;$/;"	m	struct:header::__anon17	typeref:union:header::__anon17::header	file:
pushcli	fmt/spinlock.c	/^1667 pushcli(void)$/;"	f
pushcli	spinlock.c	/^pushcli(void)$/;"	f
putc	printf.c	/^putc(int fd, char c)$/;"	f	file:
qnext	buf.h	/^  struct buf *qnext; \/\/ disk queue$/;"	m	struct:buf	typeref:struct:buf::buf
qnext	fmt/buf.h	/^4408   struct buf *qnext; \/\/ disk queue$/;"	m	struct:buf	typeref:struct:buf::buf
qnext	synch.h	/^  int qnext;$/;"	m	struct:cond_t
qnext	synch.h	/^  int qnext;$/;"	m	struct:mutex_t
qsize	synch.h	/^  int qsize;$/;"	m	struct:cond_t
qsize	synch.h	/^  int qsize;$/;"	m	struct:mutex_t
queue	synch.h	/^  struct proc *queue[10];$/;"	m	struct:cond_t	typeref:struct:cond_t::proc
queue	synch.h	/^  struct proc *queue[10];$/;"	m	struct:mutex_t	typeref:struct:mutex_t::proc
r	cat.asm	/^  r = fstat(fd, st);$/;"	d
r	console.c	/^  uint r;  \/\/ Read index$/;"	m	struct:__anon14	file:
r	echo.asm	/^  r = fstat(fd, st);$/;"	d
r	fmt/console.c	/^8719   uint r;  \/\/ Read index$/;"	m	struct:__anon6	file:
r	forktest.asm	/^  r = fstat(fd, st);$/;"	d
r	getnice.asm	/^  r = fstat(fd, st);$/;"	d
r	gettid.asm	/^  r = fstat(fd, st);$/;"	d
r	grep.asm	/^  r = fstat(fd, st);$/;"	d
r	halt.asm	/^  r = fstat(fd, st);$/;"	d
r	init.asm	/^  r = fstat(fd, st);$/;"	d
r	kernel.asm	/^  r = (struct run*)v;$/;"	d
r	kernel.asm	/^  r = kmem.freelist;$/;"	d
r	kernel.asm	/^  r = lk->locked && (lk->pid == myproc()->pid);$/;"	d
r	kernel.asm	/^  r = lock->locked && lock->cpu == mycpu();$/;"	d
r	kill.asm	/^  r = fstat(fd, st);$/;"	d
r	ln.asm	/^  r = fstat(fd, st);$/;"	d
r	ls.asm	/^  r = fstat(fd, st);$/;"	d
r	mkdir.asm	/^  r = fstat(fd, st);$/;"	d
r	ps.asm	/^  r = fstat(fd, st);$/;"	d
r	rm.asm	/^  r = fstat(fd, st);$/;"	d
r	setnice.asm	/^  r = fstat(fd, st);$/;"	d
r	sh.asm	/^  r = fstat(fd, st);$/;"	d
r	stressfs.asm	/^  r = fstat(fd, st);$/;"	d
r	test.asm	/^  r = fstat(fd, st);$/;"	d
r	thread_create.asm	/^  r = fstat(fd, st);$/;"	d
r	thread_exit.asm	/^  r = fstat(fd, st);$/;"	d
r	thread_join.asm	/^  r = fstat(fd, st);$/;"	d
r	usertests.asm	/^  r = fstat(fd, st);$/;"	d
r	wc.asm	/^  r = fstat(fd, st);$/;"	d
r	zombie.asm	/^  r = fstat(fd, st);$/;"	d
rand	usertests.c	/^rand()$/;"	f
randstate	usertests.asm	/^  randstate = randstate * 1664525 + 1013904223;$/;"	d
randstate	usertests.c	/^unsigned long randstate = 1;$/;"	v
rcmd	sh.asm	/^    rcmd = (struct redircmd*)cmd;$/;"	d
rcr2	fmt/x86.h	/^0582 rcr2(void)$/;"	f
rcr2	x86.h	/^rcr2(void)$/;"	f
read	file.h	/^  int (*read)(struct inode*, char*, int);$/;"	m	struct:devsw
read	fmt/file.h	/^4730   int (*read)(struct inode*, char*, int);$/;"	m	struct:devsw
read_head	fmt/log.c	/^5338 read_head(void)$/;"	f	file:
read_head	log.c	/^read_head(void)$/;"	f	file:
readable	file.h	/^  char readable;$/;"	m	struct:file
readable	fmt/file.h	/^4703   char readable;$/;"	m	struct:file
readeflags	fmt/x86.h	/^0544 readeflags(void)$/;"	f
readeflags	x86.h	/^readeflags(void)$/;"	f
readi	fmt/fs.c	/^6053 readi(struct inode *ip, char *dst, uint off, uint n)$/;"	f
readi	fs.c	/^readi(struct inode *ip, char *dst, uint off, uint n)$/;"	f
readopen	fmt/pipe.c	/^7317   int readopen;   \/\/ read fd is still open$/;"	m	struct:pipe	file:
readopen	pipe.c	/^  int readopen;   \/\/ read fd is still open$/;"	m	struct:pipe	file:
readsb	fmt/fs.c	/^5531 readsb(int dev, struct superblock *sb)$/;"	f
readsb	fs.c	/^readsb(int dev, struct superblock *sb)$/;"	f
readsect	bootmain.c	/^readsect(void *dst, uint offset)$/;"	f
readsect	fmt/bootmain.c	/^9810 readsect(void *dst, uint offset)$/;"	f
readseg	bootmain.c	/^readseg(uchar* pa, uint count, uint offset)$/;"	f
readseg	fmt/bootmain.c	/^9829 readseg(uchar* pa, uint count, uint offset)$/;"	f
recover_from_log	fmt/log.c	/^5368 recover_from_log(void)$/;"	f	file:
recover_from_log	log.c	/^recover_from_log(void)$/;"	f	file:
redircmd	fmt/sh.c	/^9125 struct redircmd {$/;"	s	file:
redircmd	fmt/sh.c	/^9314 redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)$/;"	f
redircmd	sh.c	/^redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)$/;"	f
redircmd	sh.c	/^struct redircmd {$/;"	s	file:
ref	file.h	/^  int ref;            \/\/ Reference count$/;"	m	struct:inode
ref	file.h	/^  int ref; \/\/ reference count$/;"	m	struct:file
ref	fmt/file.h	/^4702   int ref; \/\/ reference count$/;"	m	struct:file
ref	fmt/file.h	/^4715   int ref;            \/\/ Reference count$/;"	m	struct:inode
refcnt	buf.h	/^  uint refcnt;$/;"	m	struct:buf
refcnt	fmt/buf.h	/^4405   uint refcnt;$/;"	m	struct:buf
reg	fmt/ioapic.c	/^8178   uint reg;$/;"	m	struct:ioapic	file:
reg	ioapic.c	/^  uint reg;$/;"	m	struct:ioapic	file:
release	fmt/spinlock.c	/^1602 release(struct spinlock *lk)$/;"	f
release	spinlock.c	/^release(struct spinlock *lk)$/;"	f
releasesleep	fmt/sleeplock.c	/^5184 releasesleep(struct sleeplock *lk)$/;"	f
releasesleep	sleeplock.c	/^releasesleep(struct sleeplock *lk)$/;"	f
reserved	fmt/mp.h	/^7610   uchar reserved[3];$/;"	m	struct:mp
reserved	fmt/mp.h	/^7625   uchar reserved;$/;"	m	struct:mpconf
reserved	fmt/mp.h	/^7636   uchar reserved[8];$/;"	m	struct:mpproc
reserved	mp.h	/^  uchar reserved;$/;"	m	struct:mpconf
reserved	mp.h	/^  uchar reserved[3];$/;"	m	struct:mp
reserved	mp.h	/^  uchar reserved[8];$/;"	m	struct:mpproc
ret	sh.asm	/^      ret = '+';$/;"	d
ret	sh.asm	/^    ret = 'a';$/;"	d
ret	sh.asm	/^    ret = parseredirs(ret, ps, es);$/;"	d
ret	sh.asm	/^  ret = *s;$/;"	d
ret	sh.asm	/^  ret = execcmd();$/;"	d
ret	sh.asm	/^  ret = parseredirs(ret, ps, es);$/;"	d
return	kernel.asm	/^  return d;$/;"	d
retval	test.c	/^void *retval[NTHREAD];$/;"	v
right	fmt/sh.c	/^9137   struct cmd *right;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
right	fmt/sh.c	/^9143   struct cmd *right;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
right	sh.c	/^  struct cmd *right;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
right	sh.c	/^  struct cmd *right;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
rinode	mkfs.c	/^rinode(uint inum, struct dinode *ip)$/;"	f
rmdot	usertests.c	/^rmdot(void)$/;"	f
rsect	mkfs.c	/^rsect(uint sec, void *buf)$/;"	f
rsv1	fmt/mmu.h	/^0735   uint rsv1 : 1;       \/\/ Reserved$/;"	m	struct:segdesc
rsv1	fmt/mmu.h	/^0859   uint rsv1 : 3;        \/\/ reserved(should be zero I guess)$/;"	m	struct:gatedesc
rsv1	mmu.h	/^  uint rsv1 : 1;       \/\/ Reserved$/;"	m	struct:segdesc
rsv1	mmu.h	/^  uint rsv1 : 3;        \/\/ reserved(should be zero I guess)$/;"	m	struct:gatedesc
rtcdate	date.h	/^struct rtcdate {$/;"	s
rtcdate	fmt/date.h	/^0950 struct rtcdate {$/;"	s
run	fmt/kalloc.c	/^3465 struct run {$/;"	s	file:
run	kalloc.c	/^struct run {$/;"	s	file:
runcmd	fmt/sh.c	/^9156 runcmd(struct cmd *cmd)$/;"	f
runcmd	sh.c	/^runcmd(struct cmd *cmd)$/;"	f
s	cat.asm	/^          s = "(null)";$/;"	d
s	cat.asm	/^        s = (char*)*ap;$/;"	d
s	echo.asm	/^          s = "(null)";$/;"	d
s	echo.asm	/^        s = (char*)*ap;$/;"	d
s	fmt/mmu.h	/^0730   uint s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:segdesc
s	fmt/mmu.h	/^0861   uint s : 1;           \/\/ must be 0 (system)$/;"	m	struct:gatedesc
s	getnice.asm	/^          s = "(null)";$/;"	d
s	getnice.asm	/^        s = (char*)*ap;$/;"	d
s	gettid.asm	/^          s = "(null)";$/;"	d
s	gettid.asm	/^        s = (char*)*ap;$/;"	d
s	grep.asm	/^          s = "(null)";$/;"	d
s	grep.asm	/^        s = (char*)*ap;$/;"	d
s	halt.asm	/^          s = "(null)";$/;"	d
s	halt.asm	/^        s = (char*)*ap;$/;"	d
s	init.asm	/^          s = "(null)";$/;"	d
s	init.asm	/^        s = (char*)*ap;$/;"	d
s	kernel.asm	/^        s = "(null)";$/;"	d
s	kernel.asm	/^  s = path;$/;"	d
s	kernel.asm	/^  s = src;$/;"	d
s	kill.asm	/^          s = "(null)";$/;"	d
s	kill.asm	/^        s = (char*)*ap;$/;"	d
s	ln.asm	/^          s = "(null)";$/;"	d
s	ln.asm	/^        s = (char*)*ap;$/;"	d
s	ls.asm	/^          s = "(null)";$/;"	d
s	ls.asm	/^        s = (char*)*ap;$/;"	d
s	mkdir.asm	/^          s = "(null)";$/;"	d
s	mkdir.asm	/^        s = (char*)*ap;$/;"	d
s	mmu.h	/^  uint s : 1;           \/\/ must be 0 (system)$/;"	m	struct:gatedesc
s	mmu.h	/^  uint s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:segdesc
s	ps.asm	/^          s = "(null)";$/;"	d
s	ps.asm	/^        s = (char*)*ap;$/;"	d
s	rm.asm	/^          s = "(null)";$/;"	d
s	rm.asm	/^        s = (char*)*ap;$/;"	d
s	setnice.asm	/^          s = "(null)";$/;"	d
s	setnice.asm	/^        s = (char*)*ap;$/;"	d
s	sh.asm	/^          s = "(null)";$/;"	d
s	sh.asm	/^        s = (char*)*ap;$/;"	d
s	sh.asm	/^  s = *ps;$/;"	d
s	stressfs.asm	/^          s = "(null)";$/;"	d
s	stressfs.asm	/^        s = (char*)*ap;$/;"	d
s	test.asm	/^          s = "(null)";$/;"	d
s	test.asm	/^        s = (char*)*ap;$/;"	d
s	thread_create.asm	/^          s = "(null)";$/;"	d
s	thread_create.asm	/^        s = (char*)*ap;$/;"	d
s	thread_exit.asm	/^          s = "(null)";$/;"	d
s	thread_exit.asm	/^        s = (char*)*ap;$/;"	d
s	thread_join.asm	/^          s = "(null)";$/;"	d
s	thread_join.asm	/^        s = (char*)*ap;$/;"	d
s	umalloc.c	/^  } s;$/;"	m	union:header	typeref:struct:header::__anon17	file:
s	usertests.asm	/^          s = "(null)";$/;"	d
s	usertests.asm	/^        s = (char*)*ap;$/;"	d
s	wc.asm	/^          s = "(null)";$/;"	d
s	wc.asm	/^        s = (char*)*ap;$/;"	d
s	zombie.asm	/^          s = "(null)";$/;"	d
s	zombie.asm	/^        s = (char*)*ap;$/;"	d
s1	kernel.asm	/^  s1 = v1;$/;"	d
s2	kernel.asm	/^  s2 = v2;$/;"	d
safestrcpy	fmt/string.c	/^7532 safestrcpy(char *s, const char *t, int n)$/;"	f
safestrcpy	string.c	/^safestrcpy(char *s, const char *t, int n)$/;"	f
sb	fmt/fs.c	/^5527 struct superblock sb;$/;"	v	typeref:struct:superblock
sb	fs.c	/^struct superblock sb; $/;"	v	typeref:struct:superblock
sb	mkfs.c	/^struct superblock sb;$/;"	v	typeref:struct:superblock
sbrktest	usertests.c	/^sbrktest(void)$/;"	f
sched	fmt/proc.c	/^2858 sched(void)$/;"	f
sched	proc.c	/^sched(void)$/;"	f
scheduler	fmt/proc.c	/^2808 scheduler(void)$/;"	f
scheduler	fmt/proc.h	/^2303   struct context *scheduler;   \/\/ swtch() here to enter scheduler$/;"	m	struct:cpu	typeref:struct:cpu::context
scheduler	proc.c	/^scheduler(void)$/;"	f
scheduler	proc.h	/^  struct context *scheduler;   \/\/ swtch() here to enter scheduler$/;"	m	struct:cpu	typeref:struct:cpu::context
second	date.h	/^  uint second;$/;"	m	struct:rtcdate
second	fmt/date.h	/^0951   uint second;$/;"	m	struct:rtcdate
segdesc	fmt/mmu.h	/^0725 struct segdesc {$/;"	s
segdesc	mmu.h	/^struct segdesc {$/;"	s
seginit	fmt/vm.c	/^1715 seginit(void)$/;"	f
seginit	vm.c	/^seginit(void)$/;"	f
seq	usertests.asm	/^  seq = 0;$/;"	d
setnice	fmt/proc.c	/^3119 setnice(int pid, int value)$/;"	f
setnice	proc.c	/^setnice(int pid, int value)$/;"	f
setupkvm	fmt/vm.c	/^1818 setupkvm(void)$/;"	f
setupkvm	vm.c	/^setupkvm(void)$/;"	f
sharedfd	usertests.c	/^sharedfd(void)$/;"	f
shentsize	elf.h	/^  ushort shentsize;$/;"	m	struct:elfhdr
shentsize	fmt/elf.h	/^0918   ushort shentsize;$/;"	m	struct:elfhdr
shiftcode	fmt/kbd.h	/^8283 static uchar shiftcode[256] =$/;"	v
shiftcode	kbd.h	/^static uchar shiftcode[256] =$/;"	v
shiftmap	fmt/kbd.h	/^8322 static uchar shiftmap[256] =$/;"	v
shiftmap	kbd.h	/^static uchar shiftmap[256] =$/;"	v
shnum	elf.h	/^  ushort shnum;$/;"	m	struct:elfhdr
shnum	fmt/elf.h	/^0919   ushort shnum;$/;"	m	struct:elfhdr
shoff	elf.h	/^  uint shoff;$/;"	m	struct:elfhdr
shoff	fmt/elf.h	/^0913   uint shoff;$/;"	m	struct:elfhdr
shstrndx	elf.h	/^  ushort shstrndx;$/;"	m	struct:elfhdr
shstrndx	fmt/elf.h	/^0920   ushort shstrndx;$/;"	m	struct:elfhdr
signature	fmt/mp.h	/^7603   uchar signature[4];           \/\/ "_MP_"$/;"	m	struct:mp
signature	fmt/mp.h	/^7614   uchar signature[4];           \/\/ "PCMP"$/;"	m	struct:mpconf
signature	fmt/mp.h	/^7634   uchar signature[4];           \/\/ CPU signature$/;"	m	struct:mpproc
signature	mp.h	/^  uchar signature[4];           \/\/ "PCMP"$/;"	m	struct:mpconf
signature	mp.h	/^  uchar signature[4];           \/\/ "_MP_"$/;"	m	struct:mp
signature	mp.h	/^  uchar signature[4];           \/\/ CPU signature$/;"	m	struct:mpproc
size	file.h	/^  uint size;$/;"	m	struct:inode
size	fmt/file.h	/^4723   uint size;$/;"	m	struct:inode
size	fmt/fs.h	/^4614   uint size;         \/\/ Size of file system image (blocks)$/;"	m	struct:superblock
size	fmt/fs.h	/^4633   uint size;            \/\/ Size of file (bytes)$/;"	m	struct:dinode
size	fmt/log.c	/^5291   int size;$/;"	m	struct:log	file:
size	fmt/stat.h	/^4559   uint size;   \/\/ Size of file in bytes$/;"	m	struct:stat
size	fs.h	/^  uint size;            \/\/ Size of file (bytes)$/;"	m	struct:dinode
size	fs.h	/^  uint size;         \/\/ Size of file system image (blocks)$/;"	m	struct:superblock
size	log.c	/^  int size;$/;"	m	struct:log	file:
size	stat.h	/^  uint size;   \/\/ Size of file in bytes$/;"	m	struct:stat
size	umalloc.c	/^    uint size;$/;"	m	struct:header::__anon17	file:
skipelem	fmt/fs.c	/^6265 skipelem(char *path, char *name)$/;"	f	file:
skipelem	fs.c	/^skipelem(char *path, char *name)$/;"	f	file:
sleep	fmt/proc.c	/^2924 sleep(void *chan, struct spinlock *lk)$/;"	f
sleep	proc.c	/^sleep(void *chan, struct spinlock *lk)$/;"	f
sleeplock	fmt/sleeplock.h	/^4451 struct sleeplock {$/;"	s
sleeplock	sleeplock.h	/^struct sleeplock {$/;"	s
sp	kernel.asm	/^    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;$/;"	d
sp	kernel.asm	/^  sp = p->kstack + KSTACKSIZE;$/;"	d
sp	kernel.asm	/^  sp = sz;$/;"	d
specrev	fmt/mp.h	/^7606   uchar specrev;                \/\/ [14]$/;"	m	struct:mp
specrev	mp.h	/^  uchar specrev;                \/\/ [14]$/;"	m	struct:mp
spin	bootasm.S	/^spin:$/;"	l
spin	bootblock.asm	/^spin:$/;"	l
spin	entryother.S	/^spin:$/;"	l
spin	entryother.asm	/^spin:$/;"	l
spinlock	fmt/spinlock.h	/^1501 struct spinlock {$/;"	s
spinlock	spinlock.h	/^struct spinlock {$/;"	s
src	cat.asm	/^  src = vsrc;$/;"	d
src	echo.asm	/^  src = vsrc;$/;"	d
src	forktest.asm	/^  src = vsrc;$/;"	d
src	getnice.asm	/^  src = vsrc;$/;"	d
src	gettid.asm	/^  src = vsrc;$/;"	d
src	grep.asm	/^  src = vsrc;$/;"	d
src	halt.asm	/^  src = vsrc;$/;"	d
src	init.asm	/^  src = vsrc;$/;"	d
src	kill.asm	/^  src = vsrc;$/;"	d
src	ln.asm	/^  src = vsrc;$/;"	d
src	ls.asm	/^  src = vsrc;$/;"	d
src	mkdir.asm	/^  src = vsrc;$/;"	d
src	ps.asm	/^  src = vsrc;$/;"	d
src	rm.asm	/^  src = vsrc;$/;"	d
src	setnice.asm	/^  src = vsrc;$/;"	d
src	sh.asm	/^  src = vsrc;$/;"	d
src	stressfs.asm	/^  src = vsrc;$/;"	d
src	test.asm	/^  src = vsrc;$/;"	d
src	thread_create.asm	/^  src = vsrc;$/;"	d
src	thread_exit.asm	/^  src = vsrc;$/;"	d
src	thread_join.asm	/^  src = vsrc;$/;"	d
src	usertests.asm	/^  src = vsrc;$/;"	d
src	wc.asm	/^  src = vsrc;$/;"	d
src	zombie.asm	/^  src = vsrc;$/;"	d
ss	fmt/mmu.h	/^0840   ushort ss;$/;"	m	struct:taskstate
ss	fmt/x86.h	/^0633   ushort ss;$/;"	m	struct:trapframe
ss	mmu.h	/^  ushort ss;$/;"	m	struct:taskstate
ss	x86.h	/^  ushort ss;$/;"	m	struct:trapframe
ss0	fmt/mmu.h	/^0817   ushort ss0;        \/\/   after an increase in privilege level$/;"	m	struct:taskstate
ss0	mmu.h	/^  ushort ss0;        \/\/   after an increase in privilege level$/;"	m	struct:taskstate
ss1	fmt/mmu.h	/^0820   ushort ss1;$/;"	m	struct:taskstate
ss1	mmu.h	/^  ushort ss1;$/;"	m	struct:taskstate
ss2	fmt/mmu.h	/^0823   ushort ss2;$/;"	m	struct:taskstate
ss2	mmu.h	/^  ushort ss2;$/;"	m	struct:taskstate
st	kernel.asm	/^  st = inb(KBSTATP);$/;"	d
stack	fmt/proc.h	/^2352   void* stack;$/;"	m	struct:proc
stack	kernel.asm	/^    stack = kalloc();$/;"	d
stack	proc.h	/^  void* stack;$/;"	m	struct:proc
stack	test.c	/^void *stack[NTHREAD];$/;"	v
start	bootasm.S	/^start:$/;"	l
start	bootblock.asm	/^start:$/;"	l
start	entryother.S	/^start:$/;"	l
start	entryother.asm	/^start:$/;"	l
start	fmt/log.c	/^5290   int start;$/;"	m	struct:log	file:
start	initcode.S	/^start:$/;"	l
start	initcode.asm	/^start:$/;"	l
start	log.c	/^  int start;$/;"	m	struct:log	file:
start32	bootasm.S	/^start32:$/;"	l
start32	bootblock.asm	/^start32:$/;"	l
start32	entryother.S	/^start32:$/;"	l
start32	entryother.asm	/^start32:$/;"	l
started	fmt/proc.h	/^2306   volatile uint started;       \/\/ Has the CPU started?$/;"	m	struct:cpu
started	proc.h	/^  volatile uint started;       \/\/ Has the CPU started?$/;"	m	struct:cpu
startothers	fmt/main.c	/^1264 startothers(void)$/;"	f	file:
startothers	main.c	/^startothers(void)$/;"	f	file:
stat	fmt/stat.h	/^4554 struct stat {$/;"	s
stat	mkfs.c	8;"	d	file:
stat	stat.h	/^struct stat {$/;"	s
stat	ulib.c	/^stat(const char *n, struct stat *st)$/;"	f
state	cat.asm	/^        state = '%';$/;"	d
state	cat.asm	/^      state = 0;$/;"	d
state	cat.asm	/^  state = 0;$/;"	d
state	echo.asm	/^        state = '%';$/;"	d
state	echo.asm	/^      state = 0;$/;"	d
state	echo.asm	/^  state = 0;$/;"	d
state	fmt/proc.h	/^2341   enum procstate state;        \/\/ Process state$/;"	m	struct:proc	typeref:enum:proc::procstate
state	getnice.asm	/^        state = '%';$/;"	d
state	getnice.asm	/^      state = 0;$/;"	d
state	getnice.asm	/^  state = 0;$/;"	d
state	gettid.asm	/^        state = '%';$/;"	d
state	gettid.asm	/^      state = 0;$/;"	d
state	gettid.asm	/^  state = 0;$/;"	d
state	grep.asm	/^        state = '%';$/;"	d
state	grep.asm	/^      state = 0;$/;"	d
state	grep.asm	/^  state = 0;$/;"	d
state	halt.asm	/^        state = '%';$/;"	d
state	halt.asm	/^      state = 0;$/;"	d
state	halt.asm	/^  state = 0;$/;"	d
state	init.asm	/^        state = '%';$/;"	d
state	init.asm	/^      state = 0;$/;"	d
state	init.asm	/^  state = 0;$/;"	d
state	kernel.asm	/^      state = "???";$/;"	d
state	kernel.asm	/^      state = states[p->state];$/;"	d
state	kill.asm	/^        state = '%';$/;"	d
state	kill.asm	/^      state = 0;$/;"	d
state	kill.asm	/^  state = 0;$/;"	d
state	ln.asm	/^        state = '%';$/;"	d
state	ln.asm	/^      state = 0;$/;"	d
state	ln.asm	/^  state = 0;$/;"	d
state	ls.asm	/^        state = '%';$/;"	d
state	ls.asm	/^      state = 0;$/;"	d
state	ls.asm	/^  state = 0;$/;"	d
state	mkdir.asm	/^        state = '%';$/;"	d
state	mkdir.asm	/^      state = 0;$/;"	d
state	mkdir.asm	/^  state = 0;$/;"	d
state	proc.h	/^  enum procstate state;        \/\/ Process state$/;"	m	struct:proc	typeref:enum:proc::procstate
state	ps.asm	/^        state = '%';$/;"	d
state	ps.asm	/^      state = 0;$/;"	d
state	ps.asm	/^  state = 0;$/;"	d
state	rm.asm	/^        state = '%';$/;"	d
state	rm.asm	/^      state = 0;$/;"	d
state	rm.asm	/^  state = 0;$/;"	d
state	setnice.asm	/^        state = '%';$/;"	d
state	setnice.asm	/^      state = 0;$/;"	d
state	setnice.asm	/^  state = 0;$/;"	d
state	sh.asm	/^        state = '%';$/;"	d
state	sh.asm	/^      state = 0;$/;"	d
state	sh.asm	/^  state = 0;$/;"	d
state	stressfs.asm	/^        state = '%';$/;"	d
state	stressfs.asm	/^      state = 0;$/;"	d
state	stressfs.asm	/^  state = 0;$/;"	d
state	test.asm	/^        state = '%';$/;"	d
state	test.asm	/^      state = 0;$/;"	d
state	test.asm	/^  state = 0;$/;"	d
state	thread_create.asm	/^        state = '%';$/;"	d
state	thread_create.asm	/^      state = 0;$/;"	d
state	thread_create.asm	/^  state = 0;$/;"	d
state	thread_exit.asm	/^        state = '%';$/;"	d
state	thread_exit.asm	/^      state = 0;$/;"	d
state	thread_exit.asm	/^  state = 0;$/;"	d
state	thread_join.asm	/^        state = '%';$/;"	d
state	thread_join.asm	/^      state = 0;$/;"	d
state	thread_join.asm	/^  state = 0;$/;"	d
state	usertests.asm	/^        state = '%';$/;"	d
state	usertests.asm	/^      state = 0;$/;"	d
state	usertests.asm	/^  state = 0;$/;"	d
state	wc.asm	/^        state = '%';$/;"	d
state	wc.asm	/^      state = 0;$/;"	d
state	wc.asm	/^  state = 0;$/;"	d
state	zombie.asm	/^        state = '%';$/;"	d
state	zombie.asm	/^      state = 0;$/;"	d
state	zombie.asm	/^  state = 0;$/;"	d
stati	fmt/fs.c	/^6038 stati(struct inode *ip, struct stat *st)$/;"	f
stati	fs.c	/^stati(struct inode *ip, struct stat *st)$/;"	f
static	bootblock.asm	/^static inline uchar$/;"	l
static	bootblock.asm	/^static inline void$/;"	l
static	cat.asm	/^static Header *freep;$/;"	l
static	cat.asm	/^static Header base;$/;"	l
static	cat.asm	/^static inline void$/;"	l
static	cat.asm	/^static void$/;"	l
static	echo.asm	/^static Header *freep;$/;"	l
static	echo.asm	/^static Header base;$/;"	l
static	echo.asm	/^static inline void$/;"	l
static	echo.asm	/^static void$/;"	l
static	forktest.asm	/^static inline void$/;"	l
static	getnice.asm	/^static Header *freep;$/;"	l
static	getnice.asm	/^static Header base;$/;"	l
static	getnice.asm	/^static inline void$/;"	l
static	getnice.asm	/^static void$/;"	l
static	gettid.asm	/^static Header *freep;$/;"	l
static	gettid.asm	/^static Header base;$/;"	l
static	gettid.asm	/^static inline void$/;"	l
static	gettid.asm	/^static void$/;"	l
static	grep.asm	/^static Header *freep;$/;"	l
static	grep.asm	/^static Header base;$/;"	l
static	grep.asm	/^static inline void$/;"	l
static	grep.asm	/^static void$/;"	l
static	halt.asm	/^static Header *freep;$/;"	l
static	halt.asm	/^static Header base;$/;"	l
static	halt.asm	/^static inline void$/;"	l
static	halt.asm	/^static void$/;"	l
static	init.asm	/^static Header *freep;$/;"	l
static	init.asm	/^static Header base;$/;"	l
static	init.asm	/^static inline void$/;"	l
static	init.asm	/^static void$/;"	l
static	kernel.asm	/^  static struct proc*$/;"	t
static	kernel.asm	/^static inline uchar$/;"	l
static	kernel.asm	/^static inline uint$/;"	l
static	kernel.asm	/^static inline void$/;"	l
static	kernel.asm	/^static int uart;    \/\/ is there a uart?$/;"	l
static	kernel.asm	/^static int$/;"	l
static	kernel.asm	/^static pte_t *$/;"	l
static	kernel.asm	/^static struct buf*$/;"	t
static	kernel.asm	/^static struct inode*$/;"	t
static	kernel.asm	/^static struct mp*$/;"	t
static	kernel.asm	/^static uint$/;"	l
static	kernel.asm	/^static void commit();$/;"	l
static	kernel.asm	/^static void recover_from_log(void);$/;"	l
static	kernel.asm	/^static void wakeup1(void *chan);$/;"	l
static	kernel.asm	/^static void$/;"	l
static	kill.asm	/^static Header *freep;$/;"	l
static	kill.asm	/^static Header base;$/;"	l
static	kill.asm	/^static inline void$/;"	l
static	kill.asm	/^static void$/;"	l
static	ln.asm	/^static Header *freep;$/;"	l
static	ln.asm	/^static Header base;$/;"	l
static	ln.asm	/^static inline void$/;"	l
static	ln.asm	/^static void$/;"	l
static	ls.asm	/^static Header *freep;$/;"	l
static	ls.asm	/^static Header base;$/;"	l
static	ls.asm	/^static inline void$/;"	l
static	ls.asm	/^static void$/;"	l
static	mkdir.asm	/^static Header *freep;$/;"	l
static	mkdir.asm	/^static Header base;$/;"	l
static	mkdir.asm	/^static inline void$/;"	l
static	mkdir.asm	/^static void$/;"	l
static	ps.asm	/^static Header *freep;$/;"	l
static	ps.asm	/^static Header base;$/;"	l
static	ps.asm	/^static inline void$/;"	l
static	ps.asm	/^static void$/;"	l
static	rm.asm	/^static Header *freep;$/;"	l
static	rm.asm	/^static Header base;$/;"	l
static	rm.asm	/^static inline void$/;"	l
static	rm.asm	/^static void$/;"	l
static	setnice.asm	/^static Header *freep;$/;"	l
static	setnice.asm	/^static Header base;$/;"	l
static	setnice.asm	/^static inline void$/;"	l
static	setnice.asm	/^static void$/;"	l
static	sh.asm	/^static Header *freep;$/;"	l
static	sh.asm	/^static Header base;$/;"	l
static	sh.asm	/^static inline void$/;"	l
static	sh.asm	/^static void$/;"	l
static	stressfs.asm	/^static Header *freep;$/;"	l
static	stressfs.asm	/^static Header base;$/;"	l
static	stressfs.asm	/^static inline void$/;"	l
static	stressfs.asm	/^static void$/;"	l
static	test.asm	/^static Header *freep;$/;"	l
static	test.asm	/^static Header base;$/;"	l
static	test.asm	/^static inline void$/;"	l
static	test.asm	/^static void$/;"	l
static	thread_create.asm	/^static Header *freep;$/;"	l
static	thread_create.asm	/^static Header base;$/;"	l
static	thread_create.asm	/^static inline void$/;"	l
static	thread_create.asm	/^static void$/;"	l
static	thread_exit.asm	/^static Header *freep;$/;"	l
static	thread_exit.asm	/^static Header base;$/;"	l
static	thread_exit.asm	/^static inline void$/;"	l
static	thread_exit.asm	/^static void$/;"	l
static	thread_join.asm	/^static Header *freep;$/;"	l
static	thread_join.asm	/^static Header base;$/;"	l
static	thread_join.asm	/^static inline void$/;"	l
static	thread_join.asm	/^static void$/;"	l
static	usertests.asm	/^static Header *freep;$/;"	l
static	usertests.asm	/^static Header base;$/;"	l
static	usertests.asm	/^static inline void$/;"	l
static	usertests.asm	/^static void$/;"	l
static	wc.asm	/^static Header *freep;$/;"	l
static	wc.asm	/^static Header base;$/;"	l
static	wc.asm	/^static inline void$/;"	l
static	wc.asm	/^static void$/;"	l
static	zombie.asm	/^static Header *freep;$/;"	l
static	zombie.asm	/^static Header base;$/;"	l
static	zombie.asm	/^static inline void$/;"	l
static	zombie.asm	/^static void$/;"	l
static_assert	mkfs.c	15;"	d	file:
stdout	usertests.c	/^int stdout = 1;$/;"	v
sti	fmt/x86.h	/^0563 sti(void)$/;"	f
sti	x86.h	/^sti(void)$/;"	f
stosb	fmt/x86.h	/^0492 stosb(void *addr, int data, int cnt)$/;"	f
stosb	x86.h	/^stosb(void *addr, int data, int cnt)$/;"	f
stosl	fmt/x86.h	/^0501 stosl(void *addr, int data, int cnt)$/;"	f
stosl	x86.h	/^stosl(void *addr, int data, int cnt)$/;"	f
strchr	ulib.c	/^strchr(const char *s, char c)$/;"	f
strcmp	ulib.c	/^strcmp(const char *p, const char *q)$/;"	f
strcpy	ulib.c	/^strcpy(char *s, const char *t)$/;"	f
strlen	fmt/string.c	/^7551 strlen(const char *s)$/;"	f
strlen	string.c	/^strlen(const char *s)$/;"	f
strlen	ulib.c	/^strlen(const char *s)$/;"	f
strncmp	fmt/string.c	/^7508 strncmp(const char *p, const char *q, uint n)$/;"	f
strncmp	string.c	/^strncmp(const char *p, const char *q, uint n)$/;"	f
strncpy	fmt/string.c	/^7518 strncpy(char *s, const char *t, int n)$/;"	f
strncpy	string.c	/^strncpy(char *s, const char *t, int n)$/;"	f
struct	kernel.asm	/^  struct proc *curproc = myproc(); $/;"	l
struct	kernel.asm	/^  struct proc *curproc = myproc();$/;"	l
struct	kernel.asm	/^  struct proc *np;$/;"	l
struct	kernel.asm	/^  struct proc *p = myproc();$/;"	l
struct	kernel.asm	/^  struct proc *p;$/;"	l
subdir	usertests.c	/^subdir(void)$/;"	f
sum	fmt/mp.c	/^7768 sum(uchar *addr, int len)$/;"	f	file:
sum	kernel.asm	/^  sum = 0;$/;"	d
sum	mp.c	/^sum(uchar *addr, int len)$/;"	f	file:
superblock	fmt/fs.h	/^4613 struct superblock {$/;"	s
superblock	fs.h	/^struct superblock {$/;"	s
switchkvm	fmt/vm.c	/^1853 switchkvm(void)$/;"	f
switchkvm	vm.c	/^switchkvm(void)$/;"	f
switchuvm	fmt/vm.c	/^1860 switchuvm(struct proc *p)$/;"	f
switchuvm	vm.c	/^switchuvm(struct proc *p)$/;"	f
swtch	kernel.asm	/^swtch:$/;"	l
swtch	swtch.S	/^swtch:$/;"	l
symbols	fmt/sh.c	/^9403 char symbols[] = "<|>&;()";$/;"	v
symbols	sh.c	/^char symbols[] = "<|>&;()";$/;"	v
sys_chdir	fmt/sysfile.c	/^7051 sys_chdir(void)$/;"	f
sys_chdir	sysfile.c	/^sys_chdir(void)$/;"	f
sys_close	fmt/sysfile.c	/^6713 sys_close(void)$/;"	f
sys_close	sysfile.c	/^sys_close(void)$/;"	f
sys_cond_init	fmt/sysproc.c	/^4328 sys_cond_init(void)$/;"	f
sys_cond_init	sysproc.c	/^sys_cond_init(void)$/;"	f
sys_cond_signal	fmt/sysproc.c	/^4351 sys_cond_signal(void)$/;"	f
sys_cond_signal	sysproc.c	/^sys_cond_signal(void)$/;"	f
sys_cond_wait	fmt/sysproc.c	/^4337 sys_cond_wait(void)$/;"	f
sys_cond_wait	sysproc.c	/^sys_cond_wait(void)$/;"	f
sys_dup	fmt/sysfile.c	/^6668 sys_dup(void)$/;"	f
sys_dup	sysfile.c	/^sys_dup(void)$/;"	f
sys_exec	fmt/sysfile.c	/^7076 sys_exec(void)$/;"	f
sys_exec	sysfile.c	/^sys_exec(void)$/;"	f
sys_exit	fmt/sysproc.c	/^4117 sys_exit(void)$/;"	f
sys_exit	sysproc.c	/^sys_exit(void)$/;"	f
sys_fork	fmt/sysproc.c	/^4111 sys_fork(void)$/;"	f
sys_fork	sysproc.c	/^sys_fork(void)$/;"	f
sys_fstat	fmt/sysfile.c	/^6726 sys_fstat(void)$/;"	f
sys_fstat	sysfile.c	/^sys_fstat(void)$/;"	f
sys_getnice	fmt/sysproc.c	/^4208 sys_getnice(void)$/;"	f
sys_getnice	sysproc.c	/^sys_getnice(void)$/;"	f
sys_getpid	fmt/sysproc.c	/^4140 sys_getpid(void)$/;"	f
sys_getpid	sysproc.c	/^sys_getpid(void)$/;"	f
sys_gettid	fmt/sysproc.c	/^4285 sys_gettid(void)$/;"	f
sys_gettid	sysproc.c	/^sys_gettid(void)$/;"	f
sys_halt	fmt/sysproc.c	/^4201 sys_halt(void)$/;"	f
sys_halt	sysproc.c	/^sys_halt(void)$/;"	f
sys_kill	fmt/sysproc.c	/^4130 sys_kill(void)$/;"	f
sys_kill	sysproc.c	/^sys_kill(void)$/;"	f
sys_link	fmt/sysfile.c	/^6752 sys_link(void)$/;"	f
sys_link	sysfile.c	/^sys_link(void)$/;"	f
sys_mkdir	fmt/sysfile.c	/^7001 sys_mkdir(void)$/;"	f
sys_mkdir	sysfile.c	/^sys_mkdir(void)$/;"	f
sys_mknod	fmt/sysfile.c	/^7017 sys_mknod(void)$/;"	f
sys_mknod	sysfile.c	/^sys_mknod(void)$/;"	f
sys_mutex_init	fmt/sysproc.c	/^4301 sys_mutex_init(void)$/;"	f
sys_mutex_init	sysproc.c	/^sys_mutex_init(void)$/;"	f
sys_mutex_lock	fmt/sysproc.c	/^4309 sys_mutex_lock(void)$/;"	f
sys_mutex_lock	sysproc.c	/^sys_mutex_lock(void)$/;"	f
sys_mutex_unlock	fmt/sysproc.c	/^4318 sys_mutex_unlock(void)$/;"	f
sys_mutex_unlock	sysproc.c	/^sys_mutex_unlock(void)$/;"	f
sys_open	fmt/sysfile.c	/^6951 sys_open(void)$/;"	f
sys_open	sysfile.c	/^sys_open(void)$/;"	f
sys_pipe	fmt/sysfile.c	/^7101 sys_pipe(void)$/;"	f
sys_pipe	sysfile.c	/^sys_pipe(void)$/;"	f
sys_ps	fmt/sysproc.c	/^4230 sys_ps(void)$/;"	f
sys_ps	sysproc.c	/^sys_ps(void)$/;"	f
sys_read	fmt/sysfile.c	/^6682 sys_read(void)$/;"	f
sys_read	sysfile.c	/^sys_read(void)$/;"	f
sys_sbrk	fmt/sysproc.c	/^4151 sys_sbrk(void)$/;"	f
sys_sbrk	sysproc.c	/^sys_sbrk(void)$/;"	f
sys_setnice	fmt/sysproc.c	/^4218 sys_setnice(void)$/;"	f
sys_setnice	sysproc.c	/^sys_setnice(void)$/;"	f
sys_sleep	fmt/sysproc.c	/^4165 sys_sleep(void)$/;"	f
sys_sleep	sysproc.c	/^sys_sleep(void)$/;"	f
sys_thread_create	fmt/sysproc.c	/^4251 sys_thread_create(void)$/;"	f
sys_thread_create	sysproc.c	/^sys_thread_create(void)$/;"	f
sys_thread_exit	fmt/sysproc.c	/^4264 sys_thread_exit(void)$/;"	f
sys_thread_exit	sysproc.c	/^sys_thread_exit(void)$/;"	f
sys_thread_join	fmt/sysproc.c	/^4273 sys_thread_join(void)$/;"	f
sys_thread_join	sysproc.c	/^sys_thread_join(void)$/;"	f
sys_unlink	fmt/sysfile.c	/^6851 sys_unlink(void)$/;"	f
sys_unlink	sysfile.c	/^sys_unlink(void)$/;"	f
sys_uptime	fmt/sysproc.c	/^4188 sys_uptime(void)$/;"	f
sys_uptime	sysproc.c	/^sys_uptime(void)$/;"	f
sys_wait	fmt/sysproc.c	/^4124 sys_wait(void)$/;"	f
sys_wait	sysproc.c	/^sys_wait(void)$/;"	f
sys_write	fmt/sysfile.c	/^6701 sys_write(void)$/;"	f
sys_write	sysfile.c	/^sys_write(void)$/;"	f
syscall	fmt/syscall.c	/^4076 syscall(void)$/;"	f
syscall	syscall.c	/^syscall(void)$/;"	f
syscalls	fmt/syscall.c	/^4036 static int (*syscalls[])(void) = {$/;"	v	file:
syscalls	syscall.c	/^static int (*syscalls[])(void) = {$/;"	v	file:
sz	fmt/proc.h	/^2338   uint sz;                     \/\/ Size of process memory (bytes)$/;"	m	struct:proc
sz	kernel.asm	/^  sz = 0;$/;"	d
sz	kernel.asm	/^  sz = PGROUNDUP(sz);$/;"	d
sz	kernel.asm	/^  sz = curproc->sz;$/;"	d
sz	proc.h	/^  uint sz;                     \/\/ Size of process memory (bytes)$/;"	m	struct:proc
t	fmt/mmu.h	/^0850   ushort t;          \/\/ Trap on task switch$/;"	m	struct:taskstate
t	mmu.h	/^  ushort t;          \/\/ Trap on task switch$/;"	m	struct:taskstate
target	kernel.asm	/^  target = n;$/;"	d
taskstate	fmt/mmu.h	/^0814 struct taskstate {$/;"	s
taskstate	mmu.h	/^struct taskstate {$/;"	s
tcnt	fmt/proc.h	/^2354   int tcnt;$/;"	m	struct:proc
tcnt	proc.h	/^  int tcnt;$/;"	m	struct:proc
tf	fmt/proc.h	/^2345   struct trapframe *tf;        \/\/ Trap frame for current syscall$/;"	m	struct:proc	typeref:struct:proc::trapframe
tf	proc.h	/^  struct trapframe *tf;        \/\/ Trap frame for current syscall$/;"	m	struct:proc	typeref:struct:proc::trapframe
thread	test.c	/^void *thread(void *arg){$/;"	f
thread_create	fmt/proc.c	/^3200 int thread_create(void* (*function)(void*), void* arg, void* stack)$/;"	f
thread_create	proc.c	/^int thread_create(void* (*function)(void*), void* arg, void* stack)$/;"	f
thread_exit	fmt/proc.c	/^3259 thread_exit(void* retval)$/;"	f
thread_exit	proc.c	/^thread_exit(void* retval)$/;"	f
thread_join	fmt/proc.c	/^3303 thread_join(int tid, void** retval)$/;"	f
thread_join	proc.c	/^thread_join(int tid, void** retval)$/;"	f
ticks	fmt/trap.c	/^3714 uint ticks;$/;"	v
ticks	trap.c	/^uint ticks;$/;"	v
ticks0	kernel.asm	/^  ticks0 = ticks;$/;"	d
tickslock	fmt/trap.c	/^3713 struct spinlock tickslock;$/;"	v	typeref:struct:spinlock
tickslock	trap.c	/^struct spinlock tickslock;$/;"	v	typeref:struct:spinlock
tid	fmt/proc.h	/^2353   int tid;$/;"	m	struct:proc
tid	proc.h	/^  int tid;$/;"	m	struct:proc
tid	test.c	/^int tid[NTHREAD];$/;"	v
togglecode	fmt/kbd.h	/^8293 static uchar togglecode[256] =$/;"	v
togglecode	kbd.h	/^static uchar togglecode[256] =$/;"	v
tok	sh.asm	/^    tok = gettoken(ps, es, 0, 0);$/;"	d
total	usertests.asm	/^    total = 0;$/;"	d
total	usertests.asm	/^  total = 0;$/;"	d
trap	fmt/trap.c	/^3751 trap(struct trapframe *tf)$/;"	f
trap	trap.c	/^trap(struct trapframe *tf)$/;"	f
trapframe	fmt/x86.h	/^0602 struct trapframe {$/;"	s
trapframe	x86.h	/^struct trapframe {$/;"	s
trapno	fmt/x86.h	/^0622   uint trapno;$/;"	m	struct:trapframe
trapno	x86.h	/^  uint trapno;$/;"	m	struct:trapframe
trapret	kernel.asm	/^trapret:$/;"	l
trapret	trapasm.S	/^trapret:$/;"	l
ts	fmt/proc.h	/^2304   struct taskstate ts;         \/\/ Used by x86 to find stack for interrupt$/;"	m	struct:cpu	typeref:struct:cpu::taskstate
ts	proc.h	/^  struct taskstate ts;         \/\/ Used by x86 to find stack for interrupt$/;"	m	struct:cpu	typeref:struct:cpu::taskstate
tsleep	proc.c	/^int tsleep(struct mutex_t *mutex)$/;"	f
tvinit	fmt/trap.c	/^3717 tvinit(void)$/;"	f
tvinit	trap.c	/^tvinit(void)$/;"	f
twake	proc.c	/^int twake(struct proc *p)$/;"	f
type	elf.h	/^  uint type;$/;"	m	struct:proghdr
type	elf.h	/^  ushort type;$/;"	m	struct:elfhdr
type	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	m	struct:file	typeref:enum:file::__anon10
type	file.h	/^  short type;         \/\/ copy of disk inode$/;"	m	struct:inode
type	fmt/elf.h	/^0908   ushort type;$/;"	m	struct:elfhdr
type	fmt/elf.h	/^0925   uint type;$/;"	m	struct:proghdr
type	fmt/file.h	/^4701   enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	m	struct:file	typeref:enum:file::__anon2
type	fmt/file.h	/^4719   short type;         \/\/ copy of disk inode$/;"	m	struct:inode
type	fmt/fs.h	/^4629   short type;           \/\/ File type$/;"	m	struct:dinode
type	fmt/mmu.h	/^0729   uint type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:segdesc
type	fmt/mmu.h	/^0860   uint type : 4;        \/\/ type(STS_{IG32,TG32})$/;"	m	struct:gatedesc
type	fmt/mp.h	/^7608   uchar type;                   \/\/ MP system config type$/;"	m	struct:mp
type	fmt/mp.h	/^7629   uchar type;                   \/\/ entry type (0)$/;"	m	struct:mpproc
type	fmt/mp.h	/^7640   uchar type;                   \/\/ entry type (2)$/;"	m	struct:mpioapic
type	fmt/sh.c	/^9116   int type;$/;"	m	struct:cmd	file:
type	fmt/sh.c	/^9120   int type;$/;"	m	struct:execcmd	file:
type	fmt/sh.c	/^9126   int type;$/;"	m	struct:redircmd	file:
type	fmt/sh.c	/^9135   int type;$/;"	m	struct:pipecmd	file:
type	fmt/sh.c	/^9141   int type;$/;"	m	struct:listcmd	file:
type	fmt/sh.c	/^9147   int type;$/;"	m	struct:backcmd	file:
type	fmt/stat.h	/^4555   short type;  \/\/ Type of file$/;"	m	struct:stat
type	fs.h	/^  short type;           \/\/ File type$/;"	m	struct:dinode
type	mmu.h	/^  uint type : 4;        \/\/ type(STS_{IG32,TG32})$/;"	m	struct:gatedesc
type	mmu.h	/^  uint type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:segdesc
type	mp.h	/^  uchar type;                   \/\/ MP system config type$/;"	m	struct:mp
type	mp.h	/^  uchar type;                   \/\/ entry type (0)$/;"	m	struct:mpproc
type	mp.h	/^  uchar type;                   \/\/ entry type (2)$/;"	m	struct:mpioapic
type	sh.c	/^  int type;$/;"	m	struct:backcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:cmd	file:
type	sh.c	/^  int type;$/;"	m	struct:execcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:listcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:pipecmd	file:
type	sh.c	/^  int type;$/;"	m	struct:redircmd	file:
type	stat.h	/^  short type;  \/\/ Type of file$/;"	m	struct:stat
uart	fmt/uart.c	/^8866 static int uart;    \/\/ is there a uart?$/;"	v	file:
uart	kernel.asm	/^  uart = 1;$/;"	d
uart	uart.c	/^static int uart;    \/\/ is there a uart?$/;"	v	file:
uartgetc	fmt/uart.c	/^8913 uartgetc(void)$/;"	f	file:
uartgetc	uart.c	/^uartgetc(void)$/;"	f	file:
uartinit	fmt/uart.c	/^8869 uartinit(void)$/;"	f
uartinit	uart.c	/^uartinit(void)$/;"	f
uartintr	fmt/uart.c	/^8923 uartintr(void)$/;"	f
uartintr	uart.c	/^uartintr(void)$/;"	f
uartputc	fmt/uart.c	/^8901 uartputc(int c)$/;"	f
uartputc	uart.c	/^uartputc(int c)$/;"	f
uchar	fmt/types.h	/^0102 typedef unsigned char  uchar;$/;"	t
uchar	types.h	/^typedef unsigned char  uchar;$/;"	t
uint	cat.asm	/^uint$/;"	l
uint	echo.asm	/^uint$/;"	l
uint	fmt/types.h	/^0100 typedef unsigned int   uint;$/;"	t
uint	forktest.asm	/^uint$/;"	l
uint	getnice.asm	/^uint$/;"	l
uint	gettid.asm	/^uint$/;"	l
uint	grep.asm	/^uint$/;"	l
uint	halt.asm	/^uint$/;"	l
uint	init.asm	/^uint$/;"	l
uint	kernel.asm	/^uint ticks;$/;"	l
uint	kill.asm	/^uint$/;"	l
uint	ln.asm	/^uint$/;"	l
uint	ls.asm	/^uint$/;"	l
uint	mkdir.asm	/^uint$/;"	l
uint	ps.asm	/^uint$/;"	l
uint	rm.asm	/^uint$/;"	l
uint	setnice.asm	/^uint$/;"	l
uint	sh.asm	/^uint$/;"	l
uint	stressfs.asm	/^uint$/;"	l
uint	test.asm	/^uint$/;"	l
uint	thread_create.asm	/^uint$/;"	l
uint	thread_exit.asm	/^uint$/;"	l
uint	thread_join.asm	/^uint$/;"	l
uint	types.h	/^typedef unsigned int   uint;$/;"	t
uint	usertests.asm	/^uint$/;"	l
uint	wc.asm	/^uint$/;"	l
uint	zombie.asm	/^uint$/;"	l
uio	usertests.c	/^uio()$/;"	f
uninit	usertests.c	/^char uninit[10000];$/;"	v
unlinkread	usertests.c	/^unlinkread(void)$/;"	f
unsigned	usertests.asm	/^unsigned int$/;"	l
unsigned	usertests.asm	/^unsigned long randstate = 1;$/;"	l
use_lock	fmt/kalloc.c	/^3471   int use_lock;$/;"	m	struct:__anon3	file:
use_lock	kalloc.c	/^  int use_lock;$/;"	m	struct:__anon11	file:
userinit	fmt/proc.c	/^2553 userinit(void)$/;"	f
userinit	proc.c	/^userinit(void)$/;"	f
ushort	fmt/types.h	/^0101 typedef unsigned short ushort;$/;"	t
ushort	types.h	/^typedef unsigned short ushort;$/;"	t
uva2ka	fmt/vm.c	/^2102 uva2ka(pde_t *pgdir, char *uva)$/;"	f
uva2ka	vm.c	/^uva2ka(pde_t *pgdir, char *uva)$/;"	f
va	kernel.asm	/^    va = va0 + PGSIZE;$/;"	d
va0	kernel.asm	/^    va0 = (uint)PGROUNDDOWN(va);$/;"	d
vaddr	elf.h	/^  uint vaddr;$/;"	m	struct:proghdr
vaddr	fmt/elf.h	/^0927   uint vaddr;$/;"	m	struct:proghdr
val	usertests.asm	/^    val = 0x09;  \/* year *\/$/;"	d
valid	file.h	/^  int valid;          \/\/ inode has been read from disk?$/;"	m	struct:inode
valid	fmt/file.h	/^4717   int valid;          \/\/ inode has been read from disk?$/;"	m	struct:inode
valid	synch.h	/^  int valid;$/;"	m	struct:cond_t
valid	synch.h	/^  int valid;$/;"	m	struct:mutex_t
validateint	usertests.c	/^validateint(int *p)$/;"	f
validatetest	usertests.c	/^validatetest(void)$/;"	f
vector0	kernel.asm	/^vector0:$/;"	l
vector0	vectors.S	/^vector0:$/;"	l
vector1	kernel.asm	/^vector1:$/;"	l
vector1	vectors.S	/^vector1:$/;"	l
vector10	kernel.asm	/^vector10:$/;"	l
vector10	vectors.S	/^vector10:$/;"	l
vector100	kernel.asm	/^vector100:$/;"	l
vector100	vectors.S	/^vector100:$/;"	l
vector101	kernel.asm	/^vector101:$/;"	l
vector101	vectors.S	/^vector101:$/;"	l
vector102	kernel.asm	/^vector102:$/;"	l
vector102	vectors.S	/^vector102:$/;"	l
vector103	kernel.asm	/^vector103:$/;"	l
vector103	vectors.S	/^vector103:$/;"	l
vector104	kernel.asm	/^vector104:$/;"	l
vector104	vectors.S	/^vector104:$/;"	l
vector105	kernel.asm	/^vector105:$/;"	l
vector105	vectors.S	/^vector105:$/;"	l
vector106	kernel.asm	/^vector106:$/;"	l
vector106	vectors.S	/^vector106:$/;"	l
vector107	kernel.asm	/^vector107:$/;"	l
vector107	vectors.S	/^vector107:$/;"	l
vector108	kernel.asm	/^vector108:$/;"	l
vector108	vectors.S	/^vector108:$/;"	l
vector109	kernel.asm	/^vector109:$/;"	l
vector109	vectors.S	/^vector109:$/;"	l
vector11	kernel.asm	/^vector11:$/;"	l
vector11	vectors.S	/^vector11:$/;"	l
vector110	kernel.asm	/^vector110:$/;"	l
vector110	vectors.S	/^vector110:$/;"	l
vector111	kernel.asm	/^vector111:$/;"	l
vector111	vectors.S	/^vector111:$/;"	l
vector112	kernel.asm	/^vector112:$/;"	l
vector112	vectors.S	/^vector112:$/;"	l
vector113	kernel.asm	/^vector113:$/;"	l
vector113	vectors.S	/^vector113:$/;"	l
vector114	kernel.asm	/^vector114:$/;"	l
vector114	vectors.S	/^vector114:$/;"	l
vector115	kernel.asm	/^vector115:$/;"	l
vector115	vectors.S	/^vector115:$/;"	l
vector116	kernel.asm	/^vector116:$/;"	l
vector116	vectors.S	/^vector116:$/;"	l
vector117	kernel.asm	/^vector117:$/;"	l
vector117	vectors.S	/^vector117:$/;"	l
vector118	kernel.asm	/^vector118:$/;"	l
vector118	vectors.S	/^vector118:$/;"	l
vector119	kernel.asm	/^vector119:$/;"	l
vector119	vectors.S	/^vector119:$/;"	l
vector12	kernel.asm	/^vector12:$/;"	l
vector12	vectors.S	/^vector12:$/;"	l
vector120	kernel.asm	/^vector120:$/;"	l
vector120	vectors.S	/^vector120:$/;"	l
vector121	kernel.asm	/^vector121:$/;"	l
vector121	vectors.S	/^vector121:$/;"	l
vector122	kernel.asm	/^vector122:$/;"	l
vector122	vectors.S	/^vector122:$/;"	l
vector123	kernel.asm	/^vector123:$/;"	l
vector123	vectors.S	/^vector123:$/;"	l
vector124	kernel.asm	/^vector124:$/;"	l
vector124	vectors.S	/^vector124:$/;"	l
vector125	kernel.asm	/^vector125:$/;"	l
vector125	vectors.S	/^vector125:$/;"	l
vector126	kernel.asm	/^vector126:$/;"	l
vector126	vectors.S	/^vector126:$/;"	l
vector127	kernel.asm	/^vector127:$/;"	l
vector127	vectors.S	/^vector127:$/;"	l
vector128	kernel.asm	/^vector128:$/;"	l
vector128	vectors.S	/^vector128:$/;"	l
vector129	kernel.asm	/^vector129:$/;"	l
vector129	vectors.S	/^vector129:$/;"	l
vector13	kernel.asm	/^vector13:$/;"	l
vector13	vectors.S	/^vector13:$/;"	l
vector130	kernel.asm	/^vector130:$/;"	l
vector130	vectors.S	/^vector130:$/;"	l
vector131	kernel.asm	/^vector131:$/;"	l
vector131	vectors.S	/^vector131:$/;"	l
vector132	kernel.asm	/^vector132:$/;"	l
vector132	vectors.S	/^vector132:$/;"	l
vector133	kernel.asm	/^vector133:$/;"	l
vector133	vectors.S	/^vector133:$/;"	l
vector134	kernel.asm	/^vector134:$/;"	l
vector134	vectors.S	/^vector134:$/;"	l
vector135	kernel.asm	/^vector135:$/;"	l
vector135	vectors.S	/^vector135:$/;"	l
vector136	kernel.asm	/^vector136:$/;"	l
vector136	vectors.S	/^vector136:$/;"	l
vector137	kernel.asm	/^vector137:$/;"	l
vector137	vectors.S	/^vector137:$/;"	l
vector138	kernel.asm	/^vector138:$/;"	l
vector138	vectors.S	/^vector138:$/;"	l
vector139	kernel.asm	/^vector139:$/;"	l
vector139	vectors.S	/^vector139:$/;"	l
vector14	kernel.asm	/^vector14:$/;"	l
vector14	vectors.S	/^vector14:$/;"	l
vector140	kernel.asm	/^vector140:$/;"	l
vector140	vectors.S	/^vector140:$/;"	l
vector141	kernel.asm	/^vector141:$/;"	l
vector141	vectors.S	/^vector141:$/;"	l
vector142	kernel.asm	/^vector142:$/;"	l
vector142	vectors.S	/^vector142:$/;"	l
vector143	kernel.asm	/^vector143:$/;"	l
vector143	vectors.S	/^vector143:$/;"	l
vector144	kernel.asm	/^vector144:$/;"	l
vector144	vectors.S	/^vector144:$/;"	l
vector145	kernel.asm	/^vector145:$/;"	l
vector145	vectors.S	/^vector145:$/;"	l
vector146	kernel.asm	/^vector146:$/;"	l
vector146	vectors.S	/^vector146:$/;"	l
vector147	kernel.asm	/^vector147:$/;"	l
vector147	vectors.S	/^vector147:$/;"	l
vector148	kernel.asm	/^vector148:$/;"	l
vector148	vectors.S	/^vector148:$/;"	l
vector149	kernel.asm	/^vector149:$/;"	l
vector149	vectors.S	/^vector149:$/;"	l
vector15	kernel.asm	/^vector15:$/;"	l
vector15	vectors.S	/^vector15:$/;"	l
vector150	kernel.asm	/^vector150:$/;"	l
vector150	vectors.S	/^vector150:$/;"	l
vector151	kernel.asm	/^vector151:$/;"	l
vector151	vectors.S	/^vector151:$/;"	l
vector152	kernel.asm	/^vector152:$/;"	l
vector152	vectors.S	/^vector152:$/;"	l
vector153	kernel.asm	/^vector153:$/;"	l
vector153	vectors.S	/^vector153:$/;"	l
vector154	kernel.asm	/^vector154:$/;"	l
vector154	vectors.S	/^vector154:$/;"	l
vector155	kernel.asm	/^vector155:$/;"	l
vector155	vectors.S	/^vector155:$/;"	l
vector156	kernel.asm	/^vector156:$/;"	l
vector156	vectors.S	/^vector156:$/;"	l
vector157	kernel.asm	/^vector157:$/;"	l
vector157	vectors.S	/^vector157:$/;"	l
vector158	kernel.asm	/^vector158:$/;"	l
vector158	vectors.S	/^vector158:$/;"	l
vector159	kernel.asm	/^vector159:$/;"	l
vector159	vectors.S	/^vector159:$/;"	l
vector16	kernel.asm	/^vector16:$/;"	l
vector16	vectors.S	/^vector16:$/;"	l
vector160	kernel.asm	/^vector160:$/;"	l
vector160	vectors.S	/^vector160:$/;"	l
vector161	kernel.asm	/^vector161:$/;"	l
vector161	vectors.S	/^vector161:$/;"	l
vector162	kernel.asm	/^vector162:$/;"	l
vector162	vectors.S	/^vector162:$/;"	l
vector163	kernel.asm	/^vector163:$/;"	l
vector163	vectors.S	/^vector163:$/;"	l
vector164	kernel.asm	/^vector164:$/;"	l
vector164	vectors.S	/^vector164:$/;"	l
vector165	kernel.asm	/^vector165:$/;"	l
vector165	vectors.S	/^vector165:$/;"	l
vector166	kernel.asm	/^vector166:$/;"	l
vector166	vectors.S	/^vector166:$/;"	l
vector167	kernel.asm	/^vector167:$/;"	l
vector167	vectors.S	/^vector167:$/;"	l
vector168	kernel.asm	/^vector168:$/;"	l
vector168	vectors.S	/^vector168:$/;"	l
vector169	kernel.asm	/^vector169:$/;"	l
vector169	vectors.S	/^vector169:$/;"	l
vector17	kernel.asm	/^vector17:$/;"	l
vector17	vectors.S	/^vector17:$/;"	l
vector170	kernel.asm	/^vector170:$/;"	l
vector170	vectors.S	/^vector170:$/;"	l
vector171	kernel.asm	/^vector171:$/;"	l
vector171	vectors.S	/^vector171:$/;"	l
vector172	kernel.asm	/^vector172:$/;"	l
vector172	vectors.S	/^vector172:$/;"	l
vector173	kernel.asm	/^vector173:$/;"	l
vector173	vectors.S	/^vector173:$/;"	l
vector174	kernel.asm	/^vector174:$/;"	l
vector174	vectors.S	/^vector174:$/;"	l
vector175	kernel.asm	/^vector175:$/;"	l
vector175	vectors.S	/^vector175:$/;"	l
vector176	kernel.asm	/^vector176:$/;"	l
vector176	vectors.S	/^vector176:$/;"	l
vector177	kernel.asm	/^vector177:$/;"	l
vector177	vectors.S	/^vector177:$/;"	l
vector178	kernel.asm	/^vector178:$/;"	l
vector178	vectors.S	/^vector178:$/;"	l
vector179	kernel.asm	/^vector179:$/;"	l
vector179	vectors.S	/^vector179:$/;"	l
vector18	kernel.asm	/^vector18:$/;"	l
vector18	vectors.S	/^vector18:$/;"	l
vector180	kernel.asm	/^vector180:$/;"	l
vector180	vectors.S	/^vector180:$/;"	l
vector181	kernel.asm	/^vector181:$/;"	l
vector181	vectors.S	/^vector181:$/;"	l
vector182	kernel.asm	/^vector182:$/;"	l
vector182	vectors.S	/^vector182:$/;"	l
vector183	kernel.asm	/^vector183:$/;"	l
vector183	vectors.S	/^vector183:$/;"	l
vector184	kernel.asm	/^vector184:$/;"	l
vector184	vectors.S	/^vector184:$/;"	l
vector185	kernel.asm	/^vector185:$/;"	l
vector185	vectors.S	/^vector185:$/;"	l
vector186	kernel.asm	/^vector186:$/;"	l
vector186	vectors.S	/^vector186:$/;"	l
vector187	kernel.asm	/^vector187:$/;"	l
vector187	vectors.S	/^vector187:$/;"	l
vector188	kernel.asm	/^vector188:$/;"	l
vector188	vectors.S	/^vector188:$/;"	l
vector189	kernel.asm	/^vector189:$/;"	l
vector189	vectors.S	/^vector189:$/;"	l
vector19	kernel.asm	/^vector19:$/;"	l
vector19	vectors.S	/^vector19:$/;"	l
vector190	kernel.asm	/^vector190:$/;"	l
vector190	vectors.S	/^vector190:$/;"	l
vector191	kernel.asm	/^vector191:$/;"	l
vector191	vectors.S	/^vector191:$/;"	l
vector192	kernel.asm	/^vector192:$/;"	l
vector192	vectors.S	/^vector192:$/;"	l
vector193	kernel.asm	/^vector193:$/;"	l
vector193	vectors.S	/^vector193:$/;"	l
vector194	kernel.asm	/^vector194:$/;"	l
vector194	vectors.S	/^vector194:$/;"	l
vector195	kernel.asm	/^vector195:$/;"	l
vector195	vectors.S	/^vector195:$/;"	l
vector196	kernel.asm	/^vector196:$/;"	l
vector196	vectors.S	/^vector196:$/;"	l
vector197	kernel.asm	/^vector197:$/;"	l
vector197	vectors.S	/^vector197:$/;"	l
vector198	kernel.asm	/^vector198:$/;"	l
vector198	vectors.S	/^vector198:$/;"	l
vector199	kernel.asm	/^vector199:$/;"	l
vector199	vectors.S	/^vector199:$/;"	l
vector2	kernel.asm	/^vector2:$/;"	l
vector2	vectors.S	/^vector2:$/;"	l
vector20	kernel.asm	/^vector20:$/;"	l
vector20	vectors.S	/^vector20:$/;"	l
vector200	kernel.asm	/^vector200:$/;"	l
vector200	vectors.S	/^vector200:$/;"	l
vector201	kernel.asm	/^vector201:$/;"	l
vector201	vectors.S	/^vector201:$/;"	l
vector202	kernel.asm	/^vector202:$/;"	l
vector202	vectors.S	/^vector202:$/;"	l
vector203	kernel.asm	/^vector203:$/;"	l
vector203	vectors.S	/^vector203:$/;"	l
vector204	kernel.asm	/^vector204:$/;"	l
vector204	vectors.S	/^vector204:$/;"	l
vector205	kernel.asm	/^vector205:$/;"	l
vector205	vectors.S	/^vector205:$/;"	l
vector206	kernel.asm	/^vector206:$/;"	l
vector206	vectors.S	/^vector206:$/;"	l
vector207	kernel.asm	/^vector207:$/;"	l
vector207	vectors.S	/^vector207:$/;"	l
vector208	kernel.asm	/^vector208:$/;"	l
vector208	vectors.S	/^vector208:$/;"	l
vector209	kernel.asm	/^vector209:$/;"	l
vector209	vectors.S	/^vector209:$/;"	l
vector21	kernel.asm	/^vector21:$/;"	l
vector21	vectors.S	/^vector21:$/;"	l
vector210	kernel.asm	/^vector210:$/;"	l
vector210	vectors.S	/^vector210:$/;"	l
vector211	kernel.asm	/^vector211:$/;"	l
vector211	vectors.S	/^vector211:$/;"	l
vector212	kernel.asm	/^vector212:$/;"	l
vector212	vectors.S	/^vector212:$/;"	l
vector213	kernel.asm	/^vector213:$/;"	l
vector213	vectors.S	/^vector213:$/;"	l
vector214	kernel.asm	/^vector214:$/;"	l
vector214	vectors.S	/^vector214:$/;"	l
vector215	kernel.asm	/^vector215:$/;"	l
vector215	vectors.S	/^vector215:$/;"	l
vector216	kernel.asm	/^vector216:$/;"	l
vector216	vectors.S	/^vector216:$/;"	l
vector217	kernel.asm	/^vector217:$/;"	l
vector217	vectors.S	/^vector217:$/;"	l
vector218	kernel.asm	/^vector218:$/;"	l
vector218	vectors.S	/^vector218:$/;"	l
vector219	kernel.asm	/^vector219:$/;"	l
vector219	vectors.S	/^vector219:$/;"	l
vector22	kernel.asm	/^vector22:$/;"	l
vector22	vectors.S	/^vector22:$/;"	l
vector220	kernel.asm	/^vector220:$/;"	l
vector220	vectors.S	/^vector220:$/;"	l
vector221	kernel.asm	/^vector221:$/;"	l
vector221	vectors.S	/^vector221:$/;"	l
vector222	kernel.asm	/^vector222:$/;"	l
vector222	vectors.S	/^vector222:$/;"	l
vector223	kernel.asm	/^vector223:$/;"	l
vector223	vectors.S	/^vector223:$/;"	l
vector224	kernel.asm	/^vector224:$/;"	l
vector224	vectors.S	/^vector224:$/;"	l
vector225	kernel.asm	/^vector225:$/;"	l
vector225	vectors.S	/^vector225:$/;"	l
vector226	kernel.asm	/^vector226:$/;"	l
vector226	vectors.S	/^vector226:$/;"	l
vector227	kernel.asm	/^vector227:$/;"	l
vector227	vectors.S	/^vector227:$/;"	l
vector228	kernel.asm	/^vector228:$/;"	l
vector228	vectors.S	/^vector228:$/;"	l
vector229	kernel.asm	/^vector229:$/;"	l
vector229	vectors.S	/^vector229:$/;"	l
vector23	kernel.asm	/^vector23:$/;"	l
vector23	vectors.S	/^vector23:$/;"	l
vector230	kernel.asm	/^vector230:$/;"	l
vector230	vectors.S	/^vector230:$/;"	l
vector231	kernel.asm	/^vector231:$/;"	l
vector231	vectors.S	/^vector231:$/;"	l
vector232	kernel.asm	/^vector232:$/;"	l
vector232	vectors.S	/^vector232:$/;"	l
vector233	kernel.asm	/^vector233:$/;"	l
vector233	vectors.S	/^vector233:$/;"	l
vector234	kernel.asm	/^vector234:$/;"	l
vector234	vectors.S	/^vector234:$/;"	l
vector235	kernel.asm	/^vector235:$/;"	l
vector235	vectors.S	/^vector235:$/;"	l
vector236	kernel.asm	/^vector236:$/;"	l
vector236	vectors.S	/^vector236:$/;"	l
vector237	kernel.asm	/^vector237:$/;"	l
vector237	vectors.S	/^vector237:$/;"	l
vector238	kernel.asm	/^vector238:$/;"	l
vector238	vectors.S	/^vector238:$/;"	l
vector239	kernel.asm	/^vector239:$/;"	l
vector239	vectors.S	/^vector239:$/;"	l
vector24	kernel.asm	/^vector24:$/;"	l
vector24	vectors.S	/^vector24:$/;"	l
vector240	kernel.asm	/^vector240:$/;"	l
vector240	vectors.S	/^vector240:$/;"	l
vector241	kernel.asm	/^vector241:$/;"	l
vector241	vectors.S	/^vector241:$/;"	l
vector242	kernel.asm	/^vector242:$/;"	l
vector242	vectors.S	/^vector242:$/;"	l
vector243	kernel.asm	/^vector243:$/;"	l
vector243	vectors.S	/^vector243:$/;"	l
vector244	kernel.asm	/^vector244:$/;"	l
vector244	vectors.S	/^vector244:$/;"	l
vector245	kernel.asm	/^vector245:$/;"	l
vector245	vectors.S	/^vector245:$/;"	l
vector246	kernel.asm	/^vector246:$/;"	l
vector246	vectors.S	/^vector246:$/;"	l
vector247	kernel.asm	/^vector247:$/;"	l
vector247	vectors.S	/^vector247:$/;"	l
vector248	kernel.asm	/^vector248:$/;"	l
vector248	vectors.S	/^vector248:$/;"	l
vector249	kernel.asm	/^vector249:$/;"	l
vector249	vectors.S	/^vector249:$/;"	l
vector25	kernel.asm	/^vector25:$/;"	l
vector25	vectors.S	/^vector25:$/;"	l
vector250	kernel.asm	/^vector250:$/;"	l
vector250	vectors.S	/^vector250:$/;"	l
vector251	kernel.asm	/^vector251:$/;"	l
vector251	vectors.S	/^vector251:$/;"	l
vector252	kernel.asm	/^vector252:$/;"	l
vector252	vectors.S	/^vector252:$/;"	l
vector253	kernel.asm	/^vector253:$/;"	l
vector253	vectors.S	/^vector253:$/;"	l
vector254	kernel.asm	/^vector254:$/;"	l
vector254	vectors.S	/^vector254:$/;"	l
vector255	kernel.asm	/^vector255:$/;"	l
vector255	vectors.S	/^vector255:$/;"	l
vector26	kernel.asm	/^vector26:$/;"	l
vector26	vectors.S	/^vector26:$/;"	l
vector27	kernel.asm	/^vector27:$/;"	l
vector27	vectors.S	/^vector27:$/;"	l
vector28	kernel.asm	/^vector28:$/;"	l
vector28	vectors.S	/^vector28:$/;"	l
vector29	kernel.asm	/^vector29:$/;"	l
vector29	vectors.S	/^vector29:$/;"	l
vector3	kernel.asm	/^vector3:$/;"	l
vector3	vectors.S	/^vector3:$/;"	l
vector30	kernel.asm	/^vector30:$/;"	l
vector30	vectors.S	/^vector30:$/;"	l
vector31	kernel.asm	/^vector31:$/;"	l
vector31	vectors.S	/^vector31:$/;"	l
vector32	kernel.asm	/^vector32:$/;"	l
vector32	vectors.S	/^vector32:$/;"	l
vector33	kernel.asm	/^vector33:$/;"	l
vector33	vectors.S	/^vector33:$/;"	l
vector34	kernel.asm	/^vector34:$/;"	l
vector34	vectors.S	/^vector34:$/;"	l
vector35	kernel.asm	/^vector35:$/;"	l
vector35	vectors.S	/^vector35:$/;"	l
vector36	kernel.asm	/^vector36:$/;"	l
vector36	vectors.S	/^vector36:$/;"	l
vector37	kernel.asm	/^vector37:$/;"	l
vector37	vectors.S	/^vector37:$/;"	l
vector38	kernel.asm	/^vector38:$/;"	l
vector38	vectors.S	/^vector38:$/;"	l
vector39	kernel.asm	/^vector39:$/;"	l
vector39	vectors.S	/^vector39:$/;"	l
vector4	kernel.asm	/^vector4:$/;"	l
vector4	vectors.S	/^vector4:$/;"	l
vector40	kernel.asm	/^vector40:$/;"	l
vector40	vectors.S	/^vector40:$/;"	l
vector41	kernel.asm	/^vector41:$/;"	l
vector41	vectors.S	/^vector41:$/;"	l
vector42	kernel.asm	/^vector42:$/;"	l
vector42	vectors.S	/^vector42:$/;"	l
vector43	kernel.asm	/^vector43:$/;"	l
vector43	vectors.S	/^vector43:$/;"	l
vector44	kernel.asm	/^vector44:$/;"	l
vector44	vectors.S	/^vector44:$/;"	l
vector45	kernel.asm	/^vector45:$/;"	l
vector45	vectors.S	/^vector45:$/;"	l
vector46	kernel.asm	/^vector46:$/;"	l
vector46	vectors.S	/^vector46:$/;"	l
vector47	kernel.asm	/^vector47:$/;"	l
vector47	vectors.S	/^vector47:$/;"	l
vector48	kernel.asm	/^vector48:$/;"	l
vector48	vectors.S	/^vector48:$/;"	l
vector49	kernel.asm	/^vector49:$/;"	l
vector49	vectors.S	/^vector49:$/;"	l
vector5	kernel.asm	/^vector5:$/;"	l
vector5	vectors.S	/^vector5:$/;"	l
vector50	kernel.asm	/^vector50:$/;"	l
vector50	vectors.S	/^vector50:$/;"	l
vector51	kernel.asm	/^vector51:$/;"	l
vector51	vectors.S	/^vector51:$/;"	l
vector52	kernel.asm	/^vector52:$/;"	l
vector52	vectors.S	/^vector52:$/;"	l
vector53	kernel.asm	/^vector53:$/;"	l
vector53	vectors.S	/^vector53:$/;"	l
vector54	kernel.asm	/^vector54:$/;"	l
vector54	vectors.S	/^vector54:$/;"	l
vector55	kernel.asm	/^vector55:$/;"	l
vector55	vectors.S	/^vector55:$/;"	l
vector56	kernel.asm	/^vector56:$/;"	l
vector56	vectors.S	/^vector56:$/;"	l
vector57	kernel.asm	/^vector57:$/;"	l
vector57	vectors.S	/^vector57:$/;"	l
vector58	kernel.asm	/^vector58:$/;"	l
vector58	vectors.S	/^vector58:$/;"	l
vector59	kernel.asm	/^vector59:$/;"	l
vector59	vectors.S	/^vector59:$/;"	l
vector6	kernel.asm	/^vector6:$/;"	l
vector6	vectors.S	/^vector6:$/;"	l
vector60	kernel.asm	/^vector60:$/;"	l
vector60	vectors.S	/^vector60:$/;"	l
vector61	kernel.asm	/^vector61:$/;"	l
vector61	vectors.S	/^vector61:$/;"	l
vector62	kernel.asm	/^vector62:$/;"	l
vector62	vectors.S	/^vector62:$/;"	l
vector63	kernel.asm	/^vector63:$/;"	l
vector63	vectors.S	/^vector63:$/;"	l
vector64	kernel.asm	/^vector64:$/;"	l
vector64	vectors.S	/^vector64:$/;"	l
vector65	kernel.asm	/^vector65:$/;"	l
vector65	vectors.S	/^vector65:$/;"	l
vector66	kernel.asm	/^vector66:$/;"	l
vector66	vectors.S	/^vector66:$/;"	l
vector67	kernel.asm	/^vector67:$/;"	l
vector67	vectors.S	/^vector67:$/;"	l
vector68	kernel.asm	/^vector68:$/;"	l
vector68	vectors.S	/^vector68:$/;"	l
vector69	kernel.asm	/^vector69:$/;"	l
vector69	vectors.S	/^vector69:$/;"	l
vector7	kernel.asm	/^vector7:$/;"	l
vector7	vectors.S	/^vector7:$/;"	l
vector70	kernel.asm	/^vector70:$/;"	l
vector70	vectors.S	/^vector70:$/;"	l
vector71	kernel.asm	/^vector71:$/;"	l
vector71	vectors.S	/^vector71:$/;"	l
vector72	kernel.asm	/^vector72:$/;"	l
vector72	vectors.S	/^vector72:$/;"	l
vector73	kernel.asm	/^vector73:$/;"	l
vector73	vectors.S	/^vector73:$/;"	l
vector74	kernel.asm	/^vector74:$/;"	l
vector74	vectors.S	/^vector74:$/;"	l
vector75	kernel.asm	/^vector75:$/;"	l
vector75	vectors.S	/^vector75:$/;"	l
vector76	kernel.asm	/^vector76:$/;"	l
vector76	vectors.S	/^vector76:$/;"	l
vector77	kernel.asm	/^vector77:$/;"	l
vector77	vectors.S	/^vector77:$/;"	l
vector78	kernel.asm	/^vector78:$/;"	l
vector78	vectors.S	/^vector78:$/;"	l
vector79	kernel.asm	/^vector79:$/;"	l
vector79	vectors.S	/^vector79:$/;"	l
vector8	kernel.asm	/^vector8:$/;"	l
vector8	vectors.S	/^vector8:$/;"	l
vector80	kernel.asm	/^vector80:$/;"	l
vector80	vectors.S	/^vector80:$/;"	l
vector81	kernel.asm	/^vector81:$/;"	l
vector81	vectors.S	/^vector81:$/;"	l
vector82	kernel.asm	/^vector82:$/;"	l
vector82	vectors.S	/^vector82:$/;"	l
vector83	kernel.asm	/^vector83:$/;"	l
vector83	vectors.S	/^vector83:$/;"	l
vector84	kernel.asm	/^vector84:$/;"	l
vector84	vectors.S	/^vector84:$/;"	l
vector85	kernel.asm	/^vector85:$/;"	l
vector85	vectors.S	/^vector85:$/;"	l
vector86	kernel.asm	/^vector86:$/;"	l
vector86	vectors.S	/^vector86:$/;"	l
vector87	kernel.asm	/^vector87:$/;"	l
vector87	vectors.S	/^vector87:$/;"	l
vector88	kernel.asm	/^vector88:$/;"	l
vector88	vectors.S	/^vector88:$/;"	l
vector89	kernel.asm	/^vector89:$/;"	l
vector89	vectors.S	/^vector89:$/;"	l
vector9	kernel.asm	/^vector9:$/;"	l
vector9	vectors.S	/^vector9:$/;"	l
vector90	kernel.asm	/^vector90:$/;"	l
vector90	vectors.S	/^vector90:$/;"	l
vector91	kernel.asm	/^vector91:$/;"	l
vector91	vectors.S	/^vector91:$/;"	l
vector92	kernel.asm	/^vector92:$/;"	l
vector92	vectors.S	/^vector92:$/;"	l
vector93	kernel.asm	/^vector93:$/;"	l
vector93	vectors.S	/^vector93:$/;"	l
vector94	kernel.asm	/^vector94:$/;"	l
vector94	vectors.S	/^vector94:$/;"	l
vector95	kernel.asm	/^vector95:$/;"	l
vector95	vectors.S	/^vector95:$/;"	l
vector96	kernel.asm	/^vector96:$/;"	l
vector96	vectors.S	/^vector96:$/;"	l
vector97	kernel.asm	/^vector97:$/;"	l
vector97	vectors.S	/^vector97:$/;"	l
vector98	kernel.asm	/^vector98:$/;"	l
vector98	vectors.S	/^vector98:$/;"	l
vector99	kernel.asm	/^vector99:$/;"	l
vector99	vectors.S	/^vector99:$/;"	l
vectors	vectors.S	/^vectors:$/;"	l
version	elf.h	/^  uint version;$/;"	m	struct:elfhdr
version	fmt/elf.h	/^0910   uint version;$/;"	m	struct:elfhdr
version	fmt/mp.h	/^7616   uchar version;                \/\/ [14]$/;"	m	struct:mpconf
version	fmt/mp.h	/^7631   uchar version;                \/\/ local APIC verison$/;"	m	struct:mpproc
version	fmt/mp.h	/^7642   uchar version;                \/\/ I\/O APIC version$/;"	m	struct:mpioapic
version	mp.h	/^  uchar version;                \/\/ I\/O APIC version$/;"	m	struct:mpioapic
version	mp.h	/^  uchar version;                \/\/ [14]$/;"	m	struct:mpconf
version	mp.h	/^  uchar version;                \/\/ local APIC verison$/;"	m	struct:mpproc
virt	fmt/vm.c	/^1805   void *virt;$/;"	m	struct:kmap	file:
virt	vm.c	/^  void *virt;$/;"	m	struct:kmap	file:
void	bootblock.asm	/^void readseg(uchar*, uint, uint);$/;"	l
void	bootblock.asm	/^void$/;"	l
void	cat.asm	/^void$/;"	l
void	echo.asm	/^void$/;"	l
void	forktest.asm	/^void$/;"	l
void	getnice.asm	/^void$/;"	l
void	gettid.asm	/^void$/;"	l
void	grep.asm	/^void$/;"	l
void	halt.asm	/^void$/;"	l
void	init.asm	/^void$/;"	l
void	kernel.asm	/^void$/;"	l
void	kill.asm	/^void$/;"	l
void	ln.asm	/^void$/;"	l
void	ls.asm	/^void$/;"	l
void	mkdir.asm	/^void$/;"	l
void	ps.asm	/^void$/;"	l
void	rm.asm	/^void$/;"	l
void	setnice.asm	/^void$/;"	l
void	sh.asm	/^void$/;"	l
void	stressfs.asm	/^void$/;"	l
void	test.asm	/^void *thread(void *arg){$/;"	l
void	test.asm	/^void$/;"	l
void	thread_create.asm	/^void$/;"	l
void	thread_exit.asm	/^void$/;"	l
void	thread_join.asm	/^void$/;"	l
void	usertests.asm	/^void argptest()$/;"	l
void	usertests.asm	/^void dirtest(void)$/;"	l
void	usertests.asm	/^void$/;"	l
void	wc.asm	/^void$/;"	l
void	zombie.asm	/^void$/;"	l
w	console.c	/^  uint w;  \/\/ Write index$/;"	m	struct:__anon14	file:
w	fmt/console.c	/^8720   uint w;  \/\/ Write index$/;"	m	struct:__anon6	file:
wait	fmt/proc.c	/^2753 wait(void)$/;"	f
wait	proc.c	/^wait(void)$/;"	f
waitdisk	bootmain.c	/^waitdisk(void)$/;"	f
waitdisk	fmt/bootmain.c	/^9801 waitdisk(void)$/;"	f
wakeup	fmt/proc.c	/^3014 wakeup(void *chan)$/;"	f
wakeup	proc.c	/^wakeup(void *chan)$/;"	f
wakeup1	fmt/proc.c	/^3003 wakeup1(void *chan)$/;"	f	file:
wakeup1	proc.c	/^wakeup1(void *chan)$/;"	f	file:
walkpgdir	fmt/vm.c	/^1735 walkpgdir(pde_t *pgdir, const void *va, int alloc)$/;"	f	file:
walkpgdir	vm.c	/^walkpgdir(pde_t *pgdir, const void *va, int alloc)$/;"	f	file:
wc	wc.c	/^wc(int fd, char *name)$/;"	f
whitespace	fmt/sh.c	/^9402 char whitespace[] = " \\t\\r\\n\\v";$/;"	v
whitespace	sh.c	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	v
winode	mkfs.c	/^winode(uint inum, struct dinode *ip)$/;"	f
writable	file.h	/^  char writable;$/;"	m	struct:file
writable	fmt/file.h	/^4704   char writable;$/;"	m	struct:file
write	file.h	/^  int (*write)(struct inode*, char*, int);$/;"	m	struct:devsw
write	fmt/file.h	/^4731   int (*write)(struct inode*, char*, int);$/;"	m	struct:devsw
write_head	fmt/log.c	/^5354 write_head(void)$/;"	f	file:
write_head	log.c	/^write_head(void)$/;"	f	file:
write_log	fmt/log.c	/^5435 write_log(void)$/;"	f	file:
write_log	log.c	/^write_log(void)$/;"	f	file:
writefile	cuth	/^sub writefile($@){$/;"	s
writei	fmt/fs.c	/^6103 writei(struct inode *ip, char *src, uint off, uint n)$/;"	f
writei	fs.c	/^writei(struct inode *ip, char *src, uint off, uint n)$/;"	f
writeopen	fmt/pipe.c	/^7318   int writeopen;  \/\/ write fd is still open$/;"	m	struct:pipe	file:
writeopen	pipe.c	/^  int writeopen;  \/\/ write fd is still open$/;"	m	struct:pipe	file:
writetest	usertests.c	/^writetest(void)$/;"	f
writetest1	usertests.c	/^writetest1(void)$/;"	f
wrv	kernel.asm	/^  wrv = (ushort*)P2V((0x40<<4 | 0x67));  \/\/ Warm reset vector$/;"	d
wsect	mkfs.c	/^wsect(uint sec, void *buf)$/;"	f
x	cat.asm	/^    x = -xx;$/;"	d
x	cat.asm	/^    x = xx;$/;"	d
x	echo.asm	/^    x = -xx;$/;"	d
x	echo.asm	/^    x = xx;$/;"	d
x	getnice.asm	/^    x = -xx;$/;"	d
x	getnice.asm	/^    x = xx;$/;"	d
x	gettid.asm	/^    x = -xx;$/;"	d
x	gettid.asm	/^    x = xx;$/;"	d
x	grep.asm	/^    x = -xx;$/;"	d
x	grep.asm	/^    x = xx;$/;"	d
x	halt.asm	/^    x = -xx;$/;"	d
x	halt.asm	/^    x = xx;$/;"	d
x	init.asm	/^    x = -xx;$/;"	d
x	init.asm	/^    x = xx;$/;"	d
x	kernel.asm	/^    x = -xx;$/;"	d
x	kernel.asm	/^    x = xx;$/;"	d
x	kill.asm	/^    x = -xx;$/;"	d
x	kill.asm	/^    x = xx;$/;"	d
x	ln.asm	/^    x = -xx;$/;"	d
x	ln.asm	/^    x = xx;$/;"	d
x	ls.asm	/^    x = -xx;$/;"	d
x	ls.asm	/^    x = xx;$/;"	d
x	mkdir.asm	/^    x = -xx;$/;"	d
x	mkdir.asm	/^    x = xx;$/;"	d
x	ps.asm	/^    x = -xx;$/;"	d
x	ps.asm	/^    x = xx;$/;"	d
x	rm.asm	/^    x = -xx;$/;"	d
x	rm.asm	/^    x = xx;$/;"	d
x	setnice.asm	/^    x = -xx;$/;"	d
x	setnice.asm	/^    x = xx;$/;"	d
x	sh.asm	/^    x = -xx;$/;"	d
x	sh.asm	/^    x = xx;$/;"	d
x	stressfs.asm	/^    x = -xx;$/;"	d
x	stressfs.asm	/^    x = xx;$/;"	d
x	test.asm	/^    x = -xx;$/;"	d
x	test.asm	/^    x = xx;$/;"	d
x	thread_create.asm	/^    x = -xx;$/;"	d
x	thread_create.asm	/^    x = xx;$/;"	d
x	thread_exit.asm	/^    x = -xx;$/;"	d
x	thread_exit.asm	/^    x = xx;$/;"	d
x	thread_join.asm	/^    x = -xx;$/;"	d
x	thread_join.asm	/^    x = xx;$/;"	d
x	umalloc.c	/^  Align x;$/;"	m	union:header	file:
x	usertests.asm	/^    x = -xx;$/;"	d
x	usertests.asm	/^    x = x * 1103515245 + 12345;$/;"	d
x	usertests.asm	/^    x = xx;$/;"	d
x	wc.asm	/^    x = -xx;$/;"	d
x	wc.asm	/^    x = xx;$/;"	d
x	zombie.asm	/^    x = -xx;$/;"	d
x	zombie.asm	/^    x = xx;$/;"	d
xchecksum	fmt/mp.h	/^7624   uchar xchecksum;              \/\/ extended table checksum$/;"	m	struct:mpconf
xchecksum	mp.h	/^  uchar xchecksum;              \/\/ extended table checksum$/;"	m	struct:mpconf
xchg	fmt/x86.h	/^0569 xchg(volatile uint *addr, uint newval)$/;"	f
xchg	x86.h	/^xchg(volatile uint *addr, uint newval)$/;"	f
xffff	fmt/asm.h	/^0661         .word (((lim) >> 12) & 0xffff), ((base) & 0xffff);      \\$/;"	v
xint	mkfs.c	/^xint(uint x)$/;"	f
xlength	fmt/mp.h	/^7623   ushort xlength;               \/\/ extended table length$/;"	m	struct:mpconf
xlength	mp.h	/^  ushort xlength;               \/\/ extended table length$/;"	m	struct:mpconf
xshort	mkfs.c	/^xshort(ushort x)$/;"	f
xticks	kernel.asm	/^  xticks = ticks;$/;"	d
year	date.h	/^  uint year;$/;"	m	struct:rtcdate
year	fmt/date.h	/^0956   uint year;$/;"	m	struct:rtcdate
yield	fmt/proc.c	/^2878 yield(void)$/;"	f
yield	proc.c	/^yield(void)$/;"	f
zeroes	mkfs.c	/^char zeroes[BSIZE];$/;"	v
